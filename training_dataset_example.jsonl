{"text": "<s>[INST] Create a function to calculate the sum of a sequence of integers. here are the inputs # Python code\ndef sum_sequence(sequence):\n  sum = 0\n  for num in sequence:\n    sum += num\n  return sum [/INST] \\n [1, 2, 3, 4, 5] </s>", "instruction": "Create a function to calculate the sum of a sequence of integers.", "input": "[1, 2, 3, 4, 5]", "output": "# Python code\ndef sum_sequence(sequence):\n  sum = 0\n  for num in sequence:\n    sum += num\n  return sum"}
{"text": "<s>[INST] Develop a function that will add two strings here are the inputs def add_strings(str1, str2):\n    \"\"\"This function takes two strings and returns the sum of them.\"\"\"\n    return str1 + str2\n\nstr1 = \"Hello \"\nstr2 = \"world\"\nsum_of_strings = add_strings(str1, str2) [/INST] \\n str1 = \"Hello \"\nstr2 = \"world\" </s>", "instruction": "Develop a function that will add two strings", "input": "str1 = \"Hello \"\nstr2 = \"world\"", "output": "def add_strings(str1, str2):\n    \"\"\"This function takes two strings and returns the sum of them.\"\"\"\n    return str1 + str2\n\nstr1 = \"Hello \"\nstr2 = \"world\"\nsum_of_strings = add_strings(str1, str2)"}
{"text": "<s>[INST] Design a data structure in C++ to store information of a grocery store inventory. here are the inputs #include <map>\n#include <string>\n\nclass GroceryStoreInventory {\nprivate:\n    std::map<std::string, int> items;\npublic:\n    void addItems(std::string item, int quantity) {\n        items[item] = quantity;\n    }\n    int getQuantity(std::string item) {\n        if (items.find(item) != items.end()) {\n            return items[item];\n        }\n        return 0;\n    }\n}; [/INST] \\n  </s>", "instruction": "Design a data structure in C++ to store information of a grocery store inventory.", "input": "", "output": "#include <map>\n#include <string>\n\nclass GroceryStoreInventory {\nprivate:\n    std::map<std::string, int> items;\npublic:\n    void addItems(std::string item, int quantity) {\n        items[item] = quantity;\n    }\n    int getQuantity(std::string item) {\n        if (items.find(item) != items.end()) {\n            return items[item];\n        }\n        return 0;\n    }\n};"}
{"text": "<s>[INST] Implement a sorting algorithm to sort a given array. here are the inputs def bubble_sort(arr):\n    n = len(arr)\n \n    # Traverse through all array elements\n    for i in range(n):\n \n        # Last i elements are already in place\n        for j in range(0, n-i-1):\n \n            # traverse the array from 0 to n-i-1\n            # Swap if the element found is greater\n            # than the next element\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n \n# Driver code to test above\narr = [3, 1, 4, 5, 9, 0]\n \nbubble_sort(arr)\n \nprint (\"Sorted array is:\")\nfor i in range(len(arr)):\n    print (\"%d\" %arr[i]), [/INST] \\n [3, 1, 4, 5, 9, 0] </s>", "instruction": "Implement a sorting algorithm to sort a given array.", "input": "[3, 1, 4, 5, 9, 0]", "output": "def bubble_sort(arr):\n    n = len(arr)\n \n    # Traverse through all array elements\n    for i in range(n):\n \n        # Last i elements are already in place\n        for j in range(0, n-i-1):\n \n            # traverse the array from 0 to n-i-1\n            # Swap if the element found is greater\n            # than the next element\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n \n# Driver code to test above\narr = [3, 1, 4, 5, 9, 0]\n \nbubble_sort(arr)\n \nprint (\"Sorted array is:\")\nfor i in range(len(arr)):\n    print (\"%d\" %arr[i]),"}
{"text": "<s>[INST] Design a Swift application for tracking expenses. The app should have a view for creating new expenses, and a view for displaying all expenses in a table view. here are the inputs import UIKit\n\nclass ExpenseViewController: UIViewController { \n // MARK: - Variables\n var expenses = [Expense]() \n \n @IBOutlet weak var tableView: UITableView! \n \n // MARK: - UIViewController\n override func viewDidLoad() {\n super.viewDidLoad()\n \n tableView.dataSource = self \n tableView.delegate = self \n setUpNavigationBar() \n } \n \n // MARK: - Private Functions \n func setUpNavigationBar() { \n let addButton = UIBarButtonItem(barButtonSystemItem: .add, target: self, action: #selector(addButtonTapped)) \n navigationItem.setRightBarButton(addButton, animated: true) \n } \n \n @objc func addButtonTapped() { \n let expenseDetailViewController = ExpenseDetailViewController() \n expenseDetailViewController.delegate = self \n present(expenseDetailViewController, animated: true, completion: nil)\n } \n}\n\nextension ExpenseViewController: UITableViewDataSource { \n func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int { \n return expenses.count \n } \n \n func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n let cell = tableView.dequeueReusableCell(withIdentifier: \"expenseCell\", for: indexPath) \n let expense = expenses[indexPath.row] \n cell.textLabel?.text = expense.name \n cell.detailTextLabel?.text = expense.ammount \n return cell \n } \n}\n\nextension ExpenseViewController: UITableViewDelegate { \n func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { \n \n } \n}\n\nextension ExpenseViewController: ExpenseDetailViewControllerDelegate { \n func expenseDetailViewController(_ controller: ExpenseDetailViewController, didCreateExpense expense: Expense) { \n  expenses.append(expense) \n  tableView.reloadData() \n } \n} [/INST] \\n Not applicable </s>", "instruction": "Design a Swift application for tracking expenses. The app should have a view for creating new expenses, and a view for displaying all expenses in a table view.", "input": "Not applicable", "output": "import UIKit\n\nclass ExpenseViewController: UIViewController { \n // MARK: - Variables\n var expenses = [Expense]() \n \n @IBOutlet weak var tableView: UITableView! \n \n // MARK: - UIViewController\n override func viewDidLoad() {\n super.viewDidLoad()\n \n tableView.dataSource = self \n tableView.delegate = self \n setUpNavigationBar() \n } \n \n // MARK: - Private Functions \n func setUpNavigationBar() { \n let addButton = UIBarButtonItem(barButtonSystemItem: .add, target: self, action: #selector(addButtonTapped)) \n navigationItem.setRightBarButton(addButton, animated: true) \n } \n \n @objc func addButtonTapped() { \n let expenseDetailViewController = ExpenseDetailViewController() \n expenseDetailViewController.delegate = self \n present(expenseDetailViewController, animated: true, completion: nil)\n } \n}\n\nextension ExpenseViewController: UITableViewDataSource { \n func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int { \n return expenses.count \n } \n \n func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n let cell = tableView.dequeueReusableCell(withIdentifier: \"expenseCell\", for: indexPath) \n let expense = expenses[indexPath.row] \n cell.textLabel?.text = expense.name \n cell.detailTextLabel?.text = expense.ammount \n return cell \n } \n}\n\nextension ExpenseViewController: UITableViewDelegate { \n func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { \n \n } \n}\n\nextension ExpenseViewController: ExpenseDetailViewControllerDelegate { \n func expenseDetailViewController(_ controller: ExpenseDetailViewController, didCreateExpense expense: Expense) { \n  expenses.append(expense) \n  tableView.reloadData() \n } \n}"}
{"text": "<s>[INST] Create a REST API to convert a UNIX timestamp to human readable date. here are the inputs <?php\n$timestamp = $_GET['timestamp'];\n\nif(empty($timestamp)) {\n echo json_encode([\"error\" => \"Please provide a valid UNIX timestamp.\"]);\n die();\n}\n\n$date = date(\"Y-m-d H:i\", $timestamp);\necho json_encode([\"date\" => $date]);\n\n?> [/INST] \\n Not Applicable </s>", "instruction": "Create a REST API to convert a UNIX timestamp to human readable date.", "input": "Not Applicable", "output": "<?php\n$timestamp = $_GET['timestamp'];\n\nif(empty($timestamp)) {\n echo json_encode([\"error\" => \"Please provide a valid UNIX timestamp.\"]);\n die();\n}\n\n$date = date(\"Y-m-d H:i\", $timestamp);\necho json_encode([\"date\" => $date]);\n\n?>"}
{"text": "<s>[INST] Generate a Python code for crawling a website for a specific type of data. here are the inputs import requests\nimport re\n\ndef crawl_website_for_phone_numbers(website):\n    response = requests.get(website)\n    phone_numbers = re.findall('\\d{3}-\\d{3}-\\d{4}', response.text)\n    return phone_numbers\n    \nif __name__ == '__main__':\n    print(crawl_website_for_phone_numbers('www.example.com')) [/INST] \\n website: www.example.com \ndata to crawl: phone numbers </s>", "instruction": "Generate a Python code for crawling a website for a specific type of data.", "input": "website: www.example.com \ndata to crawl: phone numbers", "output": "import requests\nimport re\n\ndef crawl_website_for_phone_numbers(website):\n    response = requests.get(website)\n    phone_numbers = re.findall('\\d{3}-\\d{3}-\\d{4}', response.text)\n    return phone_numbers\n    \nif __name__ == '__main__':\n    print(crawl_website_for_phone_numbers('www.example.com'))"}
{"text": "<s>[INST] Create a Python list comprehension to get the squared values of a list [1, 2, 3, 5, 8, 13]. here are the inputs [x*x for x in [1, 2, 3, 5, 8, 13]] [/INST] \\n  </s>", "instruction": "Create a Python list comprehension to get the squared values of a list [1, 2, 3, 5, 8, 13].", "input": "", "output": "[x*x for x in [1, 2, 3, 5, 8, 13]]"}
{"text": "<s>[INST] Create a MySQL query to find the most expensive product from the table \"products\". here are the inputs SELECT * FROM products ORDER BY price DESC LIMIT 1; [/INST] \\n  </s>", "instruction": "Create a MySQL query to find the most expensive product from the table \"products\".", "input": "", "output": "SELECT * FROM products ORDER BY price DESC LIMIT 1;"}
{"text": "<s>[INST] Create a data structure in Java for storing and managing books in a library. The data structure should include methods for adding a new book, checking if a particular book is available, and borrowing a book from the library. here are the inputs public class Library {\n \n // map of books in the library, key is book id, value is Book object\n private Map<String, Book> books;\n \n // Constructor\n public Library() {\n  books = new HashMap<>();\n }\n \n public void addBook(Book book) {\n  books.put(book.getId(), book);\n }\n \n public boolean hasBook(String bookId) {\n  return books.containsKey(bookId);\n }\n \n public void borrowBook(String bookId) {\n  Book book = books.get(bookId);\n  if (book != null) {\n   book.borrow();\n  }\n }\n \n} [/INST] \\n Not applicable </s>", "instruction": "Create a data structure in Java for storing and managing books in a library. The data structure should include methods for adding a new book, checking if a particular book is available, and borrowing a book from the library.", "input": "Not applicable", "output": "public class Library {\n \n // map of books in the library, key is book id, value is Book object\n private Map<String, Book> books;\n \n // Constructor\n public Library() {\n  books = new HashMap<>();\n }\n \n public void addBook(Book book) {\n  books.put(book.getId(), book);\n }\n \n public boolean hasBook(String bookId) {\n  return books.containsKey(bookId);\n }\n \n public void borrowBook(String bookId) {\n  Book book = books.get(bookId);\n  if (book != null) {\n   book.borrow();\n  }\n }\n \n}"}
{"text": "<s>[INST] Design a neural network model to classify emails into spam and non-spam. here are the inputs import tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input\n\n# Preparing data\nX_train, y_train, X_test, y_test = get_data() # Returns training and testing datasets\n\n# Building model\ninputs = Input(shape=(X_train.shape[1], ))\nx = Dense(64, activation='relu')(inputs)\nx = Dense(32, activation='relu')(x)\npredictions = Dense(1, activation='sigmoid')(x)\n\n# Compiling model\nmodel = tf.keras.Model(inputs=inputs, outputs=predictions)\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\n# Training the model\nmodel.fit(X_train, y_train, epochs=30, batch_size=32)\n\n# Evaluating the model\nscores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Accuracy: %.2f%%\" % (scores[1]*100)) [/INST] \\n  </s>", "instruction": "Design a neural network model to classify emails into spam and non-spam.", "input": "", "output": "import tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input\n\n# Preparing data\nX_train, y_train, X_test, y_test = get_data() # Returns training and testing datasets\n\n# Building model\ninputs = Input(shape=(X_train.shape[1], ))\nx = Dense(64, activation='relu')(inputs)\nx = Dense(32, activation='relu')(x)\npredictions = Dense(1, activation='sigmoid')(x)\n\n# Compiling model\nmodel = tf.keras.Model(inputs=inputs, outputs=predictions)\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\n# Training the model\nmodel.fit(X_train, y_train, epochs=30, batch_size=32)\n\n# Evaluating the model\nscores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Accuracy: %.2f%%\" % (scores[1]*100))"}
{"text": "<s>[INST] Generate a random string of 8 characters that contains at least one number. here are the inputs function generateRandomString() {\n const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n let str = '';\n for (let i = 0; i < 8; i++) {\n str += chars[Math.floor(Math.random() * chars.length)];\n }\n return str;\n}\n\nconsole.log(generateRandomString()); // \"3xB9uU3d\" [/INST] \\n Not applicable </s>", "instruction": "Generate a random string of 8 characters that contains at least one number.", "input": "Not applicable", "output": "function generateRandomString() {\n const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n let str = '';\n for (let i = 0; i < 8; i++) {\n str += chars[Math.floor(Math.random() * chars.length)];\n }\n return str;\n}\n\nconsole.log(generateRandomString()); // \"3xB9uU3d\""}
{"text": "<s>[INST] Create a Java application for sending SMS messages. This application should include a class for configuring the SMS provider. here are the inputs import org.smslib.Library;\nimport org.smslib.http.SMSHttpProvider;\nimport org.smslib.smsserver.SMSServer;\n\npublic class SMSProvider {\n public void configureProvider(String username, String password) {\n SMSServer.getInstance().setSmsProvider(new SMSHttpProvider());\n SMSServer.getInstance().getSmsProvider().configure(\n \"username=\" + username + \",\" +\n \"password=\" + password,\n Library.getLibrary().getSettings());\n }\n} [/INST] \\n Not applicable </s>", "instruction": "Create a Java application for sending SMS messages. This application should include a class for configuring the SMS provider.", "input": "Not applicable", "output": "import org.smslib.Library;\nimport org.smslib.http.SMSHttpProvider;\nimport org.smslib.smsserver.SMSServer;\n\npublic class SMSProvider {\n public void configureProvider(String username, String password) {\n SMSServer.getInstance().setSmsProvider(new SMSHttpProvider());\n SMSServer.getInstance().getSmsProvider().configure(\n \"username=\" + username + \",\" +\n \"password=\" + password,\n Library.getLibrary().getSettings());\n }\n}"}
{"text": "<s>[INST] Create a Java program that generates a list of prime numbers from 2 to a given input. here are the inputs class PrimeNumber {\n public static void main(String a[]) {\n int n = 10;\n int i;\n int j;\n System.out.print(\"Prime numbers between 1 and \" + n + \" are : \");\n for (i = 1; i < n; i++) {\n int counter = 0;\n for (j = i; j >= 1; j--) {\n if (i % j == 0) {\n counter = counter + 1;\n }\n }\n if (counter == 2) {\n System.out.print(i + \" \");\n }\n }\n }\n}\n// Output: Prime numbers between 1 and 10 are : 2 3 5 7 [/INST] \\n 10 </s>", "instruction": "Create a Java program that generates a list of prime numbers from 2 to a given input.", "input": "10", "output": "class PrimeNumber {\n public static void main(String a[]) {\n int n = 10;\n int i;\n int j;\n System.out.print(\"Prime numbers between 1 and \" + n + \" are : \");\n for (i = 1; i < n; i++) {\n int counter = 0;\n for (j = i; j >= 1; j--) {\n if (i % j == 0) {\n counter = counter + 1;\n }\n }\n if (counter == 2) {\n System.out.print(i + \" \");\n }\n }\n }\n}\n// Output: Prime numbers between 1 and 10 are : 2 3 5 7"}
{"text": "<s>[INST] Create a JavaScript object containing key-value pairs for each item in the following list: here are the inputs const object = {\n    \"Apple\": \"\",\n    \"Orange\": \"\",\n    \"Carrot\": \"\"\n}; [/INST] \\n Apple, Orange, Carrot </s>", "instruction": "Create a JavaScript object containing key-value pairs for each item in the following list:", "input": "Apple, Orange, Carrot", "output": "const object = {\n    \"Apple\": \"\",\n    \"Orange\": \"\",\n    \"Carrot\": \"\"\n};"}
{"text": "<s>[INST] Generate a python script to perform this action. here are the inputs def remove_duplicates(string): \n    result = \"\" \n    prev = '' \n\n    for char in string:\n        if char != prev: \n            result += char\n            prev = char\n    return result\n\nresult = remove_duplicates(\"AAABBCCCD\")\nprint(result) [/INST] \\n Given a string, remove all the consecutive duplicates from the string.\n\nInput: \"AAABBCCCD\" </s>", "instruction": "Generate a python script to perform this action.", "input": "Given a string, remove all the consecutive duplicates from the string.\n\nInput: \"AAABBCCCD\"", "output": "def remove_duplicates(string): \n    result = \"\" \n    prev = '' \n\n    for char in string:\n        if char != prev: \n            result += char\n            prev = char\n    return result\n\nresult = remove_duplicates(\"AAABBCCCD\")\nprint(result)"}
{"text": "<s>[INST] Edit the following Java code to create a method that calculates the sum of an array of integers. here are the inputs public class Sum {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5};\n        System.out.println(\"The sum is: \" + getSum(numbers));\n    }\n    \n    public static int getSum(int[] numbers) {\n        int sum = 0;\n        for (int number : numbers) {\n            sum += number;\n        }\n        return sum;\n    }\n} [/INST] \\n public class Sum {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5};\n        System.out.println(\"The sum is: \" + getSum(numbers));\n    }\n} </s>", "instruction": "Edit the following Java code to create a method that calculates the sum of an array of integers.", "input": "public class Sum {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5};\n        System.out.println(\"The sum is: \" + getSum(numbers));\n    }\n}", "output": "public class Sum {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5};\n        System.out.println(\"The sum is: \" + getSum(numbers));\n    }\n    \n    public static int getSum(int[] numbers) {\n        int sum = 0;\n        for (int number : numbers) {\n            sum += number;\n        }\n        return sum;\n    }\n}"}
{"text": "<s>[INST] Design a Haskell solution for finding the area of a rectangle. here are the inputs rectArea :: Num a => a -> a -> a\nrectArea l w = l * w [/INST] \\n  </s>", "instruction": "Design a Haskell solution for finding the area of a rectangle.", "input": "", "output": "rectArea :: Num a => a -> a -> a\nrectArea l w = l * w"}
{"text": "<s>[INST] Create a React application to input two numbers and subtract them, displaying the result. here are the inputs import React, { useState } from \"react\";\n\nconst App = () => {\n  const [input1, setInput1] = useState(0);\n  const [input2, setInput2] = useState(0);\n  const [result, setResult] = useState(0);\n\n  const handleInput1Change = (e) => {\n    setInput1(e.target.value);\n  };\n\n  const handleInput2Change = (e) => {\n    setInput2(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setResult(Number(input1) - Number(input2));\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"number\"\n          value={input1}\n          onChange={handleInput1Change}\n        />\n        -\n        <input type=\"number\" value={input2} onChange={handleInput2Change} />\n        <button type=\"submit\">Calculate</button>\n      </form>\n      <p>Result: {result}</p>\n    </>\n  );\n};\n\nexport default App; [/INST] \\n Not applicable </s>", "instruction": "Create a React application to input two numbers and subtract them, displaying the result.", "input": "Not applicable", "output": "import React, { useState } from \"react\";\n\nconst App = () => {\n  const [input1, setInput1] = useState(0);\n  const [input2, setInput2] = useState(0);\n  const [result, setResult] = useState(0);\n\n  const handleInput1Change = (e) => {\n    setInput1(e.target.value);\n  };\n\n  const handleInput2Change = (e) => {\n    setInput2(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setResult(Number(input1) - Number(input2));\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"number\"\n          value={input1}\n          onChange={handleInput1Change}\n        />\n        -\n        <input type=\"number\" value={input2} onChange={handleInput2Change} />\n        <button type=\"submit\">Calculate</button>\n      </form>\n      <p>Result: {result}</p>\n    </>\n  );\n};\n\nexport default App;"}
{"text": "<s>[INST] Write a python script to generates random numbers between 0 and 9 that are divisible by 3. here are the inputs def generate_random_divisible_number():\n    import random\n    while True:\n        # Generate a random number\n        process = random.randint(0, 9)\n        # Check if the number is divisible by 3\n        if process % 3 == 0:\n            # If it is divisible, return it\n            return process [/INST] \\n  </s>", "instruction": "Write a python script to generates random numbers between 0 and 9 that are divisible by 3.", "input": "", "output": "def generate_random_divisible_number():\n    import random\n    while True:\n        # Generate a random number\n        process = random.randint(0, 9)\n        # Check if the number is divisible by 3\n        if process % 3 == 0:\n            # If it is divisible, return it\n            return process"}
{"text": "<s>[INST] Generate a 3x2 matrix filled with random numbers. here are the inputs import numpy as np\n\nmatrix = np.random.randint(1, 10, (3, 2))\nprint(matrix) [/INST] \\n  </s>", "instruction": "Generate a 3x2 matrix filled with random numbers.", "input": "", "output": "import numpy as np\n\nmatrix = np.random.randint(1, 10, (3, 2))\nprint(matrix)"}
{"text": "<s>[INST] Create a program which subtracts two numbers and prints the result. here are the inputs def subtract(a,b):\n  return a-b\n\nprint(subtract(110, 15)) # Output: 95 [/INST] \\n 110, 15 </s>", "instruction": "Create a program which subtracts two numbers and prints the result.", "input": "110, 15", "output": "def subtract(a,b):\n  return a-b\n\nprint(subtract(110, 15)) # Output: 95"}
{"text": "<s>[INST] Create a Django web application that displays a table of stocks with the following columns - name, current stock price, change and percentage change. here are the inputs import os\n\nimport django\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'webapp.settings')\ndjango.setup()\n\nfrom stocks.models import Stock\n\nstocks = [\n {'name': 'AAPL', 'price': 428.31, 'change': -1.51, 'percent_change': -0.35},\n {'name': 'MSFT', 'price': 217.31, 'change': 2.24, 'percent_change': 1.04}, \n {'name': 'AMZN', 'price': 3282.19, 'change': 5.78, 'percent_change': 0.18},\n {'name': 'FB', 'price': 262.83, 'change': 4.68, 'percent_change': 1.81},\n {'name': 'GOOG', 'price': 1517.11, 'change': 5.58, 'percent_change': 0.37},\n]\n\nfor stock in stocks: \n Stock.objects.create(**stock) [/INST] \\n NYSE:AAPL, 428.31, -1.51, -0.35\nNYSE:MSFT, 217.31, 2.24, 1.04\nNYSE:AMZN, 3282.19, 5.78, 0.18\nNYSE:FB, 262.83, 4.68, 1.81\nNYSE:GOOG, 1517.11, 5.58, 0.37 </s>", "instruction": "Create a Django web application that displays a table of stocks with the following columns - name, current stock price, change and percentage change.", "input": "NYSE:AAPL, 428.31, -1.51, -0.35\nNYSE:MSFT, 217.31, 2.24, 1.04\nNYSE:AMZN, 3282.19, 5.78, 0.18\nNYSE:FB, 262.83, 4.68, 1.81\nNYSE:GOOG, 1517.11, 5.58, 0.37", "output": "import os\n\nimport django\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'webapp.settings')\ndjango.setup()\n\nfrom stocks.models import Stock\n\nstocks = [\n {'name': 'AAPL', 'price': 428.31, 'change': -1.51, 'percent_change': -0.35},\n {'name': 'MSFT', 'price': 217.31, 'change': 2.24, 'percent_change': 1.04}, \n {'name': 'AMZN', 'price': 3282.19, 'change': 5.78, 'percent_change': 0.18},\n {'name': 'FB', 'price': 262.83, 'change': 4.68, 'percent_change': 1.81},\n {'name': 'GOOG', 'price': 1517.11, 'change': 5.58, 'percent_change': 0.37},\n]\n\nfor stock in stocks: \n Stock.objects.create(**stock)"}
{"text": "<s>[INST] Generate a class in C# that can be used to represent users in a database. here are the inputs public class User\n{\n\tpublic int Id { get; set; }\n\tpublic string Name { get; set; }\n\tpublic string EmailAddress { get; set; }\n\n\tpublic User(int id, string name, string emailAddress)\n\t{\n\t\tId = id;\n\t\tName = name;\n\t\tEmailAddress = emailAddress;\n\t}\n} [/INST] \\n  </s>", "instruction": "Generate a class in C# that can be used to represent users in a database.", "input": "", "output": "public class User\n{\n\tpublic int Id { get; set; }\n\tpublic string Name { get; set; }\n\tpublic string EmailAddress { get; set; }\n\n\tpublic User(int id, string name, string emailAddress)\n\t{\n\t\tId = id;\n\t\tName = name;\n\t\tEmailAddress = emailAddress;\n\t}\n}"}
{"text": "<s>[INST] Create a Matlab program that computes the summation of an given list of numbers. here are the inputs A = [3, 7, 23, 17]; %Input list\nanswer = sum(A); % Calculation\nfprintf('Summation of the given list is %d', answer); % Output [/INST] \\n [3, 7, 23, 17] </s>", "instruction": "Create a Matlab program that computes the summation of an given list of numbers.", "input": "[3, 7, 23, 17]", "output": "A = [3, 7, 23, 17]; %Input list\nanswer = sum(A); % Calculation\nfprintf('Summation of the given list is %d', answer); % Output"}
{"text": "<s>[INST] In the function below, write an algorithm to reverse a string. here are the inputs def reverse_string(string):\n    # Reverse the string\n    if len(string) == 0: \n        return string \n    else: \n        return reverse_str(string[1:]) + string[0] [/INST] \\n def reverse_string(string):\n    #TODO </s>", "instruction": "In the function below, write an algorithm to reverse a string.", "input": "def reverse_string(string):\n    #TODO", "output": "def reverse_string(string):\n    # Reverse the string\n    if len(string) == 0: \n        return string \n    else: \n        return reverse_str(string[1:]) + string[0]"}
{"text": "<s>[INST] Create a code snippet that will generate a random string with length n (n is an input to the program). here are the inputs import random\nimport string\n\ndef generateRandomString(n):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(n)) [/INST] \\n  </s>", "instruction": "Create a code snippet that will generate a random string with length n (n is an input to the program).", "input": "", "output": "import random\nimport string\n\ndef generateRandomString(n):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(n))"}
{"text": "<s>[INST] Build a program to train a model to recognize handwritten digits using a convolutional neural network. here are the inputs import tensorflow as tf\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D\n\n# Input image dimensions\nimg_rows, img_cols = 28, 28\n# Load image data\n(x_train, y_train), (x_valid, y_valid) = mnist.load_data()\n# Reshape it for Conv2D\nx_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)\nx_valid = x_valid.reshape(x_valid.shape[0], img_rows, img_cols, 1)\n# Convert to float32\nx_train = x_train.astype('float32')\nx_valid = x_valid.astype('float32')\n# Normalize data\nx_train /= 255\nx_valid /= 255\n\n# Build and compile the model\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3,3), activation='relu', input_shape=x_train.shape[1:]))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation='softmax'))\nmodel.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.fit(x_train, y_train, epochs=10, batch_size=128, validation_data=(x_valid, y_valid)) [/INST] \\n  </s>", "instruction": "Build a program to train a model to recognize handwritten digits using a convolutional neural network.", "input": "", "output": "import tensorflow as tf\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D\n\n# Input image dimensions\nimg_rows, img_cols = 28, 28\n# Load image data\n(x_train, y_train), (x_valid, y_valid) = mnist.load_data()\n# Reshape it for Conv2D\nx_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)\nx_valid = x_valid.reshape(x_valid.shape[0], img_rows, img_cols, 1)\n# Convert to float32\nx_train = x_train.astype('float32')\nx_valid = x_valid.astype('float32')\n# Normalize data\nx_train /= 255\nx_valid /= 255\n\n# Build and compile the model\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3,3), activation='relu', input_shape=x_train.shape[1:]))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation='softmax'))\nmodel.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.fit(x_train, y_train, epochs=10, batch_size=128, validation_data=(x_valid, y_valid))"}
{"text": "<s>[INST] Create a web page to visualize the tree structure provided as an input. here are the inputs <!DOCTYPE html>\n<html>\n   <head>\n      <title>Tree visualization</title>\n      <style>\n         ul {\n            list-style-type: none;\n            padding: 0;\n            margin: 0;\n         }\n         li {\n            display: flex;\n            flex-direction: row;\n            justify-content: flex-start;\n            font-size: 48px;\n            padding: 5px 0;\n            margin-bottom: 10px;\n         }\n         li::before {\n            content: \" \";\n            flex: 0 0 90%;\n            padding-right: 10px;\n            border-left: 1px solid gray;\n         }\n      </style>\n   </head>\n   <body>\n      <ul>\n         <li>0\n            <ul>\n               <li>1\n                  <ul>\n                     <li>3</li>\n                     <li>4</li>\n                  </ul>\n               </li>\n               <li>2\n                  <ul>\n                     <li>5</li>\n                  </ul>\n               </li>\n            </ul>\n         </li>\n      </ul>\n   </body>\n</html> [/INST] \\n Tree structure:\n\n+---0\n    +---1\n    |   +---3\n    |   +---4\n    +---2\n        +---5 </s>", "instruction": "Create a web page to visualize the tree structure provided as an input.", "input": "Tree structure:\n\n+---0\n    +---1\n    |   +---3\n    |   +---4\n    +---2\n        +---5", "output": "<!DOCTYPE html>\n<html>\n   <head>\n      <title>Tree visualization</title>\n      <style>\n         ul {\n            list-style-type: none;\n            padding: 0;\n            margin: 0;\n         }\n         li {\n            display: flex;\n            flex-direction: row;\n            justify-content: flex-start;\n            font-size: 48px;\n            padding: 5px 0;\n            margin-bottom: 10px;\n         }\n         li::before {\n            content: \" \";\n            flex: 0 0 90%;\n            padding-right: 10px;\n            border-left: 1px solid gray;\n         }\n      </style>\n   </head>\n   <body>\n      <ul>\n         <li>0\n            <ul>\n               <li>1\n                  <ul>\n                     <li>3</li>\n                     <li>4</li>\n                  </ul>\n               </li>\n               <li>2\n                  <ul>\n                     <li>5</li>\n                  </ul>\n               </li>\n            </ul>\n         </li>\n      </ul>\n   </body>\n</html>"}
{"text": "<s>[INST] Rewrite the following code to remove two lines that are not necessary. here are the inputs def find_max(nums, max_num=None):\n    if len(nums) == 0:\n        return None\n    \n    for num in nums:\n        if num > max_num:\n            max_num = num\n                    \n    return max_num [/INST] \\n def find_max(nums, max_num=None):\n    if len(nums) == 0:\n        return None\n\n    if max_num is None:\n        max_num = nums[0]\n        \n    for num in nums:\n        if num > max_num:\n            max_num = num\n                    \n    return max_num </s>", "instruction": "Rewrite the following code to remove two lines that are not necessary.", "input": "def find_max(nums, max_num=None):\n    if len(nums) == 0:\n        return None\n\n    if max_num is None:\n        max_num = nums[0]\n        \n    for num in nums:\n        if num > max_num:\n            max_num = num\n                    \n    return max_num", "output": "def find_max(nums, max_num=None):\n    if len(nums) == 0:\n        return None\n    \n    for num in nums:\n        if num > max_num:\n            max_num = num\n                    \n    return max_num"}
{"text": "<s>[INST] Design an object-oriented architecture for a game in C++. here are the inputs #include <iostream>\n\n//Define the base class\nclass GameObject {\n     public:\n     // All game objects have a position\n     double x, y, z;\n\n     // Every game object should have an update method\n     virtual void Update() { };\n\n     //Destructor\n     virtual ~GameObject() { }\n};\n\n//Define a derived class\nclass Player : public GameObject {\n     public:\n     //Player objects have a health\n     int health;\n\n     // Every Player should update in its own way\n     void Update() override {\n         // Do something here\n     }  \n};\n\n//Define another derived class\nclass Enemy : public GameObject {\n     public:\n     //Enemy objects have an attack damage\n     int attackDamage;\n\n     // Every Enemy should update in its own way\n     void Update() override {\n         // Do something here\n     }  \n}; [/INST] \\n Not applicable </s>", "instruction": "Design an object-oriented architecture for a game in C++.", "input": "Not applicable", "output": "#include <iostream>\n\n//Define the base class\nclass GameObject {\n     public:\n     // All game objects have a position\n     double x, y, z;\n\n     // Every game object should have an update method\n     virtual void Update() { };\n\n     //Destructor\n     virtual ~GameObject() { }\n};\n\n//Define a derived class\nclass Player : public GameObject {\n     public:\n     //Player objects have a health\n     int health;\n\n     // Every Player should update in its own way\n     void Update() override {\n         // Do something here\n     }  \n};\n\n//Define another derived class\nclass Enemy : public GameObject {\n     public:\n     //Enemy objects have an attack damage\n     int attackDamage;\n\n     // Every Enemy should update in its own way\n     void Update() override {\n         // Do something here\n     }  \n};"}
{"text": "<s>[INST] Create a function to remove all white spaces in a string. here are the inputs def remove_whitespace(string):\n    return string.replace(\" \", \"\") [/INST] \\n string = \u201c  Hello  World  \u201d </s>", "instruction": "Create a function to remove all white spaces in a string.", "input": "string = \u201c  Hello  World  \u201d", "output": "def remove_whitespace(string):\n    return string.replace(\" \", \"\")"}
{"text": "<s>[INST] Implement a recommendation engine in your mobile application which can offer customized suggestions based on user interaction. here are the inputs // The main function to get recommendations\nfunction getRecommendations(userInput) {\n // Get data from the API call\n let data = await API.getData(); \n \n // Process data to extract important information\n let processedData = processData(data);\n \n // Process user input to extract important information\n let processedUserInput = processUserInput(userInput); \n \n // Compare the processed data and processed user input\n let comparisons = compareInputs(processedData, processedUserInput); \n \n // Get the most similar value\n let topMatch = getTopMatch(comparisons); \n \n // Create the recommendations with the top match\n let recommendations = createRecommendations(topMatch);\n  \n return recommendations;\n } [/INST] \\n Not applicable </s>", "instruction": "Implement a recommendation engine in your mobile application which can offer customized suggestions based on user interaction.", "input": "Not applicable", "output": "// The main function to get recommendations\nfunction getRecommendations(userInput) {\n // Get data from the API call\n let data = await API.getData(); \n \n // Process data to extract important information\n let processedData = processData(data);\n \n // Process user input to extract important information\n let processedUserInput = processUserInput(userInput); \n \n // Compare the processed data and processed user input\n let comparisons = compareInputs(processedData, processedUserInput); \n \n // Get the most similar value\n let topMatch = getTopMatch(comparisons); \n \n // Create the recommendations with the top match\n let recommendations = createRecommendations(topMatch);\n  \n return recommendations;\n }"}
{"text": "<s>[INST] Write a C ++ program to optimize a given matrix with specific values. here are the inputs #include <iostream>\n#include <vector> \n\nusing namespace std;\n\nvoid optimizeMatrix (vector<vector<int>> &mat, int val) { \n  // Iterate over the matrix\n  for (int i = 0; i < mat.size(); i++) { \n    for (int j = 0; j < mat[i].size(); j++) { \n      // Substitute all elements to be \n      // greater than or equal to value\n      if (mat[i][j] < val) \n        mat[i][j] = val; \n    } \n  } \n} \n\nint main() \n{ \n  // Create a matrix \n  vector<vector<int>> mat = { {4, 5, 7}, \n                        {9, 1, 8}, \n                        {1, 2, 4} }; \n  int val = 3; \n  // print matrix\n  optimizeMatrix(mat, val); \n  // Print after optimization\n  for (int i = 0; i < mat.size(); i++) { \n    for (int j = 0; j < mat[i].size(); j++) \n      cout << mat[i][j] << \" \"; \n    cout << endl; \n  } \n  return 0; \n} [/INST] \\n  </s>", "instruction": "Write a C ++ program to optimize a given matrix with specific values.", "input": "", "output": "#include <iostream>\n#include <vector> \n\nusing namespace std;\n\nvoid optimizeMatrix (vector<vector<int>> &mat, int val) { \n  // Iterate over the matrix\n  for (int i = 0; i < mat.size(); i++) { \n    for (int j = 0; j < mat[i].size(); j++) { \n      // Substitute all elements to be \n      // greater than or equal to value\n      if (mat[i][j] < val) \n        mat[i][j] = val; \n    } \n  } \n} \n\nint main() \n{ \n  // Create a matrix \n  vector<vector<int>> mat = { {4, 5, 7}, \n                        {9, 1, 8}, \n                        {1, 2, 4} }; \n  int val = 3; \n  // print matrix\n  optimizeMatrix(mat, val); \n  // Print after optimization\n  for (int i = 0; i < mat.size(); i++) { \n    for (int j = 0; j < mat[i].size(); j++) \n      cout << mat[i][j] << \" \"; \n    cout << endl; \n  } \n  return 0; \n}"}
{"text": "<s>[INST] Create a bubble sort algorithm to sort an array of integers in ascending order. here are the inputs def bubble_sort(arr):\n    n = len(arr) \n\n    # Loop through the array from the beginning to the end \n    for i in range(n):\n        # Create a flag to determine if a swap is necessary\n        swap_flag = False\n        \n        # Iterate through all elements before the last\n        for j in range(0, n-i-1):\n            # Compare the two elements\n            if arr[j] > arr[j+1] :\n                # Swap the two elements\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                # Set the flag\n                swap_flag = True\n        \n        # Break out of the loop if no swap is needed\n        if swap_flag == False:\n            break\n\n# example\narr = [5,1,4,2,3]\nbubble_sort(arr)\nprint(arr) # [1, 2, 3, 4, 5] [/INST] \\n [5,1,4,2,3] </s>", "instruction": "Create a bubble sort algorithm to sort an array of integers in ascending order.", "input": "[5,1,4,2,3]", "output": "def bubble_sort(arr):\n    n = len(arr) \n\n    # Loop through the array from the beginning to the end \n    for i in range(n):\n        # Create a flag to determine if a swap is necessary\n        swap_flag = False\n        \n        # Iterate through all elements before the last\n        for j in range(0, n-i-1):\n            # Compare the two elements\n            if arr[j] > arr[j+1] :\n                # Swap the two elements\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                # Set the flag\n                swap_flag = True\n        \n        # Break out of the loop if no swap is needed\n        if swap_flag == False:\n            break\n\n# example\narr = [5,1,4,2,3]\nbubble_sort(arr)\nprint(arr) # [1, 2, 3, 4, 5]"}
{"text": "<s>[INST] Develop a React component to render a list of user comments sorted by highest rating to lowest rating. here are the inputs import React from 'react';\n\nconst CommentsList = ({ comments }) => {\n const sortedComments = comments.sort((a, b) => b.rating - a.rating); \n \n return (\n <ul>\n {sortedComments.map(comment => (\n <li key={comment.id}>\n <p>\n <b>Rating:</b> {comment.rating}\n </p>\n <p>{comment.body}</p>\n <p>\n <b>Author:</b> {comment.author}\n </p>\n </li>\n ))}\n </ul>\n );\n};\n\nexport default CommentsList; [/INST] \\n Not applicable </s>", "instruction": "Develop a React component to render a list of user comments sorted by highest rating to lowest rating.", "input": "Not applicable", "output": "import React from 'react';\n\nconst CommentsList = ({ comments }) => {\n const sortedComments = comments.sort((a, b) => b.rating - a.rating); \n \n return (\n <ul>\n {sortedComments.map(comment => (\n <li key={comment.id}>\n <p>\n <b>Rating:</b> {comment.rating}\n </p>\n <p>{comment.body}</p>\n <p>\n <b>Author:</b> {comment.author}\n </p>\n </li>\n ))}\n </ul>\n );\n};\n\nexport default CommentsList;"}
{"text": "<s>[INST] To evaluate a user's birthdate, write a JavaScript function to calculate age given a date of birth. here are the inputs function calculateAge(dateString) {\n let today = new Date();\n let birthDate = new Date(dateString);\n let age = today.getFullYear() - birthDate.getFullYear();\n let m = today.getMonth() - birthDate.getMonth();\n if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n age--;\n }\n return age;\n}\n\nconsole.log(calculateAge(\"1982/3/21\")); // Output: 38 [/INST] \\n date = 1982/3/21 </s>", "instruction": "To evaluate a user's birthdate, write a JavaScript function to calculate age given a date of birth.", "input": "date = 1982/3/21", "output": "function calculateAge(dateString) {\n let today = new Date();\n let birthDate = new Date(dateString);\n let age = today.getFullYear() - birthDate.getFullYear();\n let m = today.getMonth() - birthDate.getMonth();\n if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n age--;\n }\n return age;\n}\n\nconsole.log(calculateAge(\"1982/3/21\")); // Output: 38"}
{"text": "<s>[INST] Create a SQL query to select all records from a table ordered by date from oldest to newest. here are the inputs SELECT * FROM table ORDER BY date ASC; [/INST] \\n Not applicable </s>", "instruction": "Create a SQL query to select all records from a table ordered by date from oldest to newest.", "input": "Not applicable", "output": "SELECT * FROM table ORDER BY date ASC;"}
{"text": "<s>[INST] Develop an Express application to manage Users. This application should have routes for creating a new User, getting a User, updating a User, and deleting a User. here are the inputs // File: routes/users.js\n\nconst express = require('express');\nconst { createUser, getUser, updateUser, deleteUser } = require('../controller/usersController');\n\nconst router = express.Router();\n\n// Create a new User\nrouter.post('/users', createUser);\n\n// Get a User\nrouter.get('/users/:id', getUser);\n\n// Update a User\nrouter.put('/users/:id', updateUser);\n\n// Delete a User\nrouter.delete('/users/:id', deleteUser);\n\nmodule.exports = router; [/INST] \\n Not applicable </s>", "instruction": "Develop an Express application to manage Users. This application should have routes for creating a new User, getting a User, updating a User, and deleting a User.", "input": "Not applicable", "output": "// File: routes/users.js\n\nconst express = require('express');\nconst { createUser, getUser, updateUser, deleteUser } = require('../controller/usersController');\n\nconst router = express.Router();\n\n// Create a new User\nrouter.post('/users', createUser);\n\n// Get a User\nrouter.get('/users/:id', getUser);\n\n// Update a User\nrouter.put('/users/:id', updateUser);\n\n// Delete a User\nrouter.delete('/users/:id', deleteUser);\n\nmodule.exports = router;"}
{"text": "<s>[INST] Write a function in Java to split the array into two halves. here are the inputs public static void splitArray(int arr[]) \n{ \n\tint mid = (arr.length + 1) / 2; \n\tint a[] = Arrays.copyOfRange(arr, 0, mid); \n\tint b[] = Arrays.copyOfRange(arr, mid, arr.length); \n\n\tSystem.out.println(\"First Array: \"+Arrays.toString(a));\n\tSystem.out.println(\"Second Array: \"+Arrays.toString(b));\n} [/INST] \\n Array: {2, 4, 1, 6, 7, 8, 3, 5} </s>", "instruction": "Write a function in Java to split the array into two halves.", "input": "Array: {2, 4, 1, 6, 7, 8, 3, 5}", "output": "public static void splitArray(int arr[]) \n{ \n\tint mid = (arr.length + 1) / 2; \n\tint a[] = Arrays.copyOfRange(arr, 0, mid); \n\tint b[] = Arrays.copyOfRange(arr, mid, arr.length); \n\n\tSystem.out.println(\"First Array: \"+Arrays.toString(a));\n\tSystem.out.println(\"Second Array: \"+Arrays.toString(b));\n}"}
{"text": "<s>[INST] Generate a valid JavaScript class constructor that takes in x and y coordinates. here are the inputs class Point {\n constructor(x, y) {\n  this.x = x;\n  this.y = y;\n }\n} [/INST] \\n Not applicable </s>", "instruction": "Generate a valid JavaScript class constructor that takes in x and y coordinates.", "input": "Not applicable", "output": "class Point {\n constructor(x, y) {\n  this.x = x;\n  this.y = y;\n }\n}"}
{"text": "<s>[INST] Write a Python code to get the third largest element in a given row. here are the inputs def third_largest(lst):\n    if len(lst) < 3:\n        return\n    distinct = []\n    for i in lst:\n        if i not in distinct:\n            distinct.append(i)\n    distinct.sort(reverse=True)\n    return distinct[2] [/INST] \\n [12, 13, 13, 45, 22, 99] </s>", "instruction": "Write a Python code to get the third largest element in a given row.", "input": "[12, 13, 13, 45, 22, 99]", "output": "def third_largest(lst):\n    if len(lst) < 3:\n        return\n    distinct = []\n    for i in lst:\n        if i not in distinct:\n            distinct.append(i)\n    distinct.sort(reverse=True)\n    return distinct[2]"}
{"text": "<s>[INST] Given a list of tuples, write a program to find the tuple with the maximum sum. here are the inputs def max_sum_tuple(tuples):\n    # Initialize the max_sum as 0\n    max_sum = 0\n    \n    # Iterate through the list of tuples\n    for tup in tuples:\n        # Get the sum of the current tuple\n        sum_tup = sum(tup)\n        # Update the max_sum if the current sum is greater\n        if sum_tup > max_sum:\n            max_sum = sum_tup\n            max_tup = tup\n    \n    return max_tup\n\nprint(max_sum_tuple(tuples)) [/INST] \\n tuples = [(1, 2), (5, 6), (7, 8), (4, 9)] </s>", "instruction": "Given a list of tuples, write a program to find the tuple with the maximum sum.", "input": "tuples = [(1, 2), (5, 6), (7, 8), (4, 9)]", "output": "def max_sum_tuple(tuples):\n    # Initialize the max_sum as 0\n    max_sum = 0\n    \n    # Iterate through the list of tuples\n    for tup in tuples:\n        # Get the sum of the current tuple\n        sum_tup = sum(tup)\n        # Update the max_sum if the current sum is greater\n        if sum_tup > max_sum:\n            max_sum = sum_tup\n            max_tup = tup\n    \n    return max_tup\n\nprint(max_sum_tuple(tuples))"}
{"text": "<s>[INST] Create a Julia function to binarize an input array here are the inputs function binarize(arr)\n    convertedArr = zeros(size(arr))\n    for i in eachindex(arr)\n        if arr[i] > 0\n            convertedArr[i] = 1\n        end\n    end\n    return convertedArr\nend [/INST] \\n  </s>", "instruction": "Create a Julia function to binarize an input array", "input": "", "output": "function binarize(arr)\n    convertedArr = zeros(size(arr))\n    for i in eachindex(arr)\n        if arr[i] > 0\n            convertedArr[i] = 1\n        end\n    end\n    return convertedArr\nend"}
{"text": "<s>[INST] Generate a REST API with Python and Flask that allows users to create, read, update, and delete records from a database. here are the inputs from flask import Flask, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(name)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\ndb = SQLAlchemy(app)\n\nclass Record(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String(120), unique=True)\n\ndb.create_all()\n\n@app.route('/records', methods=['GET'])\ndef get_records():\n records = Record.query.all()\n return {'records':[record.name for record in records]}\n\n@app.route('/records', methods=['POST'])\ndef create_record():\n record = Record(name=request.json['name'])\n db.session.add(record)\n db.session.commit()\n return {'id': record.id}\n\n@app.route('/records/int:id', methods=['PUT'])\ndef update_record(id):\n record = Record.query.get(id)\n record.name = request.json['name']\n db.session.commit()\n return {'message': 'Record updated'}\n\n@app.route('/records/int:id', methods=['DELETE'])\ndef delete_record(id):\n Record.query.filter_by(id=id).delete()\n db.session.commit()\n return {'message': 'Record deleted'}\n\nif name == 'main':\n app.run(debug=True) [/INST] \\n Not applicable </s>", "instruction": "Generate a REST API with Python and Flask that allows users to create, read, update, and delete records from a database.", "input": "Not applicable", "output": "from flask import Flask, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(name)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\ndb = SQLAlchemy(app)\n\nclass Record(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String(120), unique=True)\n\ndb.create_all()\n\n@app.route('/records', methods=['GET'])\ndef get_records():\n records = Record.query.all()\n return {'records':[record.name for record in records]}\n\n@app.route('/records', methods=['POST'])\ndef create_record():\n record = Record(name=request.json['name'])\n db.session.add(record)\n db.session.commit()\n return {'id': record.id}\n\n@app.route('/records/int:id', methods=['PUT'])\ndef update_record(id):\n record = Record.query.get(id)\n record.name = request.json['name']\n db.session.commit()\n return {'message': 'Record updated'}\n\n@app.route('/records/int:id', methods=['DELETE'])\ndef delete_record(id):\n Record.query.filter_by(id=id).delete()\n db.session.commit()\n return {'message': 'Record deleted'}\n\nif name == 'main':\n app.run(debug=True)"}
{"text": "<s>[INST] Generate an algorithm that checks for the validity of a sudoku puzzle solution here are the inputs def valid_sudoku(board):\n    # Row check\n    for row in board:\n        if sorted(row) != [1,2,3,4,5,6,7,8,9]:\n            return False\n    \n    # Column check\n    for col in list(zip(*board)):\n        if sorted(col) != [1,2,3,4,5,6,7,8,9]:\n            return False\n    \n    # 3x3 check\n    for i in [0,3,6]:\n        for j in [0,3,6]:\n            subset = [board[x][y] for x in range(i,i+3) for y in range(j,j+3)]\n            if sorted(subset) != [1,2,3,4,5,6,7,8,9]:\n                return False\n    \n    # If everything passes, the board is valid\n    return True [/INST] \\n 3 4 6 8 2 9 7 5 1 \n7 8 9 6 5 1 4 3 2 \n5 2 1 4 7 3 6 9 8 \n6 3 7 9 4 8 5 2 1 \n2 9 4 5 1 6 3 8 7 \n8 1 5 3 6 7 9 4 2 \n9 6 8 1 3 5 2 7 4 \n1 7 3 2 8 4 9 6 5 \n4 5 2 7 9 6 1 0 8 </s>", "instruction": "Generate an algorithm that checks for the validity of a sudoku puzzle solution", "input": "3 4 6 8 2 9 7 5 1 \n7 8 9 6 5 1 4 3 2 \n5 2 1 4 7 3 6 9 8 \n6 3 7 9 4 8 5 2 1 \n2 9 4 5 1 6 3 8 7 \n8 1 5 3 6 7 9 4 2 \n9 6 8 1 3 5 2 7 4 \n1 7 3 2 8 4 9 6 5 \n4 5 2 7 9 6 1 0 8", "output": "def valid_sudoku(board):\n    # Row check\n    for row in board:\n        if sorted(row) != [1,2,3,4,5,6,7,8,9]:\n            return False\n    \n    # Column check\n    for col in list(zip(*board)):\n        if sorted(col) != [1,2,3,4,5,6,7,8,9]:\n            return False\n    \n    # 3x3 check\n    for i in [0,3,6]:\n        for j in [0,3,6]:\n            subset = [board[x][y] for x in range(i,i+3) for y in range(j,j+3)]\n            if sorted(subset) != [1,2,3,4,5,6,7,8,9]:\n                return False\n    \n    # If everything passes, the board is valid\n    return True"}
{"text": "<s>[INST] Devise an algorithm in Java that takes a list of numbers as input and outputs the mean (average) of the numbers. here are the inputs public static double calculateMean(List<Integer> list) {\n\tdouble sum = 0;\n\tfor (int num : list) {\n\t\tsum += num;\n\t}\n\t\n\tdouble mean = sum / (list.size());\n\t\n\treturn mean;\n} [/INST] \\n List of Numbers: [1, 3, 2, 5, 4] </s>", "instruction": "Devise an algorithm in Java that takes a list of numbers as input and outputs the mean (average) of the numbers.", "input": "List of Numbers: [1, 3, 2, 5, 4]", "output": "public static double calculateMean(List<Integer> list) {\n\tdouble sum = 0;\n\tfor (int num : list) {\n\t\tsum += num;\n\t}\n\t\n\tdouble mean = sum / (list.size());\n\t\n\treturn mean;\n}"}
{"text": "<s>[INST] Attempt to classify the following data points (1, 5) and (2, 8) using a linear classifier. here are the inputs We can use the following linear classifier:\ny = mx + c\n\nwith m = 3 and c = 0, our classifier would look like:\ny = 3x + 0\n\nFor the given data points (1, 5) and (2, 8) we can classify them like so:\nPoint (1, 5) ->  5 = 3(1) + 0 -> y = 3x, classify as class 1\nPoint (2, 8) ->  8 = 3(2) + 0 -> y = 3x, classify as class 1 [/INST] \\n  </s>", "instruction": "Attempt to classify the following data points (1, 5) and (2, 8) using a linear classifier.", "input": "", "output": "We can use the following linear classifier:\ny = mx + c\n\nwith m = 3 and c = 0, our classifier would look like:\ny = 3x + 0\n\nFor the given data points (1, 5) and (2, 8) we can classify them like so:\nPoint (1, 5) ->  5 = 3(1) + 0 -> y = 3x, classify as class 1\nPoint (2, 8) ->  8 = 3(2) + 0 -> y = 3x, classify as class 1"}
{"text": "<s>[INST] Convert the following pseudocode into SQL query. here are the inputs SELECT \n  CASE\n    WHEN age BETWEEN 18 AND 25 THEN 'Young Adult'\n    WHEN age BETWEEN 26 AND 30 THEN 'Adult'\n    WHEN age > 30 THEN 'Senior'\n  END AS age_group\nFROM table; [/INST] \\n IF age is between 18 and 25 output \"Young Adult\"\nELSE IF age is between 26 and 30 output \"Adult\"\nELSE IF age is greater than 30 output \"Senior\" </s>", "instruction": "Convert the following pseudocode into SQL query.", "input": "IF age is between 18 and 25 output \"Young Adult\"\nELSE IF age is between 26 and 30 output \"Adult\"\nELSE IF age is greater than 30 output \"Senior\"", "output": "SELECT \n  CASE\n    WHEN age BETWEEN 18 AND 25 THEN 'Young Adult'\n    WHEN age BETWEEN 26 AND 30 THEN 'Adult'\n    WHEN age > 30 THEN 'Senior'\n  END AS age_group\nFROM table;"}
{"text": "<s>[INST] Design a program to identify the elements present in a list which are binary values. here are the inputs def binary_elements(arr):\n    result = []\n    for val in arr:\n        if val == True or val == False:\n            result.append(val)\n    return result [/INST] \\n [1, 2, True, False, 0, 4] </s>", "instruction": "Design a program to identify the elements present in a list which are binary values.", "input": "[1, 2, True, False, 0, 4]", "output": "def binary_elements(arr):\n    result = []\n    for val in arr:\n        if val == True or val == False:\n            result.append(val)\n    return result"}
{"text": "<s>[INST] Create a Python function that takes in a string and a list of words and returns true if the string contains all the words in the list. here are the inputs def contains_words(input_string, words):\n for word in words:\n if word not in input_string:\n return False\n return True\n\nprint(contains_words('This is a test', ['test', 'this', 'is'])) # True [/INST] \\n 'This is a test', ['test', 'this', 'is'] </s>", "instruction": "Create a Python function that takes in a string and a list of words and returns true if the string contains all the words in the list.", "input": "'This is a test', ['test', 'this', 'is']", "output": "def contains_words(input_string, words):\n for word in words:\n if word not in input_string:\n return False\n return True\n\nprint(contains_words('This is a test', ['test', 'this', 'is'])) # True"}
{"text": "<s>[INST] Write a JavaScript program to move all zeros in an array to the end. here are the inputs function moveZeros(arr){\n let notZero = [];\n let zeros = [];\n for(let item of arr){\n  if(item === 0){\n   zeros.push(item);\n  } else {\n   notZero.push(item);\n  }\n }\n\n for (let zero of zeros){\n  notZero.push(zero);\n }\n\n return notZero;\n}\n\nconsole.log(moveZeros([0, 4, 0, 10, 0, 2, 14])) [/INST] \\n [0, 4, 0, 10, 0, 2, 14] </s>", "instruction": "Write a JavaScript program to move all zeros in an array to the end.", "input": "[0, 4, 0, 10, 0, 2, 14]", "output": "function moveZeros(arr){\n let notZero = [];\n let zeros = [];\n for(let item of arr){\n  if(item === 0){\n   zeros.push(item);\n  } else {\n   notZero.push(item);\n  }\n }\n\n for (let zero of zeros){\n  notZero.push(zero);\n }\n\n return notZero;\n}\n\nconsole.log(moveZeros([0, 4, 0, 10, 0, 2, 14]))"}
{"text": "<s>[INST] Construct a regex pattern that can detect any strings that contain ampersand character as the first letter. here are the inputs regex_pattern = r\"^&.*\" [/INST] \\n  </s>", "instruction": "Construct a regex pattern that can detect any strings that contain ampersand character as the first letter.", "input": "", "output": "regex_pattern = r\"^&.*\""}
{"text": "<s>[INST] Create a Keras model with one input and one output that classifies text strings into two categories. here are the inputs # Define the model\nmodel = Sequential()\nmodel.add(Input(shape=(None,))) #Input layer\nmodel.add(Embedding(input_dim=VOCAB_SIZE, output_dim=EMBEDDING_DIM))\nmodel.add(Bidirectional(LSTM(units=128)))\nmodel.add(Dense(units=2, activation=\"softmax\"))\n\n# Compile the model\nmodel.compile(\n    optimizer=\"adam\",\n    loss=\"binary_crossentropy\",\n    metrics=['acc']\n)\n\n# Train the model\nmodel.fit(\n    x=data,\n    y=labels,\n    batch_size=64,\n    epochs=30\n) [/INST] \\n Two sets of text strings, one for each category </s>", "instruction": "Create a Keras model with one input and one output that classifies text strings into two categories.", "input": "Two sets of text strings, one for each category", "output": "# Define the model\nmodel = Sequential()\nmodel.add(Input(shape=(None,))) #Input layer\nmodel.add(Embedding(input_dim=VOCAB_SIZE, output_dim=EMBEDDING_DIM))\nmodel.add(Bidirectional(LSTM(units=128)))\nmodel.add(Dense(units=2, activation=\"softmax\"))\n\n# Compile the model\nmodel.compile(\n    optimizer=\"adam\",\n    loss=\"binary_crossentropy\",\n    metrics=['acc']\n)\n\n# Train the model\nmodel.fit(\n    x=data,\n    y=labels,\n    batch_size=64,\n    epochs=30\n)"}
{"text": "<s>[INST] Write a function to compute the maximum thermometer reading given as a list of strings? here are the inputs def max_thermometer_reading(l):\n    '''This function computes the maximum thermometer reading given as a list of strings'''\n    order = {'F': 0, 'C': 1}\n    max_val = float('-inf')\n    for reading in l:\n        num, unit = reading[:-1], reading[-1]\n        if order[unit] > order[max_val[-1]]:\n            max_val = reading\n        elif order[unit] == order[max_val[-1]]:\n            if float(max_val[:-1]) < float(num):\n                max_val = reading\n    return max_val [/INST] \\n [\"100F\", \"45C\", \"30C\"] </s>", "instruction": "Write a function to compute the maximum thermometer reading given as a list of strings?", "input": "[\"100F\", \"45C\", \"30C\"]", "output": "def max_thermometer_reading(l):\n    '''This function computes the maximum thermometer reading given as a list of strings'''\n    order = {'F': 0, 'C': 1}\n    max_val = float('-inf')\n    for reading in l:\n        num, unit = reading[:-1], reading[-1]\n        if order[unit] > order[max_val[-1]]:\n            max_val = reading\n        elif order[unit] == order[max_val[-1]]:\n            if float(max_val[:-1]) < float(num):\n                max_val = reading\n    return max_val"}
{"text": "<s>[INST] Create a GraphQL query which returns the list of countries with their populations. here are the inputs query {\n countries {\n name\n population\n }\n} [/INST] \\n Not applicable </s>", "instruction": "Create a GraphQL query which returns the list of countries with their populations.", "input": "Not applicable", "output": "query {\n countries {\n name\n population\n }\n}"}
{"text": "<s>[INST] Program a webhook to continuously monitor a specific resource for any changes and send an alert in the form of an email when a change is detected. here are the inputs const axios = require('axios');\nconst cron = require('node-cron');\nconst nodemailer = require('nodemailer');\n\n// Create a cron job to trigger the monitoring\ncron.schedule('* * * * *', async () => {\n // Make an API call to get the resource\n const response = await axios.get('<url of resource endpoint>');\n const data = response.data;\n\n // Check if the value has changed from the last time\n if (data.value !== <previous_value>) {\n // Send the alert\n const transporter = nodemailer.createTransport({\n host: <host>, \n port: <port>,\n auth: {\n user: <user>,\n pass: <password>\n }\n });\n\n const mailOptions = {\n from: <sender email>,\n to: <recipient email>,\n subject: 'Resource Change Alert',\n text: `The value of the resource has been changed to ${data.value}`\n };\n\n transporter.sendMail(mailOptions, (error, info) => {\n if (error) {\n console.log(error);\n } else {\n console.log('Email sent: ' + info.response);\n }\n });\n }\n <update previous_value to the latest value>\n}); [/INST] \\n Not applicable </s>", "instruction": "Program a webhook to continuously monitor a specific resource for any changes and send an alert in the form of an email when a change is detected.", "input": "Not applicable", "output": "const axios = require('axios');\nconst cron = require('node-cron');\nconst nodemailer = require('nodemailer');\n\n// Create a cron job to trigger the monitoring\ncron.schedule('* * * * *', async () => {\n // Make an API call to get the resource\n const response = await axios.get('<url of resource endpoint>');\n const data = response.data;\n\n // Check if the value has changed from the last time\n if (data.value !== <previous_value>) {\n // Send the alert\n const transporter = nodemailer.createTransport({\n host: <host>, \n port: <port>,\n auth: {\n user: <user>,\n pass: <password>\n }\n });\n\n const mailOptions = {\n from: <sender email>,\n to: <recipient email>,\n subject: 'Resource Change Alert',\n text: `The value of the resource has been changed to ${data.value}`\n };\n\n transporter.sendMail(mailOptions, (error, info) => {\n if (error) {\n console.log(error);\n } else {\n console.log('Email sent: ' + info.response);\n }\n });\n }\n <update previous_value to the latest value>\n});"}
{"text": "<s>[INST] Create a function which reverses a string in JavaScript. here are the inputs function reverseString(str) {\n  let reversedStr = '';\n    \n  for(let i = str.length -1; i >= 0; i--) {\n    reversedStr += str[i];\n  }\n    \n  return reversedStr;  \n} [/INST] \\n  </s>", "instruction": "Create a function which reverses a string in JavaScript.", "input": "", "output": "function reverseString(str) {\n  let reversedStr = '';\n    \n  for(let i = str.length -1; i >= 0; i--) {\n    reversedStr += str[i];\n  }\n    \n  return reversedStr;  \n}"}
{"text": "<s>[INST] Create a HTML page with an input form to capture the name of a user here are the inputs <html>\n    <head>\n        <title>Input Form</title>\n    </head>\n    <body>\n        <form action=\"\" method=\"post\">\n            <label for=\"name\">Name: </label>\n            <input type=\"text\" name=\"name\" id=\"name\">\n            <input type=\"submit\" name=\"submit\" value=\"Submit\">\n        </form>\n    </body>\n</html> [/INST] \\n  </s>", "instruction": "Create a HTML page with an input form to capture the name of a user", "input": "", "output": "<html>\n    <head>\n        <title>Input Form</title>\n    </head>\n    <body>\n        <form action=\"\" method=\"post\">\n            <label for=\"name\">Name: </label>\n            <input type=\"text\" name=\"name\" id=\"name\">\n            <input type=\"submit\" name=\"submit\" value=\"Submit\">\n        </form>\n    </body>\n</html>"}
{"text": "<s>[INST] What should this Python program do? here are the inputs def is_palindrome(s):\n    '''This function returns True if the string s is a palindrome and False if it isn't.''' \n    return s == s[::-1]  # Checks if s is the same as its reverse. [/INST] \\n def is_palindrome(s):\n    '''Write your code here.''' </s>", "instruction": "What should this Python program do?", "input": "def is_palindrome(s):\n    '''Write your code here.'''", "output": "def is_palindrome(s):\n    '''This function returns True if the string s is a palindrome and False if it isn't.''' \n    return s == s[::-1]  # Checks if s is the same as its reverse."}
{"text": "<s>[INST] Use the Amazon Text-to-Speech API to generate speech from a given text. here are the inputs import boto3\n\nclient = boto3.client('polly')\n\ndef text_to_speech(text):\n    response = client.synthesize_speech(\n    OutputFormat='mp3',\n    Text=text,\n    VoiceId='Joanna'\n    )\n    return response [/INST] \\n  </s>", "instruction": "Use the Amazon Text-to-Speech API to generate speech from a given text.", "input": "", "output": "import boto3\n\nclient = boto3.client('polly')\n\ndef text_to_speech(text):\n    response = client.synthesize_speech(\n    OutputFormat='mp3',\n    Text=text,\n    VoiceId='Joanna'\n    )\n    return response"}
{"text": "<s>[INST] Rewrite this Java program to extend it to do all permutations of a given array. here are the inputs import java.util.Arrays;\n\npublic class Permutation {\n\n    public static void permute(int[] arr, int index, int n) {\n        if (index >= n) {\n            System.out.println(Arrays.toString(arr));\n            return;\n        }\n  \n        for (int i = index; i < n; i++) { \n  \n            // Swapping\n            int temp = arr[i];\n            arr[i] = arr[index];\n            arr[index] = temp;\n  \n            permute(arr, index + 1, n);\n  \n            // Backtrack\n            temp = arr[i];\n            arr[i] = arr[index];\n            arr[index] = temp;\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3};\n        permute(arr, 0, arr.length);\n    }\n} [/INST] \\n import java.util.Arrays;\n\npublic class Permutation {\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3};\n        System.out.println(Arrays.toString(arr));\n    }\n} </s>", "instruction": "Rewrite this Java program to extend it to do all permutations of a given array.", "input": "import java.util.Arrays;\n\npublic class Permutation {\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3};\n        System.out.println(Arrays.toString(arr));\n    }\n}", "output": "import java.util.Arrays;\n\npublic class Permutation {\n\n    public static void permute(int[] arr, int index, int n) {\n        if (index >= n) {\n            System.out.println(Arrays.toString(arr));\n            return;\n        }\n  \n        for (int i = index; i < n; i++) { \n  \n            // Swapping\n            int temp = arr[i];\n            arr[i] = arr[index];\n            arr[index] = temp;\n  \n            permute(arr, index + 1, n);\n  \n            // Backtrack\n            temp = arr[i];\n            arr[i] = arr[index];\n            arr[index] = temp;\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3};\n        permute(arr, 0, arr.length);\n    }\n}"}
{"text": "<s>[INST] Use the Sklearn API to create a logistic regression model with maximum iterations of 80. here are the inputs from sklearn.linear_model import LogisticRegression\n\nmodel = LogisticRegression(max_iter=80) [/INST] \\n  </s>", "instruction": "Use the Sklearn API to create a logistic regression model with maximum iterations of 80.", "input": "", "output": "from sklearn.linear_model import LogisticRegression\n\nmodel = LogisticRegression(max_iter=80)"}
{"text": "<s>[INST] Output the maximum element in an array. here are the inputs 15 [/INST] \\n [1, 5, 10, 8, 15] </s>", "instruction": "Output the maximum element in an array.", "input": "[1, 5, 10, 8, 15]", "output": "15"}
{"text": "<s>[INST] Create a Vue.js component with a button that calls an action when clicked. here are the inputs <template>\n <div>\n  <button @click=\"handleClick\">Click me!</button>\n </div>\n</template>\n\n<script>\nexport default {\n name: 'MyComponent',\n methods: {\n  handleClick() {\n   // call an action here\n  }\n }\n}\n</script> [/INST] \\n Not applicable </s>", "instruction": "Create a Vue.js component with a button that calls an action when clicked.", "input": "Not applicable", "output": "<template>\n <div>\n  <button @click=\"handleClick\">Click me!</button>\n </div>\n</template>\n\n<script>\nexport default {\n name: 'MyComponent',\n methods: {\n  handleClick() {\n   // call an action here\n  }\n }\n}\n</script>"}
{"text": "<s>[INST] Create a program that creates a class with variables and methods here are the inputs public class HelloClass {\n    private String name;\n\n    public HelloClass(String name) {\n        this.name = name;\n    }\n\n    public void sayHello() {\n        System.out.println(\"Hello \" + name);\n    }\n} [/INST] \\n A string variable called 'name' and a function called 'sayHello' which prints 'Hello {name}'. </s>", "instruction": "Create a program that creates a class with variables and methods", "input": "A string variable called 'name' and a function called 'sayHello' which prints 'Hello {name}'.", "output": "public class HelloClass {\n    private String name;\n\n    public HelloClass(String name) {\n        this.name = name;\n    }\n\n    public void sayHello() {\n        System.out.println(\"Hello \" + name);\n    }\n}"}
{"text": "<s>[INST] Design and create a data structure to efficiently store and retrieve student information. here are the inputs struct Student {\n    int id;\n    string name;\n    string email;\n    int age;\n    int grade;\n    string address;\n};\n\nunordered_map<int, Student> studentDB; [/INST] \\n  </s>", "instruction": "Design and create a data structure to efficiently store and retrieve student information.", "input": "", "output": "struct Student {\n    int id;\n    string name;\n    string email;\n    int age;\n    int grade;\n    string address;\n};\n\nunordered_map<int, Student> studentDB;"}
{"text": "<s>[INST] Design a function in Java to calculate the maximum of a given array. here are the inputs public static int getMaxElement(int[] arr) { \n\tif (arr.length == 0) \n\t\treturn 0; \n  \n\tint maxElement = arr[0]; \n \n\tfor (int i = 1; i < arr.length; i++) \n\t\tif (arr[i] > maxElement) \n\t\t\tmaxElement = arr[i]; \n  \n\treturn maxElement; \n} \n\nint[] arr = { 6, 1, 4, 9, -2 }; \nint maximumElement = getMaxElement(arr); \nSystem.out.println(\"Maximum element of the array is: \" + maximumElement); \n# Output: 9 [/INST] \\n [6, 1, 4, 9, -2] </s>", "instruction": "Design a function in Java to calculate the maximum of a given array.", "input": "[6, 1, 4, 9, -2]", "output": "public static int getMaxElement(int[] arr) { \n\tif (arr.length == 0) \n\t\treturn 0; \n  \n\tint maxElement = arr[0]; \n \n\tfor (int i = 1; i < arr.length; i++) \n\t\tif (arr[i] > maxElement) \n\t\t\tmaxElement = arr[i]; \n  \n\treturn maxElement; \n} \n\nint[] arr = { 6, 1, 4, 9, -2 }; \nint maximumElement = getMaxElement(arr); \nSystem.out.println(\"Maximum element of the array is: \" + maximumElement); \n# Output: 9"}
{"text": "<s>[INST] Create a Python program to sort and print out the elements of an array of integers. here are the inputs arr = [17, 41, 5, 22, 54, 6, 29, 3, 13]\n\narr.sort()\n\nprint(arr)\n\n# Output: [3, 5, 6, 13, 17, 22, 29, 41, 54] [/INST] \\n [17, 41, 5, 22, 54, 6, 29, 3, 13] </s>", "instruction": "Create a Python program to sort and print out the elements of an array of integers.", "input": "[17, 41, 5, 22, 54, 6, 29, 3, 13]", "output": "arr = [17, 41, 5, 22, 54, 6, 29, 3, 13]\n\narr.sort()\n\nprint(arr)\n\n# Output: [3, 5, 6, 13, 17, 22, 29, 41, 54]"}
{"text": "<s>[INST] Create a program to simulate the movement of a particle in two dimensions. here are the inputs def simulate_particle(x0, y0, vx0, vy0, dt):\n    \"\"\"Simulate the movement of a particle in two dimensions given initial x, y postions and the x, y velocities.\"\"\"\n    x_position = x0 + vx0 * dt\n    y_position = y0 + vy0 * dt \n    return (x_position, y_position)\n\nx, y = simulate_particle(0, 0, 5, 10, 0.2)\nprint(\"X position: \", x)\nprint(\"Y position: \", y) [/INST] \\n  </s>", "instruction": "Create a program to simulate the movement of a particle in two dimensions.", "input": "", "output": "def simulate_particle(x0, y0, vx0, vy0, dt):\n    \"\"\"Simulate the movement of a particle in two dimensions given initial x, y postions and the x, y velocities.\"\"\"\n    x_position = x0 + vx0 * dt\n    y_position = y0 + vy0 * dt \n    return (x_position, y_position)\n\nx, y = simulate_particle(0, 0, 5, 10, 0.2)\nprint(\"X position: \", x)\nprint(\"Y position: \", y)"}
{"text": "<s>[INST] Implement a deep learning model to classify intents in a utterance. here are the inputs The model would take the utterance as input and be trained on a labeled dataset of intents and utterances. The outputs of the model can be probabilities of each intent corresponding to the input utterance. The model could for example be a recurrent neural network (RNN) with an attention layer which is trained on the dataset. [/INST] \\n Utterance: I would like to book a flight </s>", "instruction": "Implement a deep learning model to classify intents in a utterance.", "input": "Utterance: I would like to book a flight", "output": "The model would take the utterance as input and be trained on a labeled dataset of intents and utterances. The outputs of the model can be probabilities of each intent corresponding to the input utterance. The model could for example be a recurrent neural network (RNN) with an attention layer which is trained on the dataset."}
{"text": "<s>[INST] Create an HTML page with a JavaScript function that calculates a user's Body Mass Index (BMI). here are the inputs <!DOCTYPE html>\n<html>\n<head>\n  <title>BMI Calculator</title>\n  <script>\n    function calculateBMI(){\n      // get the user's weight and height from the inputs\n      let weight = document.getElementById('weight').value;\n      let height = document.getElementById('height').value;\n      // calculate BMI\n      let bmi = weight / (height * height);\n      //display the result \n      document.getElementById('result').innerHTML = 'Your BMI is ' + bmi;\n    }\n  </script>\n</head>\n<body>\n  <h1>Body Mass Index (BMI) Calculator</h1>\n\n  <input type=\"text\" id=\"weight\" placeholder=\"Enter your weight in kg\">\n  <input type=\"text\" id=\"height\" placeholder=\"Enter your height in meters\">\n  <button onclick=\"calculateBMI()\">Calculate BMI</button>\n  <p id=\"result\"></p>\n\n</body>\n</html> [/INST] \\n Not applicable </s>", "instruction": "Create an HTML page with a JavaScript function that calculates a user's Body Mass Index (BMI).", "input": "Not applicable", "output": "<!DOCTYPE html>\n<html>\n<head>\n  <title>BMI Calculator</title>\n  <script>\n    function calculateBMI(){\n      // get the user's weight and height from the inputs\n      let weight = document.getElementById('weight').value;\n      let height = document.getElementById('height').value;\n      // calculate BMI\n      let bmi = weight / (height * height);\n      //display the result \n      document.getElementById('result').innerHTML = 'Your BMI is ' + bmi;\n    }\n  </script>\n</head>\n<body>\n  <h1>Body Mass Index (BMI) Calculator</h1>\n\n  <input type=\"text\" id=\"weight\" placeholder=\"Enter your weight in kg\">\n  <input type=\"text\" id=\"height\" placeholder=\"Enter your height in meters\">\n  <button onclick=\"calculateBMI()\">Calculate BMI</button>\n  <p id=\"result\"></p>\n\n</body>\n</html>"}
{"text": "<s>[INST] Create a stored procedure in MySQL to insert new data into the table 'users'. here are the inputs CREATE PROCEDURE insert_user(IN first_name VARCHAR(255), IN last_name VARCHAR(255), IN email VARCHAR(255), IN user_level INT)\n   BEGIN\n      INSERT INTO users(first_name, last_name, email, user_level)\n      VALUES(first_name, last_name, email, user_level);\n   END; [/INST] \\n  </s>", "instruction": "Create a stored procedure in MySQL to insert new data into the table 'users'.", "input": "", "output": "CREATE PROCEDURE insert_user(IN first_name VARCHAR(255), IN last_name VARCHAR(255), IN email VARCHAR(255), IN user_level INT)\n   BEGIN\n      INSERT INTO users(first_name, last_name, email, user_level)\n      VALUES(first_name, last_name, email, user_level);\n   END;"}
{"text": "<s>[INST] Generate a Python program that adds two then doubles the result. here are the inputs def double_add(num1, num2): \n    return (num1 + num2) * 2 [/INST] \\n  </s>", "instruction": "Generate a Python program that adds two then doubles the result.", "input": "", "output": "def double_add(num1, num2): \n    return (num1 + num2) * 2"}
{"text": "<s>[INST] Edit the given C++ class so that the copy constructor is defined. here are the inputs class MyClass {\npublic:\n    MyClass(const MyClass& other){};\n\nprivate:\n}; [/INST] \\n class MyClass {\npublic:\n\nprivate:\n}; </s>", "instruction": "Edit the given C++ class so that the copy constructor is defined.", "input": "class MyClass {\npublic:\n\nprivate:\n};", "output": "class MyClass {\npublic:\n    MyClass(const MyClass& other){};\n\nprivate:\n};"}
{"text": "<s>[INST] Create a Java program that creates an SQL query to calculate the summation of values in a given column. here are the inputs String sql = \"SELECT SUM(payment_amount) FROM orders\"; \nStatement st = conn.createStatement(); \nResultSet rs = st.executeQuery(sql); \nwhile(rs.next()) { \n System.out.println(\"Sum of payment_amount : \" + rs.getInt(\"SUM(payment_amount)\")); \n} [/INST] \\n Table name: orders\nColumn name: payment_amount </s>", "instruction": "Create a Java program that creates an SQL query to calculate the summation of values in a given column.", "input": "Table name: orders\nColumn name: payment_amount", "output": "String sql = \"SELECT SUM(payment_amount) FROM orders\"; \nStatement st = conn.createStatement(); \nResultSet rs = st.executeQuery(sql); \nwhile(rs.next()) { \n System.out.println(\"Sum of payment_amount : \" + rs.getInt(\"SUM(payment_amount)\")); \n}"}
{"text": "<s>[INST] Generate an optimized SQL query that select all rows in the table. here are the inputs SELECT * FROM Employees; [/INST] \\n Table Name: Employees </s>", "instruction": "Generate an optimized SQL query that select all rows in the table.", "input": "Table Name: Employees", "output": "SELECT * FROM Employees;"}
{"text": "<s>[INST] Create a NumPy array called \"arr\" with 10 elements and compute the median. here are the inputs import numpy as np\n\narr = np.random.randint(0, 100, 10)\nmedian = np.median(arr) [/INST] \\n  </s>", "instruction": "Create a NumPy array called \"arr\" with 10 elements and compute the median.", "input": "", "output": "import numpy as np\n\narr = np.random.randint(0, 100, 10)\nmedian = np.median(arr)"}
{"text": "<s>[INST] Generate a JavaScript script for parsing HTML tables. here are the inputs const table = document.querySelector('table');\nconst rows = table.querySelectorAll('tr');\nconst data = [];\n\n rows.forEach(row => {\n  let cells = row.querySelectorAll('td');\n  let rowData = {};\n  for (let i = 0; i < cells.length; i += 2) {\n   const key = cells[i].textContent;\n   const value = cells[i+1].textContent;\n   rowData[key] = value;\n  }\n  data.push(rowData);\n });\n\nconsole.log(data);\n/*\n[\n    {\n        \"id\": 1,\n        \"name\": \"John Smith\",\n        \"email\": \"john@example.com\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Jane Doe\",\n        \"email\": \"jane@example.com\"\n    }\n]\n*/ [/INST] \\n [\n    {\n        \"id\": 1,\n        \"name\": \"John Smith\",\n        \"email\": \"john@example.com\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Jane Doe\",\n        \"email\": \"jane@example.com\"\n    }\n] </s>", "instruction": "Generate a JavaScript script for parsing HTML tables.", "input": "[\n    {\n        \"id\": 1,\n        \"name\": \"John Smith\",\n        \"email\": \"john@example.com\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Jane Doe\",\n        \"email\": \"jane@example.com\"\n    }\n]", "output": "const table = document.querySelector('table');\nconst rows = table.querySelectorAll('tr');\nconst data = [];\n\n rows.forEach(row => {\n  let cells = row.querySelectorAll('td');\n  let rowData = {};\n  for (let i = 0; i < cells.length; i += 2) {\n   const key = cells[i].textContent;\n   const value = cells[i+1].textContent;\n   rowData[key] = value;\n  }\n  data.push(rowData);\n });\n\nconsole.log(data);\n/*\n[\n    {\n        \"id\": 1,\n        \"name\": \"John Smith\",\n        \"email\": \"john@example.com\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Jane Doe\",\n        \"email\": \"jane@example.com\"\n    }\n]\n*/"}
{"text": "<s>[INST] Create a React component that displays given data points in a graphical format. here are the inputs import React, { Component } from 'react';\nimport { Line } from 'react-chartjs-2';\n\nclass Chart extends Component {\n\n  render() {\n    const data = {\n      labels: [1, 2, 3],\n      datasets: [\n        {\n          label: 'Data points',\n          data: this.props.dataPoints,\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: 'rgba(75,192,192,0.4)',\n          borderColor: 'rgba(75,192,192,1)',\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: 'rgba(75,192,192,1)',\n          pointBackgroundColor: '#fff',\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n        }\n      ]\n    };\n\n    return (\n      <div>\n        <Line data={data} />\n      </div>\n    )\n  }\n }\n\n export default Chart; [/INST] \\n Data Points: [{x: 1, y: 10}, {x: 2, y: 20}, {x: 3, y: 30}] </s>", "instruction": "Create a React component that displays given data points in a graphical format.", "input": "Data Points: [{x: 1, y: 10}, {x: 2, y: 20}, {x: 3, y: 30}]", "output": "import React, { Component } from 'react';\nimport { Line } from 'react-chartjs-2';\n\nclass Chart extends Component {\n\n  render() {\n    const data = {\n      labels: [1, 2, 3],\n      datasets: [\n        {\n          label: 'Data points',\n          data: this.props.dataPoints,\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: 'rgba(75,192,192,0.4)',\n          borderColor: 'rgba(75,192,192,1)',\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: 'rgba(75,192,192,1)',\n          pointBackgroundColor: '#fff',\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n        }\n      ]\n    };\n\n    return (\n      <div>\n        <Line data={data} />\n      </div>\n    )\n  }\n }\n\n export default Chart;"}
{"text": "<s>[INST] Create a Vue.js application to display basic information about a user. here are the inputs <template>\n  <div>\n    <h2>User Information</h2>\n    <ul>\n      <li>Name: {{user.name}}</li>\n      <li>Email: {{user.email}}</li>\n      <li>Age: {{user.age}}</li>\n      <li>Country: {{user.country}}</li>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      user: {\n        name: 'John Doe',\n        email: 'john@example.com',\n        age: 34,\n        country: 'USA'\n      }\n    }\n  }\n}\n</script> [/INST] \\n Not applicable </s>", "instruction": "Create a Vue.js application to display basic information about a user.", "input": "Not applicable", "output": "<template>\n  <div>\n    <h2>User Information</h2>\n    <ul>\n      <li>Name: {{user.name}}</li>\n      <li>Email: {{user.email}}</li>\n      <li>Age: {{user.age}}</li>\n      <li>Country: {{user.country}}</li>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      user: {\n        name: 'John Doe',\n        email: 'john@example.com',\n        age: 34,\n        country: 'USA'\n      }\n    }\n  }\n}\n</script>"}
{"text": "<s>[INST] Create a Ethereum smart contract for a simple ToDo list application. This application should include methods to create, check off, and delete tasks with each task having a title and a status (open, checked off). here are the inputs pragma solidity ^0.6.6;\n\ncontract ToDoList {\n    struct Task {\n        string title;\n        bool status;\n    }\n    \n    // Define an array to store tasks\n    Task[] tasks;\n\n    // Create a task\n    function createTask(string memory _title) public {\n        Task memory newTask = Task(_title, false);\n        tasks.push(newTask);\n    }\n\n    // Check off a task\n    function checkOffTask(uint _id) public {\n        Task storage task = tasks[_id];\n        require(task.status == false, \"Task already checked off\");\n        task.status = true;\n    }\n\n    // Delete a task\n    function deleteTask(uint _id) public {\n        require(_id < tasks.length, \"Index does not exist\");\n        delete tasks[_id];\n    }\n} [/INST] \\n Not applicable </s>", "instruction": "Create a Ethereum smart contract for a simple ToDo list application. This application should include methods to create, check off, and delete tasks with each task having a title and a status (open, checked off).", "input": "Not applicable", "output": "pragma solidity ^0.6.6;\n\ncontract ToDoList {\n    struct Task {\n        string title;\n        bool status;\n    }\n    \n    // Define an array to store tasks\n    Task[] tasks;\n\n    // Create a task\n    function createTask(string memory _title) public {\n        Task memory newTask = Task(_title, false);\n        tasks.push(newTask);\n    }\n\n    // Check off a task\n    function checkOffTask(uint _id) public {\n        Task storage task = tasks[_id];\n        require(task.status == false, \"Task already checked off\");\n        task.status = true;\n    }\n\n    // Delete a task\n    function deleteTask(uint _id) public {\n        require(_id < tasks.length, \"Index does not exist\");\n        delete tasks[_id];\n    }\n}"}
{"text": "<s>[INST] Create a simple node program that runs a timer. here are the inputs const Readline = require('readline');\n\nconst rl = Readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nrl.question('Enter time in seconds: ', (answer) => {\n\n    let seconds = parseInt(answer);\n    console.log(`Starting timer for ${seconds} seconds.`);\n\n    const start = Date.now();\n    const end = start + (seconds * 1000);\n\n    const timer = setInterval(() => {\n        let now = Date.now();\n        if (now > end) {\n            clearInterval(timer);\n            console.log(\"Time's up!\");\n            rl.close();\n            return;\n        }\n\n        let remainingTime = Math.round((end-now)/1000);\n        console.log(`Time remaining: ${remainingTime} seconds`);\n\n    }, 1000);\n\n}); [/INST] \\n  </s>", "instruction": "Create a simple node program that runs a timer.", "input": "", "output": "const Readline = require('readline');\n\nconst rl = Readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nrl.question('Enter time in seconds: ', (answer) => {\n\n    let seconds = parseInt(answer);\n    console.log(`Starting timer for ${seconds} seconds.`);\n\n    const start = Date.now();\n    const end = start + (seconds * 1000);\n\n    const timer = setInterval(() => {\n        let now = Date.now();\n        if (now > end) {\n            clearInterval(timer);\n            console.log(\"Time's up!\");\n            rl.close();\n            return;\n        }\n\n        let remainingTime = Math.round((end-now)/1000);\n        console.log(`Time remaining: ${remainingTime} seconds`);\n\n    }, 1000);\n\n});"}
{"text": "<s>[INST] Design a solution to track the employees working in a company here are the inputs \"\"\"\nDesign a solution to track the employees working in a company\n\"\"\"\nCreate a database table with fields to store employee information such as:\n-ID: unique ID of the employee\n-Name: Name of the employee\n-Department: Department in which the employee works\n-Address: Home address of the employee\n-Start Date: Date when the employee joined the company\n-End Date: Date when the employee left the company (if applicable)\n\nCreate an interface for users to view and update the employee database. The interface should include functions to add new employees, view/edit current employee information, and track employee events such as promotions, transfers, and terminations. [/INST] \\n  </s>", "instruction": "Design a solution to track the employees working in a company", "input": "", "output": "\"\"\"\nDesign a solution to track the employees working in a company\n\"\"\"\nCreate a database table with fields to store employee information such as:\n-ID: unique ID of the employee\n-Name: Name of the employee\n-Department: Department in which the employee works\n-Address: Home address of the employee\n-Start Date: Date when the employee joined the company\n-End Date: Date when the employee left the company (if applicable)\n\nCreate an interface for users to view and update the employee database. The interface should include functions to add new employees, view/edit current employee information, and track employee events such as promotions, transfers, and terminations."}
{"text": "<s>[INST] Create an endpoint in an Express application that generates a PDF invoice for a given order. here are the inputs const express = require('express');\nconst uuid = require('uuid');\nconst pdf = require('html-pdf');\n\nconst app = express();\n\nlet orders = [\n {\n orderId: 'ORD0001',\n items: [\n { name: 'Apple', quantity: 2, price: 2.99 },\n { name: 'Banana', quantity: 5, price: 0.99 }\n ]\n }\n];\n\napp.get('/invoice', async (req, res) => {\n const orderId = req.query.orderId;\n const order = orders.find(order => order.orderId === orderId);\n if (!order) res.status(400).send({ error: 'Order not found' });\n\nconst invoiceHtml = `\n<div>\n <h1>Invoice</h1>\n <ul>\n ${order.items\n  .map(item => `<li>${item.name} (${item.quantity}) - ${item.price * item.quantity}</li>`)\n  .join('')}\n </ul>\n</div>\n`;\n\nconst filename = `invoice-${uuid.v4()}.pdf`;\nconst options = { format: 'Letter' };\n\ntry {\n const file = await pdf.create(invoiceHtml, options);\n res.setHeader('Content-Disposition', `attachment; filename=${filename}`);\n file.toStream().pipe(res);\n} catch (err) {\n res.status(500).send(err);\n}\n});\n\napp.listen(3000, () => console.log('Server started')); [/INST] \\n Not applicable </s>", "instruction": "Create an endpoint in an Express application that generates a PDF invoice for a given order.", "input": "Not applicable", "output": "const express = require('express');\nconst uuid = require('uuid');\nconst pdf = require('html-pdf');\n\nconst app = express();\n\nlet orders = [\n {\n orderId: 'ORD0001',\n items: [\n { name: 'Apple', quantity: 2, price: 2.99 },\n { name: 'Banana', quantity: 5, price: 0.99 }\n ]\n }\n];\n\napp.get('/invoice', async (req, res) => {\n const orderId = req.query.orderId;\n const order = orders.find(order => order.orderId === orderId);\n if (!order) res.status(400).send({ error: 'Order not found' });\n\nconst invoiceHtml = `\n<div>\n <h1>Invoice</h1>\n <ul>\n ${order.items\n  .map(item => `<li>${item.name} (${item.quantity}) - ${item.price * item.quantity}</li>`)\n  .join('')}\n </ul>\n</div>\n`;\n\nconst filename = `invoice-${uuid.v4()}.pdf`;\nconst options = { format: 'Letter' };\n\ntry {\n const file = await pdf.create(invoiceHtml, options);\n res.setHeader('Content-Disposition', `attachment; filename=${filename}`);\n file.toStream().pipe(res);\n} catch (err) {\n res.status(500).send(err);\n}\n});\n\napp.listen(3000, () => console.log('Server started'));"}
{"text": "<s>[INST] Write a python program to extract the non-vowel words in a sentence. here are the inputs def extract_words(sentence):\n    non_vowel_words = []\n    words = sentence.split()\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    for word in words:\n        if not any(char in vowels for char in word):\n            non_vowel_words.append(word) \n    return non_vowel_words [/INST] \\n This machine learning project is challenging. </s>", "instruction": "Write a python program to extract the non-vowel words in a sentence.", "input": "This machine learning project is challenging.", "output": "def extract_words(sentence):\n    non_vowel_words = []\n    words = sentence.split()\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    for word in words:\n        if not any(char in vowels for char in word):\n            non_vowel_words.append(word) \n    return non_vowel_words"}
{"text": "<s>[INST] Create a function to check for palindromes in a sentence. here are the inputs def is_palindrome(sentence):\n    sentence = sentence.lower().replace(' ', '')\n    if sentence == sentence[::-1]:\n        return True\n    else:\n        return False [/INST] \\n Sentence: Was it a car or a cat I saw? </s>", "instruction": "Create a function to check for palindromes in a sentence.", "input": "Sentence: Was it a car or a cat I saw?", "output": "def is_palindrome(sentence):\n    sentence = sentence.lower().replace(' ', '')\n    if sentence == sentence[::-1]:\n        return True\n    else:\n        return False"}
{"text": "<s>[INST] Write a SQL query to find the highest price for each product type. here are the inputs SELECT\n  type,\n  MAX(price) AS 'highest_price'\nFROM products\nGROUP BY type; [/INST] \\n  </s>", "instruction": "Write a SQL query to find the highest price for each product type.", "input": "", "output": "SELECT\n  type,\n  MAX(price) AS 'highest_price'\nFROM products\nGROUP BY type;"}
{"text": "<s>[INST] Create a program in C# that prints out multiplication tables of any given number up to 10. here are the inputs class Program\n{\n    static void Main(string[] args)\n    {\n        // Get the number from the user\n        Console.Write(\"Please enter a number: \");\n        int number = Int32.Parse(Console.ReadLine());\n\n        // Print out the multiplication table\n        for (int i = 1; i <= 10; i++)\n        {\n            Console.WriteLine(\"{0} x {1} = {2}\", number, i, number * i);\n        }\n    }\n} [/INST] \\n Not applicable </s>", "instruction": "Create a program in C# that prints out multiplication tables of any given number up to 10.", "input": "Not applicable", "output": "class Program\n{\n    static void Main(string[] args)\n    {\n        // Get the number from the user\n        Console.Write(\"Please enter a number: \");\n        int number = Int32.Parse(Console.ReadLine());\n\n        // Print out the multiplication table\n        for (int i = 1; i <= 10; i++)\n        {\n            Console.WriteLine(\"{0} x {1} = {2}\", number, i, number * i);\n        }\n    }\n}"}
{"text": "<s>[INST] Create a function to print the elements of a linked list in a reverse order. here are the inputs function printReverseLinkedList(head) {\n    if (head === null) return;\n\n    printReverseLinkedList(head.next);\n\n    console.log(head.data);\n} [/INST] \\n  </s>", "instruction": "Create a function to print the elements of a linked list in a reverse order.", "input": "", "output": "function printReverseLinkedList(head) {\n    if (head === null) return;\n\n    printReverseLinkedList(head.next);\n\n    console.log(head.data);\n}"}
{"text": "<s>[INST] Create a program to convert from Roman numerals to decimal numbers. here are the inputs # Dictionary to store Roman to Decimal values \nroman_val = { 'I': 1, 'V': 5, 'X': 10, 'L': 50, \n             'C': 100, 'D': 500, 'M': 1000 } \n  \n# Function to convert Roman numerals to Number \ndef ConvertRoman(st): \n  \n    # Initialize result \n    res = 0\n  \n    # Traverse given input \n    for i in range(len(st)): \n      \n        # Getting value of symbol s[i] \n        s1 = roman_val[st[i]] \n  \n        if (i+1 < len(st)): \n  \n            # Getting value of symbol s[i+1] \n            s2 = roman_val[st[i+1]] \n  \n            # Comparing both values \n            if (s1 >= s2): \n  \n                # Value of current symbol is greater \n                # or equal to the next symbol \n                res = res + s1 \n            else: \n  \n                # Value of current symbol is greater \n                # or equal to the next symbol \n                res = res + s2 - s1 \n                i += 1\n        else: \n            res = res + s1 \n  \n    return res [/INST] \\n  </s>", "instruction": "Create a program to convert from Roman numerals to decimal numbers.", "input": "", "output": "# Dictionary to store Roman to Decimal values \nroman_val = { 'I': 1, 'V': 5, 'X': 10, 'L': 50, \n             'C': 100, 'D': 500, 'M': 1000 } \n  \n# Function to convert Roman numerals to Number \ndef ConvertRoman(st): \n  \n    # Initialize result \n    res = 0\n  \n    # Traverse given input \n    for i in range(len(st)): \n      \n        # Getting value of symbol s[i] \n        s1 = roman_val[st[i]] \n  \n        if (i+1 < len(st)): \n  \n            # Getting value of symbol s[i+1] \n            s2 = roman_val[st[i+1]] \n  \n            # Comparing both values \n            if (s1 >= s2): \n  \n                # Value of current symbol is greater \n                # or equal to the next symbol \n                res = res + s1 \n            else: \n  \n                # Value of current symbol is greater \n                # or equal to the next symbol \n                res = res + s2 - s1 \n                i += 1\n        else: \n            res = res + s1 \n  \n    return res"}
{"text": "<s>[INST] Write a Python program to calculate the average of a list of positive integers and output the result. here are the inputs list_of_positive_integers = [1, 5, 6, 7, 8]\ntotal = sum(list_of_positive_integers)\n\navg = total/len(list_of_positive_integers)\n\nprint(\"The average of the list of positive integers is {}\".format(avg)) [/INST] \\n List of positive integers: [1, 5, 6, 7, 8] </s>", "instruction": "Write a Python program to calculate the average of a list of positive integers and output the result.", "input": "List of positive integers: [1, 5, 6, 7, 8]", "output": "list_of_positive_integers = [1, 5, 6, 7, 8]\ntotal = sum(list_of_positive_integers)\n\navg = total/len(list_of_positive_integers)\n\nprint(\"The average of the list of positive integers is {}\".format(avg))"}
{"text": "<s>[INST] Generate a Tensorflow model for a sentiment analysis task. here are the inputs # Imports\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\n# Input data\ndata = tf.data.Dataset.from_tensor_slices(texts, sentiments)\n\n# Define model\nmodel = keras.Sequential()\nmodel.add(layers.InputLayer(input_shape=X_train.shape[1]))\nmodel.add(layers.Embedding(input_dim=1000, output_dim=32, input_length=60))\nmodel.add(layers.Dropout(rate=0.2))\nmodel.add(layers.LSTM(units=32))\nmodel.add(layers.Dense(1, activation='sigmoid'))\n\n# Compile\nmodel.compile(loss='binary_crossentropy', optimizer='rmsprop', metrics=['accuracy'])\n\n# Train\nmodel.fit(train_data, train_sentiments, epochs=50, batch_size=64) [/INST] \\n Not applicable </s>", "instruction": "Generate a Tensorflow model for a sentiment analysis task.", "input": "Not applicable", "output": "# Imports\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\n# Input data\ndata = tf.data.Dataset.from_tensor_slices(texts, sentiments)\n\n# Define model\nmodel = keras.Sequential()\nmodel.add(layers.InputLayer(input_shape=X_train.shape[1]))\nmodel.add(layers.Embedding(input_dim=1000, output_dim=32, input_length=60))\nmodel.add(layers.Dropout(rate=0.2))\nmodel.add(layers.LSTM(units=32))\nmodel.add(layers.Dense(1, activation='sigmoid'))\n\n# Compile\nmodel.compile(loss='binary_crossentropy', optimizer='rmsprop', metrics=['accuracy'])\n\n# Train\nmodel.fit(train_data, train_sentiments, epochs=50, batch_size=64)"}
{"text": "<s>[INST] Create a JavaScript function to check if a string is a valid email address or not. here are the inputs function validateEmail(email) {\n  var re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(email);\n} [/INST] \\n  </s>", "instruction": "Create a JavaScript function to check if a string is a valid email address or not.", "input": "", "output": "function validateEmail(email) {\n  var re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(email);\n}"}
{"text": "<s>[INST] Create an AWS Lambda function that queries a database and returns the results of the query. here are the inputs import { connect } from \"pg\";\nimport { Handler } from \"aws-lambda\";\n\nconst handler: Handler = async (event, _context) => {\n const { host, user, database, password } = process.env;\n const connection = await connect({\n host,\n user,\n database,\n password,\n });\n const res = connection.query(\n \"SELECT first_name, last_name FROM users;\"\n );\n return res.rows;\n}\n\nexport { handler } [/INST] \\n Database: PostgreSQL\nQuery: SELECT first_name, last_name FROM users; </s>", "instruction": "Create an AWS Lambda function that queries a database and returns the results of the query.", "input": "Database: PostgreSQL\nQuery: SELECT first_name, last_name FROM users;", "output": "import { connect } from \"pg\";\nimport { Handler } from \"aws-lambda\";\n\nconst handler: Handler = async (event, _context) => {\n const { host, user, database, password } = process.env;\n const connection = await connect({\n host,\n user,\n database,\n password,\n });\n const res = connection.query(\n \"SELECT first_name, last_name FROM users;\"\n );\n return res.rows;\n}\n\nexport { handler }"}
{"text": "<s>[INST] Write a SQL statement to select the fields \"name\" and \"age\" from a table called `people`. here are the inputs SELECT name, age FROM people; [/INST] \\n  </s>", "instruction": "Write a SQL statement to select the fields \"name\" and \"age\" from a table called `people`.", "input": "", "output": "SELECT name, age FROM people;"}
{"text": "<s>[INST] Develop a Ruby program to generate five random numbers between 0 and 10 here are the inputs def generate_random_numbers\n  (0..10).to_a.sample(5)\nend\n \nputs generate_random_numbers [/INST] \\n Not applicable </s>", "instruction": "Develop a Ruby program to generate five random numbers between 0 and 10", "input": "Not applicable", "output": "def generate_random_numbers\n  (0..10).to_a.sample(5)\nend\n \nputs generate_random_numbers"}
{"text": "<s>[INST] Produce a class in Java to represent a student with fields like rollNumber, name and marks? here are the inputs class Student {\n    private String name;\n    private String rollNumber;\n    private int marks;\n\n    public Student(String name, String rollNumber, int marks) {\n        this.name = name;\n        this.rollNumber = rollNumber;\n        this.marks = marks;\n    }\n\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getRollNumber() {\n        return rollNumber;\n    }\n    public void setRollNumber(String rollNumber) {\n        this.rollNumber = rollNumber;\n    }\n\n    public int getMarks() {\n        return marks;\n    }\n    public void setMarks(int marks) {\n        this.marks = marks;\n    }\n} [/INST] \\n  </s>", "instruction": "Produce a class in Java to represent a student with fields like rollNumber, name and marks?", "input": "", "output": "class Student {\n    private String name;\n    private String rollNumber;\n    private int marks;\n\n    public Student(String name, String rollNumber, int marks) {\n        this.name = name;\n        this.rollNumber = rollNumber;\n        this.marks = marks;\n    }\n\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getRollNumber() {\n        return rollNumber;\n    }\n    public void setRollNumber(String rollNumber) {\n        this.rollNumber = rollNumber;\n    }\n\n    public int getMarks() {\n        return marks;\n    }\n    public void setMarks(int marks) {\n        this.marks = marks;\n    }\n}"}
{"text": "<s>[INST] Create a HTML document that displays a table with the employee data given below. here are the inputs <html>\n<body>\n  <table>\n    <tr>\n      <th>Employee Name</th>\n      <th>Salary</th>\n    </tr>\n    <tr>\n      <td>John Doe</td>\n      <td>50000</td>\n    </tr>\n    <tr>\n      <td>Jane Doe</td>\n      <td>45000</td>\n    </tr>\n    <tr>\n      <td>Dr. Smith</td>\n      <td>75000</td>\n    </tr>\n   </table>\n  </body>\n</html> [/INST] \\n Employee Name | Salary\nJohn Doe | 50000 \nJane Doe | 45000 \nDr. Smith | 75000 </s>", "instruction": "Create a HTML document that displays a table with the employee data given below.", "input": "Employee Name | Salary\nJohn Doe | 50000 \nJane Doe | 45000 \nDr. Smith | 75000", "output": "<html>\n<body>\n  <table>\n    <tr>\n      <th>Employee Name</th>\n      <th>Salary</th>\n    </tr>\n    <tr>\n      <td>John Doe</td>\n      <td>50000</td>\n    </tr>\n    <tr>\n      <td>Jane Doe</td>\n      <td>45000</td>\n    </tr>\n    <tr>\n      <td>Dr. Smith</td>\n      <td>75000</td>\n    </tr>\n   </table>\n  </body>\n</html>"}
{"text": "<s>[INST] Develop a function in Python that prints out the Pascal's triangle for a given number of rows. here are the inputs def pascal_triangle(n): \n    trow = [1] \n    y = [0] \n    for x in range(max(n, 0)): \n        print(trow) \n        trow=[l+r for l,r in zip(trow + y, y + trow)] \n    return n>=1\n\npascal_triangle(5) [/INST] \\n  </s>", "instruction": "Develop a function in Python that prints out the Pascal's triangle for a given number of rows.", "input": "", "output": "def pascal_triangle(n): \n    trow = [1] \n    y = [0] \n    for x in range(max(n, 0)): \n        print(trow) \n        trow=[l+r for l,r in zip(trow + y, y + trow)] \n    return n>=1\n\npascal_triangle(5)"}
{"text": "<s>[INST] Implement a decision-making algorithm for a rock-paper-scissors game using Python. here are the inputs # Rock, paper, scissors game!\n\ndef play_game(player1, player2):\n    #  Define the winning rules\n    rules = {'rock': 'scissors', 'scissors': 'paper', 'paper': 'rock'}\n    if player1 == player2:\n        return 'It is a draw!'\n    elif rules[player1] == player2:\n        return 'Player 1 wins!'\n    elif rules[player2] == player1:\n        return 'Player 2 wins!'\n\n# Get user input\nplayer1 = input('Player 1, make a choice: rock, paper, or scissors? ').lower()\nplayer2 = input('Player 2, make a choice: rock, paper, or scissors? ').lower()\n\n# Start the game and get the result\nresult = play_game(player1, player2)\nprint(result) [/INST] \\n  </s>", "instruction": "Implement a decision-making algorithm for a rock-paper-scissors game using Python.", "input": "", "output": "# Rock, paper, scissors game!\n\ndef play_game(player1, player2):\n    #  Define the winning rules\n    rules = {'rock': 'scissors', 'scissors': 'paper', 'paper': 'rock'}\n    if player1 == player2:\n        return 'It is a draw!'\n    elif rules[player1] == player2:\n        return 'Player 1 wins!'\n    elif rules[player2] == player1:\n        return 'Player 2 wins!'\n\n# Get user input\nplayer1 = input('Player 1, make a choice: rock, paper, or scissors? ').lower()\nplayer2 = input('Player 2, make a choice: rock, paper, or scissors? ').lower()\n\n# Start the game and get the result\nresult = play_game(player1, player2)\nprint(result)"}
{"text": "<s>[INST] Create a JavaScript program to add two matrices of the same size. here are the inputs function addMatrices(matrixA, matrixB) {\n const result = [];\n\n for (let i=0; i < matrixA.length; i++) {\n  const row = [];\n\n  for (let j=0; j < matrixA[0].length; j++) {\n   row.push(matrixA[i][j] + matrixB[i][j]);\n  }\n\n  result.push(row);\n }\n\n return result;\n}\n\n// test case\nconst matrixA = [[1, 2], [3, 4]];\nconst matrixB = [[2, 1], [4, 3]];\n\nconst sum = addMatrices(matrixA, matrixB);\nconsole.log(sum); // [[3,3],[7,7]] [/INST] \\n Matrix A: [[1, 2], [3, 4]]\nMatrix B: [[2, 1], [4, 3]] </s>", "instruction": "Create a JavaScript program to add two matrices of the same size.", "input": "Matrix A: [[1, 2], [3, 4]]\nMatrix B: [[2, 1], [4, 3]]", "output": "function addMatrices(matrixA, matrixB) {\n const result = [];\n\n for (let i=0; i < matrixA.length; i++) {\n  const row = [];\n\n  for (let j=0; j < matrixA[0].length; j++) {\n   row.push(matrixA[i][j] + matrixB[i][j]);\n  }\n\n  result.push(row);\n }\n\n return result;\n}\n\n// test case\nconst matrixA = [[1, 2], [3, 4]];\nconst matrixB = [[2, 1], [4, 3]];\n\nconst sum = addMatrices(matrixA, matrixB);\nconsole.log(sum); // [[3,3],[7,7]]"}
{"text": "<s>[INST] Given an array of integers, create a function that returns the sum of the square of the elements. here are the inputs def squareSum(arr):\n   return sum([x**2 for x in arr])\n\nresult = squareSum([1, 2, 3])\nprint(result) # Output: 14 [/INST] \\n [1, 2, 3] </s>", "instruction": "Given an array of integers, create a function that returns the sum of the square of the elements.", "input": "[1, 2, 3]", "output": "def squareSum(arr):\n   return sum([x**2 for x in arr])\n\nresult = squareSum([1, 2, 3])\nprint(result) # Output: 14"}
{"text": "<s>[INST] Write an SQL statement to find the top 5 highest vote counts here are the inputs SELECT Name, Vote \nFROM votes \nORDER BY Vote DESC \nLIMIT 5; [/INST] \\n Table Name : votes\nColumns: ID, Name, Vote </s>", "instruction": "Write an SQL statement to find the top 5 highest vote counts", "input": "Table Name : votes\nColumns: ID, Name, Vote", "output": "SELECT Name, Vote \nFROM votes \nORDER BY Vote DESC \nLIMIT 5;"}
{"text": "<s>[INST] Write a C program to calculate the sum of first n natural numbers. here are the inputs #include<stdio.h> \n\n// Function to calculate the sum of first n natural numbers \nint getSum(int n) \n{ \n\tint sum = 0; \n\n\tfor (int i = 1; i <= n; ++i) \n\t\tsum += i; \n\n\treturn sum; \n} \n\nint main() \n{ \n\tint n = 10; \n\tprintf(\"Sum of first %d natural numbers is %d\", \n\t\t\t\t\t\t\t\tn, getSum(n)); \n\treturn 0; \n} [/INST] \\n  </s>", "instruction": "Write a C program to calculate the sum of first n natural numbers.", "input": "", "output": "#include<stdio.h> \n\n// Function to calculate the sum of first n natural numbers \nint getSum(int n) \n{ \n\tint sum = 0; \n\n\tfor (int i = 1; i <= n; ++i) \n\t\tsum += i; \n\n\treturn sum; \n} \n\nint main() \n{ \n\tint n = 10; \n\tprintf(\"Sum of first %d natural numbers is %d\", \n\t\t\t\t\t\t\t\tn, getSum(n)); \n\treturn 0; \n}"}
{"text": "<s>[INST] Design a React component for displaying tabs. here are the inputs import React, { useState } from 'react';\n\nconst Tabs = () => {\n    const [activeTab, setActiveTab] = useState(0);\n\n    return (\n        <div>\n            <div>\n                <button\n                    onClick={() => setActiveTab(0)}\n                    style={activeTab === 0 ? { fontWeight: 'bold' } : null}\n                >\n                    Tab 1\n                </button>\n                <button\n                    onClick={() => setActiveTab(1)}\n                    style={activeTab === 1 ? { fontWeight: 'bold' } : null}\n                >\n                    Tab 2\n                </button>\n            </div>\n            <div>\n                {activeTab === 0 ? <Tab1 /> : null}\n                {activeTab === 1 ? <Tab2 /> : null}\n            </div>\n        </div>\n    );\n};\n\nconst Tab1 = () => <p>This is Tab 1</p>;\n\nconst Tab2 = () => <p>This is Tab 2</p>;\n\nexport default Tabs; [/INST] \\n Not applicable </s>", "instruction": "Design a React component for displaying tabs.", "input": "Not applicable", "output": "import React, { useState } from 'react';\n\nconst Tabs = () => {\n    const [activeTab, setActiveTab] = useState(0);\n\n    return (\n        <div>\n            <div>\n                <button\n                    onClick={() => setActiveTab(0)}\n                    style={activeTab === 0 ? { fontWeight: 'bold' } : null}\n                >\n                    Tab 1\n                </button>\n                <button\n                    onClick={() => setActiveTab(1)}\n                    style={activeTab === 1 ? { fontWeight: 'bold' } : null}\n                >\n                    Tab 2\n                </button>\n            </div>\n            <div>\n                {activeTab === 0 ? <Tab1 /> : null}\n                {activeTab === 1 ? <Tab2 /> : null}\n            </div>\n        </div>\n    );\n};\n\nconst Tab1 = () => <p>This is Tab 1</p>;\n\nconst Tab2 = () => <p>This is Tab 2</p>;\n\nexport default Tabs;"}
{"text": "<s>[INST] Write a quick sort program to sort an array of numbers here are the inputs def quickSort(arr): \n    \n    # create two empty arrays to store the left and right portions of the array\n    left, right = [], []\n    \n    # if the input array contains only one element or zero elements then return\n    if len(arr) <= 1:\n        return arr\n    else:\n        # select the pivot and move it to the end of the array\n        pivot = arr[0]\n        arr.pop(0)\n        arr.append(pivot)\n    \n        # loop through the array to separate elements less than the pivot from elements greater than the pivot\n        for i in arr:\n            if i < pivot:\n                # save the element on the left portion\n                left.append(i)\n            else:\n                # save the element on the right portion\n                right.append(i)\n    \n        # call quicksort recursively to sort both portion of the array\n        left = quickSort(left)\n        right = quickSort(right)\n        # return the concatenation of the sorted left portion, pivot and sorted right portion\n        return left + [pivot] + right [/INST] \\n [5, 10, 7, 15, 20, 1, 11] </s>", "instruction": "Write a quick sort program to sort an array of numbers", "input": "[5, 10, 7, 15, 20, 1, 11]", "output": "def quickSort(arr): \n    \n    # create two empty arrays to store the left and right portions of the array\n    left, right = [], []\n    \n    # if the input array contains only one element or zero elements then return\n    if len(arr) <= 1:\n        return arr\n    else:\n        # select the pivot and move it to the end of the array\n        pivot = arr[0]\n        arr.pop(0)\n        arr.append(pivot)\n    \n        # loop through the array to separate elements less than the pivot from elements greater than the pivot\n        for i in arr:\n            if i < pivot:\n                # save the element on the left portion\n                left.append(i)\n            else:\n                # save the element on the right portion\n                right.append(i)\n    \n        # call quicksort recursively to sort both portion of the array\n        left = quickSort(left)\n        right = quickSort(right)\n        # return the concatenation of the sorted left portion, pivot and sorted right portion\n        return left + [pivot] + right"}
{"text": "<s>[INST] Use the following JSON input and write a JavaScript program to edit the information stored in \u201cfriend\u201d object. The program should add a key \u201cborn\u201d and value \u201c1973\u201d. here are the inputs const person = {\n    friend: {\n        name: \"Alan\",\n        hobby: \"rock climbing\",\n        born: 1973\n    }\n};\nconsole.log(person); [/INST] \\n {\"friend\": {\"name\": \u201cAlan\", \"hobby\": \u201crock climbing\"}} </s>", "instruction": "Use the following JSON input and write a JavaScript program to edit the information stored in \u201cfriend\u201d object. The program should add a key \u201cborn\u201d and value \u201c1973\u201d.", "input": "{\"friend\": {\"name\": \u201cAlan\", \"hobby\": \u201crock climbing\"}}", "output": "const person = {\n    friend: {\n        name: \"Alan\",\n        hobby: \"rock climbing\",\n        born: 1973\n    }\n};\nconsole.log(person);"}
{"text": "<s>[INST] Convert this statement into a SQL query - \"Show all the students whose age is between 20 and 25\". here are the inputs SELECT * FROM students WHERE age BETWEEN 20 AND 25; [/INST] \\n  </s>", "instruction": "Convert this statement into a SQL query - \"Show all the students whose age is between 20 and 25\".", "input": "", "output": "SELECT * FROM students WHERE age BETWEEN 20 AND 25;"}
{"text": "<s>[INST] Collate a machine learning model in Python that distinguishes between cats and dogs. here are the inputs import numpy as np\nimport keras\nfrom keras.layers import Dense, Conv2D, MaxPooling2D, Dropout, Flatten\nfrom keras.models import Sequential\nfrom keras.preprocessing.image import ImageDataGenerator\n\n# Create the neural network model\nmodel = Sequential()\n\n# Input layer\nmodel.add(Conv2D(32, (3, 3), input_shape = (64, 64, 3), activation = 'relu'))\n\n# Hidden layers\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.3))\nmodel.add(Conv2D(64, (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.3))\nmodel.add(Conv2D(64, (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.3))\n\n# Output layer\nmodel.add(Flatten())\nmodel.add(Dense(units = 128, activation = 'relu'))\nmodel.add(Dense(units = 1, activation = 'sigmoid'))\n\n# Compile the model\nmodel.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\n\n# Create data generator\ndatagen = ImageDataGenerator(rescale = 1./255, shear_range = 0.2, zoom_range = 0.2, horizontal_flip = True)\n\n# Fit the model\ntrain_generator = datagen.flow_from_directory(directory = '/path/to/dataset', target_size = (64, 64), color_mode = 'rgb', class_mode = 'binary', batch_size = 32)\nmodel.fit_generator(generator = train_generator, steps_per_epoch = 800, epochs = 5, validation_data = test_generator, validation_steps = 200) [/INST] \\n A dataset of 800 images of cats and dogs </s>", "instruction": "Collate a machine learning model in Python that distinguishes between cats and dogs.", "input": "A dataset of 800 images of cats and dogs", "output": "import numpy as np\nimport keras\nfrom keras.layers import Dense, Conv2D, MaxPooling2D, Dropout, Flatten\nfrom keras.models import Sequential\nfrom keras.preprocessing.image import ImageDataGenerator\n\n# Create the neural network model\nmodel = Sequential()\n\n# Input layer\nmodel.add(Conv2D(32, (3, 3), input_shape = (64, 64, 3), activation = 'relu'))\n\n# Hidden layers\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.3))\nmodel.add(Conv2D(64, (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.3))\nmodel.add(Conv2D(64, (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.3))\n\n# Output layer\nmodel.add(Flatten())\nmodel.add(Dense(units = 128, activation = 'relu'))\nmodel.add(Dense(units = 1, activation = 'sigmoid'))\n\n# Compile the model\nmodel.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\n\n# Create data generator\ndatagen = ImageDataGenerator(rescale = 1./255, shear_range = 0.2, zoom_range = 0.2, horizontal_flip = True)\n\n# Fit the model\ntrain_generator = datagen.flow_from_directory(directory = '/path/to/dataset', target_size = (64, 64), color_mode = 'rgb', class_mode = 'binary', batch_size = 32)\nmodel.fit_generator(generator = train_generator, steps_per_epoch = 800, epochs = 5, validation_data = test_generator, validation_steps = 200)"}
{"text": "<s>[INST] Write a Python program to find all the numbers divisible by a certain number within a certain range. here are the inputs def find_numbers_divisible_by(m, n, divisor):\n    divisible_numbers = []\n    for i in range(m, n+1):\n        if i % divisor == 0:\n            divisible_numbers.append(i)\n    return divisible_numbers [/INST] \\n int m=36, int n=74, int divisor=6 </s>", "instruction": "Write a Python program to find all the numbers divisible by a certain number within a certain range.", "input": "int m=36, int n=74, int divisor=6", "output": "def find_numbers_divisible_by(m, n, divisor):\n    divisible_numbers = []\n    for i in range(m, n+1):\n        if i % divisor == 0:\n            divisible_numbers.append(i)\n    return divisible_numbers"}
{"text": "<s>[INST] Implement a Python function that will take two strings and return true if the first string contains the second. here are the inputs def check_contains(query, word): \n    if query.find(word) != -1:\n        return True\n    return False\n\nresult = check_contains(query, word) [/INST] \\n query = \"catering\"\nword = \"cat\" </s>", "instruction": "Implement a Python function that will take two strings and return true if the first string contains the second.", "input": "query = \"catering\"\nword = \"cat\"", "output": "def check_contains(query, word): \n    if query.find(word) != -1:\n        return True\n    return False\n\nresult = check_contains(query, word)"}
{"text": "<s>[INST] Write an algorithm in Python 3 that calculates the factorial of a number. here are the inputs def factorial(n):\n if n == 0:\n  return 1\n else:\n  return n * factorial(n-1) [/INST] \\n Not applicable </s>", "instruction": "Write an algorithm in Python 3 that calculates the factorial of a number.", "input": "Not applicable", "output": "def factorial(n):\n if n == 0:\n  return 1\n else:\n  return n * factorial(n-1)"}
{"text": "<s>[INST] Generate a program that performs a linear search on a list of integers. here are the inputs # Linear Search Function \ndef linear_search(list, target):\n  # Iterate over the list, comparing each element to the target\n  for i in range(len(list)):\n    if list[i] == target:\n      return i # return the index where the target is found\n  return -1 # return -1 if target not found\n\n# Test list\nlist = [1, 9, 4, 8, 5]\n\n# Call linear_search function\nindex = linear_search(list, 4)\n\n# Print the output\nif index < 0:\n  print(\"Target not found\")\nelse:\n  print(f\"Target found at index {index}\") [/INST] \\n [1, 9, 4, 8, 5] </s>", "instruction": "Generate a program that performs a linear search on a list of integers.", "input": "[1, 9, 4, 8, 5]", "output": "# Linear Search Function \ndef linear_search(list, target):\n  # Iterate over the list, comparing each element to the target\n  for i in range(len(list)):\n    if list[i] == target:\n      return i # return the index where the target is found\n  return -1 # return -1 if target not found\n\n# Test list\nlist = [1, 9, 4, 8, 5]\n\n# Call linear_search function\nindex = linear_search(list, 4)\n\n# Print the output\nif index < 0:\n  print(\"Target not found\")\nelse:\n  print(f\"Target found at index {index}\")"}
{"text": "<s>[INST] Create a Ruby script to reverse an array here are the inputs arr = [1, 2, 3, 4, 5]\n\ndef reverse(arr)\n reversed_arr = []\n arr.each do |item|\n  reversed_arr.unshift(item)\n end\n return reversed_arr\nend\n\nputs reverse(arr) // [5, 4, 3, 2, 1] [/INST] \\n [1, 2, 3, 4, 5] </s>", "instruction": "Create a Ruby script to reverse an array", "input": "[1, 2, 3, 4, 5]", "output": "arr = [1, 2, 3, 4, 5]\n\ndef reverse(arr)\n reversed_arr = []\n arr.each do |item|\n  reversed_arr.unshift(item)\n end\n return reversed_arr\nend\n\nputs reverse(arr) // [5, 4, 3, 2, 1]"}
{"text": "<s>[INST] Implement a search feature in your web application using the PHP programming language. here are the inputs <?php\n// 1. Create a search form\n$search_form = \n'<form action=\"search.php\" method=\"post\">\n <input type=\"text\" name=\"query\"/>\n <input type=\"submit\" value=\"Search\"/>\n</form>';\n \n// 2. Capture the search query\n$query = $_POST['query'];\n\n// 3. Connect to your database\n$mysqli = new mysqli('localhost', 'username', 'password', 'database');\n\n// 4. Construct your SQL query\n$sql = \"SELECT * FROM table WHERE col1 LIKE '%$query%' OR col2 LIKE '%$query%'\";\n\n// 5. Execute the query and display the results\n$results = $mysqli->query($sql);\nif ($results->num_rows > 0) {\n while ($row = $results->fetch_assoc()) {\n echo $row['col1'], ' ', $row['col2'];\n }\n} [/INST] \\n Not applicable </s>", "instruction": "Implement a search feature in your web application using the PHP programming language.", "input": "Not applicable", "output": "<?php\n// 1. Create a search form\n$search_form = \n'<form action=\"search.php\" method=\"post\">\n <input type=\"text\" name=\"query\"/>\n <input type=\"submit\" value=\"Search\"/>\n</form>';\n \n// 2. Capture the search query\n$query = $_POST['query'];\n\n// 3. Connect to your database\n$mysqli = new mysqli('localhost', 'username', 'password', 'database');\n\n// 4. Construct your SQL query\n$sql = \"SELECT * FROM table WHERE col1 LIKE '%$query%' OR col2 LIKE '%$query%'\";\n\n// 5. Execute the query and display the results\n$results = $mysqli->query($sql);\nif ($results->num_rows > 0) {\n while ($row = $results->fetch_assoc()) {\n echo $row['col1'], ' ', $row['col2'];\n }\n}"}
{"text": "<s>[INST] Create a MySQL query to find the most common value in a column? here are the inputs SELECT column_name, COUNT(*) as count \nFROM table_name \nGROUP BY column_name \nORDER BY count DESC\nLIMIT 1; [/INST] \\n  </s>", "instruction": "Create a MySQL query to find the most common value in a column?", "input": "", "output": "SELECT column_name, COUNT(*) as count \nFROM table_name \nGROUP BY column_name \nORDER BY count DESC\nLIMIT 1;"}
{"text": "<s>[INST] Create a Node.js server API for a web application. It should include routes for fetching, updating, and deleting data from a MySQL database. here are the inputs const express = require('express');\nconst router = express.Router();\nconst mysql = require('mysql');\nconst connection = mysql.createConnection({\nhost: '...',\nuser: '...',\npassword: '...',\ndatabase: '...'\n});\n\n// Fetch products\nrouter.get('/products', (req, res) => {\n connection.query('SELECT * FROM products', (err, rows, fields) => {\n if (!err) \n res.send(rows);\n else\n console.log(err);\n });\n});\n\n// Update product\nrouter.put('/products/:id', (req, res) => {\n const id = req.params.id;\n const newProductData = req.body;\n connection.query('UPDATE products SET ? WHERE product_id = ?', [newProductData, id], (err, rows, fields) => {\n if (!err)\n res.send('Product updated successfully!');\n else\n console.log(err);\n });\n});\n\n// Delete product\nrouter.delete('/products/:id', (req, res) => {\n const id = req.params.id;\n connection.query('DELETE FROM products WHERE product_id = ?', [id], (err, rows, fields) => {\n if (!err)\n res.send('Product deleted successfully!');\n else\n console.log(err);\n });\n});\n\nmodule.exports = router; [/INST] \\n An example table called \"products\"\nColumns: id (integer, primary), name (varchar, unique), price (decimal), quantity (integer), description (text) </s>", "instruction": "Create a Node.js server API for a web application. It should include routes for fetching, updating, and deleting data from a MySQL database.", "input": "An example table called \"products\"\nColumns: id (integer, primary), name (varchar, unique), price (decimal), quantity (integer), description (text)", "output": "const express = require('express');\nconst router = express.Router();\nconst mysql = require('mysql');\nconst connection = mysql.createConnection({\nhost: '...',\nuser: '...',\npassword: '...',\ndatabase: '...'\n});\n\n// Fetch products\nrouter.get('/products', (req, res) => {\n connection.query('SELECT * FROM products', (err, rows, fields) => {\n if (!err) \n res.send(rows);\n else\n console.log(err);\n });\n});\n\n// Update product\nrouter.put('/products/:id', (req, res) => {\n const id = req.params.id;\n const newProductData = req.body;\n connection.query('UPDATE products SET ? WHERE product_id = ?', [newProductData, id], (err, rows, fields) => {\n if (!err)\n res.send('Product updated successfully!');\n else\n console.log(err);\n });\n});\n\n// Delete product\nrouter.delete('/products/:id', (req, res) => {\n const id = req.params.id;\n connection.query('DELETE FROM products WHERE product_id = ?', [id], (err, rows, fields) => {\n if (!err)\n res.send('Product deleted successfully!');\n else\n console.log(err);\n });\n});\n\nmodule.exports = router;"}
{"text": "<s>[INST] Write a C program to print the Armstrong numbers (numbers which are the sum of the cubes of their individual digits) between 1 and 1000. here are the inputs #include <stdio.h>\n#include <math.h>\n\nint main()\n{\n    int num, originalNum, lastDigit, digits, sum;\n \n    printf(\"Armstrong numbers between 1 and 1000 are: \\n\");\n \n    for(num = 1; num <= 1000; num++) {\n        sum = 0;\n        originalNum = num;\n\n \n        // Digits calculation\n        digits = (int) log10(num) + 1;\n \n        while (num > 0) {\n            // Extract last digit and append it to sum\n            lastDigit = num % 10; \n            sum = sum + round(pow(lastDigit, digits)); \n \n            // Checking for Armstrong number \n            num = num / 10;\n        }\n\n        if(originalNum == sum) {\n            printf(\"%d, \", originalNum);\n        }\n    }\n\n    return 0;\n} [/INST] \\n Not applicable </s>", "instruction": "Write a C program to print the Armstrong numbers (numbers which are the sum of the cubes of their individual digits) between 1 and 1000.", "input": "Not applicable", "output": "#include <stdio.h>\n#include <math.h>\n\nint main()\n{\n    int num, originalNum, lastDigit, digits, sum;\n \n    printf(\"Armstrong numbers between 1 and 1000 are: \\n\");\n \n    for(num = 1; num <= 1000; num++) {\n        sum = 0;\n        originalNum = num;\n\n \n        // Digits calculation\n        digits = (int) log10(num) + 1;\n \n        while (num > 0) {\n            // Extract last digit and append it to sum\n            lastDigit = num % 10; \n            sum = sum + round(pow(lastDigit, digits)); \n \n            // Checking for Armstrong number \n            num = num / 10;\n        }\n\n        if(originalNum == sum) {\n            printf(\"%d, \", originalNum);\n        }\n    }\n\n    return 0;\n}"}
{"text": "<s>[INST] Create a bash script to print out the n prime numbers here are the inputs #!/bin/bash\n\n# prime number counter\ncounter=0\n\n# start from 2 and go up\nnumber=2\n\n# loop until 10 prime numbers are found\nwhile [ $counter -lt $1 ]\ndo\n    # initialize divisor to 2\n    divisor=2\n \n    # initialize flag to 0\n    flag=0\n \n    # loop until divisor is less than number\n    while [ $divisor -lt $number ]\n    do\n        # if number is divisible by divisor, set flag to 1\n        if [ `expr $number % $divisor` -eq 0 ]\n        then\n            flag=1\n        fi\n \n        # increase divisor by 1\n        divisor=`expr $divisor + 1`\n    done\n \n    # if number is not divisible by any other number\n    # set counter to counter + 1 and print number\n    if [ $flag -eq 0 ]\n    then\n        echo $number\n        counter=`expr $counter + 1`\n    fi\n \n    # increase number by 1\n    number=`expr $number + 1`\ndone [/INST] \\n n = 10 </s>", "instruction": "Create a bash script to print out the n prime numbers", "input": "n = 10", "output": "#!/bin/bash\n\n# prime number counter\ncounter=0\n\n# start from 2 and go up\nnumber=2\n\n# loop until 10 prime numbers are found\nwhile [ $counter -lt $1 ]\ndo\n    # initialize divisor to 2\n    divisor=2\n \n    # initialize flag to 0\n    flag=0\n \n    # loop until divisor is less than number\n    while [ $divisor -lt $number ]\n    do\n        # if number is divisible by divisor, set flag to 1\n        if [ `expr $number % $divisor` -eq 0 ]\n        then\n            flag=1\n        fi\n \n        # increase divisor by 1\n        divisor=`expr $divisor + 1`\n    done\n \n    # if number is not divisible by any other number\n    # set counter to counter + 1 and print number\n    if [ $flag -eq 0 ]\n    then\n        echo $number\n        counter=`expr $counter + 1`\n    fi\n \n    # increase number by 1\n    number=`expr $number + 1`\ndone"}
{"text": "<s>[INST] Create a program that calculates the BMI for a person given their height and weight. here are the inputs public class BMICalculator {\n public static void main(String[] args) {\n  double height = 180.0; // in cm\n  double weight = 75.0; // in kg\n  double bmi = (weight / (height * height)) * 10000;\n\n  System.out.println(\"Your BMI is: \" + bmi);\n }\n} [/INST] \\n Height: 180 cm,\nWeight: 75 kg </s>", "instruction": "Create a program that calculates the BMI for a person given their height and weight.", "input": "Height: 180 cm,\nWeight: 75 kg", "output": "public class BMICalculator {\n public static void main(String[] args) {\n  double height = 180.0; // in cm\n  double weight = 75.0; // in kg\n  double bmi = (weight / (height * height)) * 10000;\n\n  System.out.println(\"Your BMI is: \" + bmi);\n }\n}"}
{"text": "<s>[INST] Develop a Python function to predict the class labels of a given set of data. here are the inputs # Load the dataset\nimport pandas as pd\ncsv_url = 'http://test.test/test.csv'\ndf = pd.read_csv(csv_url)\n\n# Split the dataset into features and label\nX = df.iloc[:, 0:4].values\ny = df.iloc[:, 4].values\n\n# Import the ML model\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Create and fit the model\nmodel = DecisionTreeClassifier()\nmodel.fit(X, y)\n\n# Predict the label\ndef predict(data):\n    predicted_label = model.predict([data])\n    return predicted_label [/INST] \\n The dataset contains 4 features: Length, Width, Height and Weight. </s>", "instruction": "Develop a Python function to predict the class labels of a given set of data.", "input": "The dataset contains 4 features: Length, Width, Height and Weight.", "output": "# Load the dataset\nimport pandas as pd\ncsv_url = 'http://test.test/test.csv'\ndf = pd.read_csv(csv_url)\n\n# Split the dataset into features and label\nX = df.iloc[:, 0:4].values\ny = df.iloc[:, 4].values\n\n# Import the ML model\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Create and fit the model\nmodel = DecisionTreeClassifier()\nmodel.fit(X, y)\n\n# Predict the label\ndef predict(data):\n    predicted_label = model.predict([data])\n    return predicted_label"}
{"text": "<s>[INST] Design an algorithm that finds the maximum score of a given assignment here are the inputs def maxScoreAssignment(assignments): \n    # initialize the current maximum score \n    max_score = 0 \n  \n    for i in range(len(assignments)): \n        # get the current assignment \n        assignment = assignments[i] \n  \n        # get the score for the current assignment \n        score = assignment[0] \n  \n        # update the current max_score, if the \n        # current score is greater than max_score\n        if score > max_score: \n            max_score = score \n  \n    return max_score [/INST] \\n  </s>", "instruction": "Design an algorithm that finds the maximum score of a given assignment", "input": "", "output": "def maxScoreAssignment(assignments): \n    # initialize the current maximum score \n    max_score = 0 \n  \n    for i in range(len(assignments)): \n        # get the current assignment \n        assignment = assignments[i] \n  \n        # get the score for the current assignment \n        score = assignment[0] \n  \n        # update the current max_score, if the \n        # current score is greater than max_score\n        if score > max_score: \n            max_score = score \n  \n    return max_score"}
{"text": "<s>[INST] Can you optimize the  below code to only print the even numbers from the given list? here are the inputs let list = [1,2,3,4,5,6];\n\nfor(let i = 0; i < list.length; i++){\n    if (list[i] % 2 == 0) {\n        console.log(list[i])\n    }\n} [/INST] \\n 1,2,3,4,5,6 </s>", "instruction": "Can you optimize the  below code to only print the even numbers from the given list?", "input": "1,2,3,4,5,6", "output": "let list = [1,2,3,4,5,6];\n\nfor(let i = 0; i < list.length; i++){\n    if (list[i] % 2 == 0) {\n        console.log(list[i])\n    }\n}"}
{"text": "<s>[INST] Provide the SQL statement that returns all rows from the table users that have an age of over 21 here are the inputs SELECT * FROM users WHERE age > 21; [/INST] \\n N/A </s>", "instruction": "Provide the SQL statement that returns all rows from the table users that have an age of over 21", "input": "N/A", "output": "SELECT * FROM users WHERE age > 21;"}
{"text": "<s>[INST] Develop a Python program to generate random passwords that consist of 8 characters. here are the inputs import string\nimport random\n\ndef generate_password():\n    chars = string.ascii_letters + string.digits\n    return ''.join(random.choice(chars) for _ in range(8))\n\npassword = generate_password()\nprint(password) [/INST] \\n Not applicable </s>", "instruction": "Develop a Python program to generate random passwords that consist of 8 characters.", "input": "Not applicable", "output": "import string\nimport random\n\ndef generate_password():\n    chars = string.ascii_letters + string.digits\n    return ''.join(random.choice(chars) for _ in range(8))\n\npassword = generate_password()\nprint(password)"}
{"text": "<s>[INST] Create an efficient algorithm to search for an item in an unsorted array. here are the inputs def search_in_array(arr, item):\n    \"\"\"This function searches for an item in an unsorted array and returns its index.\"\"\"\n    n = len(arr)\n    # Initialize the index\n    index = 0\n    # Iterate over the array\n    while index < n:\n        # If the item is found, return the index \n        if arr[index] == item:\n            return index\n        # Otherwise, go through the next element\n        index += 1\n\n    # If the item is not found, return -1\n    return -1 [/INST] \\n  </s>", "instruction": "Create an efficient algorithm to search for an item in an unsorted array.", "input": "", "output": "def search_in_array(arr, item):\n    \"\"\"This function searches for an item in an unsorted array and returns its index.\"\"\"\n    n = len(arr)\n    # Initialize the index\n    index = 0\n    # Iterate over the array\n    while index < n:\n        # If the item is found, return the index \n        if arr[index] == item:\n            return index\n        # Otherwise, go through the next element\n        index += 1\n\n    # If the item is not found, return -1\n    return -1"}
{"text": "<s>[INST] Implement an algorithm to check if two strings are one edit away. here are the inputs def is_one_edit_away(s1, s2):\n # Check if lengths are more than one character difference\n if abs(len(s1) - len(s2)) > 1:\n  return False\n \n # Get shorter and longer strings\n shorter = s1 if len(s1) < len(s2) else s2\n longer = s1 if len(s1) > len(s2) else s2\n \n i = 0\n j = 0\n edit_count = 0\n \n while i < len(shorter) and j < len(longer):\n  if shorter[i] != longer[j]:\n   if edit_count == 1:\n    return False\n   \n   # if lengths are unequal, move shorter pointer\n   if len(shorter) != len(longer):\n    i += 1\n   else:\n    i += 1\n    j += 1\n   \n   edit_count += 1\n\n # move longer pointer\n if i < len(shorter):\n  j += 1\n\n return edit_count == 1 [/INST] \\n  </s>", "instruction": "Implement an algorithm to check if two strings are one edit away.", "input": "", "output": "def is_one_edit_away(s1, s2):\n # Check if lengths are more than one character difference\n if abs(len(s1) - len(s2)) > 1:\n  return False\n \n # Get shorter and longer strings\n shorter = s1 if len(s1) < len(s2) else s2\n longer = s1 if len(s1) > len(s2) else s2\n \n i = 0\n j = 0\n edit_count = 0\n \n while i < len(shorter) and j < len(longer):\n  if shorter[i] != longer[j]:\n   if edit_count == 1:\n    return False\n   \n   # if lengths are unequal, move shorter pointer\n   if len(shorter) != len(longer):\n    i += 1\n   else:\n    i += 1\n    j += 1\n   \n   edit_count += 1\n\n # move longer pointer\n if i < len(shorter):\n  j += 1\n\n return edit_count == 1"}
{"text": "<s>[INST] Overwrite the existing C# program to create a new method that adds two given numbers and returns the result. here are the inputs public class MathOperation\n{\n    public static int Add(int x, int y)\n    {\n        return x + y;\n    }\n} [/INST] \\n public class MathOperation\n{\n    public static int Add(int x, int y)\n    {\n        return 0;\n    }\n} </s>", "instruction": "Overwrite the existing C# program to create a new method that adds two given numbers and returns the result.", "input": "public class MathOperation\n{\n    public static int Add(int x, int y)\n    {\n        return 0;\n    }\n}", "output": "public class MathOperation\n{\n    public static int Add(int x, int y)\n    {\n        return x + y;\n    }\n}"}
{"text": "<s>[INST] Edit the code to display an error message when a negative number is entered. here are the inputs def input_number():\n    num = float(input(\"Enter a number: \"))\n    if num < 0:\n        print(\"Error: negative number entered\")\n    return num [/INST] \\n def input_number():\n    num = float(input(\"Enter a number: \"))\n    return num </s>", "instruction": "Edit the code to display an error message when a negative number is entered.", "input": "def input_number():\n    num = float(input(\"Enter a number: \"))\n    return num", "output": "def input_number():\n    num = float(input(\"Enter a number: \"))\n    if num < 0:\n        print(\"Error: negative number entered\")\n    return num"}
{"text": "<s>[INST] Write a code snippet to define a function in Swift that takes two strings as parameters and returns the concatenated string. here are the inputs func concatStrings(str1: String, str2: String) ->String{\n    return str1 + str2\n} [/INST] \\n  </s>", "instruction": "Write a code snippet to define a function in Swift that takes two strings as parameters and returns the concatenated string.", "input": "", "output": "func concatStrings(str1: String, str2: String) ->String{\n    return str1 + str2\n}"}
{"text": "<s>[INST] Generate a list using a while loop in Python and appends the current number to the list. here are the inputs my_list = []\n\nnum = 0\n\nwhile num < 10:\n    my_list.append(num)\n    num += 1\n\nprint(my_list) [/INST] \\n  </s>", "instruction": "Generate a list using a while loop in Python and appends the current number to the list.", "input": "", "output": "my_list = []\n\nnum = 0\n\nwhile num < 10:\n    my_list.append(num)\n    num += 1\n\nprint(my_list)"}
{"text": "<s>[INST] Produce a Ruby module to perform some basic statistics on an array of numbers. here are the inputs module Statistics\n  # Return the sum of an array of numbers\n  def self.sum(arr)\n    arr.inject(0, :+)\n  end\n\n  # Return the mean of an array of numbers\n  def self.mean(arr)\n    sum = Statistics.sum(arr)\n    sum.to_f / arr.length\n  end\n\n  # Return the variance of an array of numbers\n  def self.variance(arr)\n    mean = Statistics.mean(arr)\n    sum_squares = arr.inject(0) { |sum, x| sum + (x - mean) ** 2 } \n    sum_squares.to_f / arr.length\n  end\nend [/INST] \\n [1, 2, 4, 9, 5] </s>", "instruction": "Produce a Ruby module to perform some basic statistics on an array of numbers.", "input": "[1, 2, 4, 9, 5]", "output": "module Statistics\n  # Return the sum of an array of numbers\n  def self.sum(arr)\n    arr.inject(0, :+)\n  end\n\n  # Return the mean of an array of numbers\n  def self.mean(arr)\n    sum = Statistics.sum(arr)\n    sum.to_f / arr.length\n  end\n\n  # Return the variance of an array of numbers\n  def self.variance(arr)\n    mean = Statistics.mean(arr)\n    sum_squares = arr.inject(0) { |sum, x| sum + (x - mean) ** 2 } \n    sum_squares.to_f / arr.length\n  end\nend"}
{"text": "<s>[INST] Create a SQL query to get the employee information from the following table. The query should return the employee name, age, and address of each employee. here are the inputs SELECT name, age, address\nFROM employees [/INST] \\n Not applicable </s>", "instruction": "Create a SQL query to get the employee information from the following table. The query should return the employee name, age, and address of each employee.", "input": "Not applicable", "output": "SELECT name, age, address\nFROM employees"}
{"text": "<s>[INST] Create a basic Java applet that visualizes a sine wave here are the inputs import java.awt.*;\nimport java.applet.*;\n\npublic class SineWave extends Applet {\n int xs, ys;\n int h = 0;\n double scale, freq, constVal;\n\n public void init() {\n xs = getSize().width - 1;\n ys = getSize().height - 1;\n scale = (double) xs;\n freq = Math.PI / scale;\n }\n\n public void paint(Graphics g) {\n g.drawLine(0, ys/2, xs, ys/2);\n for (int i = 0; i <= xs; i++) {\n constVal = (double) ys/2 * Math.sin(i * freq + h);\n g.drawLine(i, (int) (ys/2 - constVal), i, (int) (ys/2 + constVal));\n }\n h = h - 1;\n try {\n Thread.sleep(100);\n }\n catch (InterruptedException e) {}\n repaint();\n }\n} [/INST] \\n Not applicable </s>", "instruction": "Create a basic Java applet that visualizes a sine wave", "input": "Not applicable", "output": "import java.awt.*;\nimport java.applet.*;\n\npublic class SineWave extends Applet {\n int xs, ys;\n int h = 0;\n double scale, freq, constVal;\n\n public void init() {\n xs = getSize().width - 1;\n ys = getSize().height - 1;\n scale = (double) xs;\n freq = Math.PI / scale;\n }\n\n public void paint(Graphics g) {\n g.drawLine(0, ys/2, xs, ys/2);\n for (int i = 0; i <= xs; i++) {\n constVal = (double) ys/2 * Math.sin(i * freq + h);\n g.drawLine(i, (int) (ys/2 - constVal), i, (int) (ys/2 + constVal));\n }\n h = h - 1;\n try {\n Thread.sleep(100);\n }\n catch (InterruptedException e) {}\n repaint();\n }\n}"}
{"text": "<s>[INST] Build an AI agent trained on a dataset using Tensorflow. here are the inputs # Import MNIST data\nfrom tensorflow.examples.tutorials.mnist import input_data\nmnist = input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\n\n# Create model\nimport tensorflow as tf\n\n# Set up the parameters\nlearning_rate = 0.1\ntraining_epochs = 25\nbatch_size = 100\n\n# Set up the neural network\nx = tf.placeholder(tf.float32, [None, 784]) # mnist data has shape of 28*28=784\n\n# Weights\nW = tf.Variable(tf.zeros([784, 10]))\n\n# Biases\nb = tf.Variable(tf.zeros([10]))\n\n# Activation Function \ny = tf.nn.softmax(tf.matmul(x, W) + b)\n\n# Optimizer\ny_ = tf.placeholder(tf.float32, [None, 10])\n\n# Cost function\ncross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_\nindices=[1]))\n\n# Training\ntrain_step = tf.train.GradientDescentOptimizer(learning_rate).minimize(cross_entropy)\n\n# Launch graph\nsess = tf.InteractiveSession()\ntf.global_variables_initializer().run()\n\n# Train\nfor epoch in range(training_epochs):\n batch_xs, batch_ys = mnist.train.next_batch(batch_size)\n sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})\n\n# Test trained model\ncorrect_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\nprint(sess.run(accuracy, feed_dict={x: mnist.test.images, y_: mnist.test.labels})) [/INST] \\n Dataset: The MNIST dataset of handwritten digits </s>", "instruction": "Build an AI agent trained on a dataset using Tensorflow.", "input": "Dataset: The MNIST dataset of handwritten digits", "output": "# Import MNIST data\nfrom tensorflow.examples.tutorials.mnist import input_data\nmnist = input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\n\n# Create model\nimport tensorflow as tf\n\n# Set up the parameters\nlearning_rate = 0.1\ntraining_epochs = 25\nbatch_size = 100\n\n# Set up the neural network\nx = tf.placeholder(tf.float32, [None, 784]) # mnist data has shape of 28*28=784\n\n# Weights\nW = tf.Variable(tf.zeros([784, 10]))\n\n# Biases\nb = tf.Variable(tf.zeros([10]))\n\n# Activation Function \ny = tf.nn.softmax(tf.matmul(x, W) + b)\n\n# Optimizer\ny_ = tf.placeholder(tf.float32, [None, 10])\n\n# Cost function\ncross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_\nindices=[1]))\n\n# Training\ntrain_step = tf.train.GradientDescentOptimizer(learning_rate).minimize(cross_entropy)\n\n# Launch graph\nsess = tf.InteractiveSession()\ntf.global_variables_initializer().run()\n\n# Train\nfor epoch in range(training_epochs):\n batch_xs, batch_ys = mnist.train.next_batch(batch_size)\n sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})\n\n# Test trained model\ncorrect_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\nprint(sess.run(accuracy, feed_dict={x: mnist.test.images, y_: mnist.test.labels}))"}
{"text": "<s>[INST] Construct a program that takes two strings as input and prints their concatenation. here are the inputs def concat_strings(str1, str2):\n    print(str1 + str2)\n\nconcat_strings(\"Hello \", \"World\") [/INST] \\n \"Hello \", \"World\" </s>", "instruction": "Construct a program that takes two strings as input and prints their concatenation.", "input": "\"Hello \", \"World\"", "output": "def concat_strings(str1, str2):\n    print(str1 + str2)\n\nconcat_strings(\"Hello \", \"World\")"}
{"text": "<s>[INST] Write a Python program to query Twitter to get the most recent tweets from a user. here are the inputs import tweepy\n\n# Authenticate to Twitter\nauth = tweepy.OAuthHandler(\"CONSUMER_KEY\", \"CONSUMER_SECRET\")\nauth.set_access_token(\"ACCESS_TOKEN\", \"ACCESS_TOKEN_SECRET\")\n# Create API object\napi = tweepy.API(auth)\n\n# Get the most recent tweets from the given user\ntweets = api.user_timeline(screen_name=\"@elonmusk\")\n\nfor tweet in tweets:\n print(tweet.text) [/INST] \\n username: @elonmusk </s>", "instruction": "Write a Python program to query Twitter to get the most recent tweets from a user.", "input": "username: @elonmusk", "output": "import tweepy\n\n# Authenticate to Twitter\nauth = tweepy.OAuthHandler(\"CONSUMER_KEY\", \"CONSUMER_SECRET\")\nauth.set_access_token(\"ACCESS_TOKEN\", \"ACCESS_TOKEN_SECRET\")\n# Create API object\napi = tweepy.API(auth)\n\n# Get the most recent tweets from the given user\ntweets = api.user_timeline(screen_name=\"@elonmusk\")\n\nfor tweet in tweets:\n print(tweet.text)"}
{"text": "<s>[INST] Create a basic C++ console program for calculating the average of 5 numbers entered by the user. here are the inputs #include <iostream>\n \nint main()\n{\n    float num1, num2, num3, num4, num5;\n    float total, average;\n \n    std::cout << \"Please enter the first number: \" << std::endl;\n    std::cin>>num1;\n    std::cout << \"Please enter the second number: \" << std::endl;\n    std::cin>>num2;\n    std::cout << \"Please enter the third number: \" << std::endl;\n    std::cin>>num3;\n    std::cout << \"Please enter the fourth number: \" << std::endl;\n    std::cin>>num4;\n    std::cout << \"Please enter the fifth number: \" << std::endl;\n    std::cin>>num5;\n \n    total = num1 + num2 + num3 + num4 + num5;\n    average = total / 5;\n \n    std::cout << \"The average of the numbers is: \" << average << std::endl;\n \n    return 0;\n} [/INST] \\n Not applicable </s>", "instruction": "Create a basic C++ console program for calculating the average of 5 numbers entered by the user.", "input": "Not applicable", "output": "#include <iostream>\n \nint main()\n{\n    float num1, num2, num3, num4, num5;\n    float total, average;\n \n    std::cout << \"Please enter the first number: \" << std::endl;\n    std::cin>>num1;\n    std::cout << \"Please enter the second number: \" << std::endl;\n    std::cin>>num2;\n    std::cout << \"Please enter the third number: \" << std::endl;\n    std::cin>>num3;\n    std::cout << \"Please enter the fourth number: \" << std::endl;\n    std::cin>>num4;\n    std::cout << \"Please enter the fifth number: \" << std::endl;\n    std::cin>>num5;\n \n    total = num1 + num2 + num3 + num4 + num5;\n    average = total / 5;\n \n    std::cout << \"The average of the numbers is: \" << average << std::endl;\n \n    return 0;\n}"}
{"text": "<s>[INST] Create a Windows Forms application in C# for recording time tracking for tasks. The application should have a window to add tasks and a window to view the time spent on each task. here are the inputs using System;\nusing System.Collections.Generic;\nusing System.Windows.Forms;\n\nnamespace TimeTracker\n{\n public partial class Form1 : Form\n {\n public Form1()\n {\n InitializeComponent();\n }\n \n private void Form1_Load(object sender, EventArgs e)\n {\n LoadTimeTracker();\n }\n \n private void LoadTimeTracker()\n {\n Dictionary<string, TimeSpan> timeTracker = new Dictionary<string, TimeSpan>();\n }\n \n private void addTaskButton_Click(object sender, EventArgs e)\n {\n // Add new task to time tracker\n string taskName = taskNameTextBox.Text;\n \n if (!timeTracker.ContainsKey(taskName))\n {\n timeTracker.Add(taskName, TimeSpan.Zero);\n }\n \n // Refresh list of tasks\n RefreshTaskList();\n }\n \n private void startTimerButton_Click(object sender, EventArgs e)\n {\n // Start timer for selected task\n string taskName = taskListBox.SelectedItem as string;\n \n if (timeTracker.ContainsKey(taskName))\n {\n timeTracker[taskName] = DateTime.Now;\n }\n }\n \n private void endTimerButton_Click(object sender, EventArgs e)\n {\n // End timer for selected task\n string taskName = taskListBox.SelectedItem as string;\n \n if (timeTracker.ContainsKey(taskName))\n {\n TimeSpan timeSpent = DateTime.Now - timeTracker[taskName];\n timeTracker[taskName] = timeSpent;\n \n // Refresh list of tasks\n RefreshTaskList();\n }\n }\n \n private void RefreshTaskList()\n {\n // Refresh list of tasks\n taskListBox.Items.Clear();\n foreach (string taskName in timeTracker.Keys)\n {\n string item = taskName + \": \" + timeTracker[taskName];\n taskListBox.Items.Add(item);\n }\n }\n }\n} [/INST] \\n Not applicable </s>", "instruction": "Create a Windows Forms application in C# for recording time tracking for tasks. The application should have a window to add tasks and a window to view the time spent on each task.", "input": "Not applicable", "output": "using System;\nusing System.Collections.Generic;\nusing System.Windows.Forms;\n\nnamespace TimeTracker\n{\n public partial class Form1 : Form\n {\n public Form1()\n {\n InitializeComponent();\n }\n \n private void Form1_Load(object sender, EventArgs e)\n {\n LoadTimeTracker();\n }\n \n private void LoadTimeTracker()\n {\n Dictionary<string, TimeSpan> timeTracker = new Dictionary<string, TimeSpan>();\n }\n \n private void addTaskButton_Click(object sender, EventArgs e)\n {\n // Add new task to time tracker\n string taskName = taskNameTextBox.Text;\n \n if (!timeTracker.ContainsKey(taskName))\n {\n timeTracker.Add(taskName, TimeSpan.Zero);\n }\n \n // Refresh list of tasks\n RefreshTaskList();\n }\n \n private void startTimerButton_Click(object sender, EventArgs e)\n {\n // Start timer for selected task\n string taskName = taskListBox.SelectedItem as string;\n \n if (timeTracker.ContainsKey(taskName))\n {\n timeTracker[taskName] = DateTime.Now;\n }\n }\n \n private void endTimerButton_Click(object sender, EventArgs e)\n {\n // End timer for selected task\n string taskName = taskListBox.SelectedItem as string;\n \n if (timeTracker.ContainsKey(taskName))\n {\n TimeSpan timeSpent = DateTime.Now - timeTracker[taskName];\n timeTracker[taskName] = timeSpent;\n \n // Refresh list of tasks\n RefreshTaskList();\n }\n }\n \n private void RefreshTaskList()\n {\n // Refresh list of tasks\n taskListBox.Items.Clear();\n foreach (string taskName in timeTracker.Keys)\n {\n string item = taskName + \": \" + timeTracker[taskName];\n taskListBox.Items.Add(item);\n }\n }\n }\n}"}
{"text": "<s>[INST] Create a basic Flask application that serves a single web page. here are the inputs import flask\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n   return flask.render_template('index.html')\n\nif __name__ == '__main__':\n app.run() [/INST] \\n Not applicable </s>", "instruction": "Create a basic Flask application that serves a single web page.", "input": "Not applicable", "output": "import flask\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n   return flask.render_template('index.html')\n\nif __name__ == '__main__':\n app.run()"}
{"text": "<s>[INST] Develop a Node.js backend for a simple social media website. The website should accept incoming data from a REST API, update a MongoDB database, and return data in response. here are the inputs // Import modules\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst mongoose = require('mongoose');\n\n// Create the server\nconst app = express();\nconst PORT = 3000;\n\n// Connect to the database\nmongoose.connect('mongodb://localhost:27017/social_app');\n\n// Set middlewares\napp.use(bodyParser.json());\n\n// Create routes\napp.get('/posts', (req, res) => {\n //fetch posts from the database\n});\n\napp.post('/posts', (req, res) => {\n //add a post to the database\n});\n\napp.put('/posts/:postId', (req, res) => {\n //edit a post in the database\n});\n\napp.delete('/posts/:postId', (req, res) => {\n //delete a post from the database\n});\n\n// Start listening\napp.listen(PORT, () => {\n console.log(`Server is listening on port ${PORT}`);\n}); [/INST] \\n Not applicable </s>", "instruction": "Develop a Node.js backend for a simple social media website. The website should accept incoming data from a REST API, update a MongoDB database, and return data in response.", "input": "Not applicable", "output": "// Import modules\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst mongoose = require('mongoose');\n\n// Create the server\nconst app = express();\nconst PORT = 3000;\n\n// Connect to the database\nmongoose.connect('mongodb://localhost:27017/social_app');\n\n// Set middlewares\napp.use(bodyParser.json());\n\n// Create routes\napp.get('/posts', (req, res) => {\n //fetch posts from the database\n});\n\napp.post('/posts', (req, res) => {\n //add a post to the database\n});\n\napp.put('/posts/:postId', (req, res) => {\n //edit a post in the database\n});\n\napp.delete('/posts/:postId', (req, res) => {\n //delete a post from the database\n});\n\n// Start listening\napp.listen(PORT, () => {\n console.log(`Server is listening on port ${PORT}`);\n});"}
{"text": "<s>[INST] Create a Django application to manage a user library where users can store their book collections. This application should include models for Book (with fields for title, author, genre and description) and Collection (with fields for user and books). here are the inputs from django.db import models\n\nclass Book(models.Model):\n title = models.CharField(max_length=255)\n author = models.CharField(max_length=255)\n genre = models.CharField(max_length=255)\n description = models.TextField()\n\nclass Collection(models.Model):\n user = models.ForeignKey('Users', on_delete=models.CASCADE)\n books = models.ManyToManyField('Book') [/INST] \\n Not applicable </s>", "instruction": "Create a Django application to manage a user library where users can store their book collections. This application should include models for Book (with fields for title, author, genre and description) and Collection (with fields for user and books).", "input": "Not applicable", "output": "from django.db import models\n\nclass Book(models.Model):\n title = models.CharField(max_length=255)\n author = models.CharField(max_length=255)\n genre = models.CharField(max_length=255)\n description = models.TextField()\n\nclass Collection(models.Model):\n user = models.ForeignKey('Users', on_delete=models.CASCADE)\n books = models.ManyToManyField('Book')"}
{"text": "<s>[INST] Design a neural network to classify a collection of 23,000 digitized handwritten digits. here are the inputs # Import packages\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.utils import to_categorical\n\n# Set training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Pre-process the data\nX_train = np.reshape(X_train, (-1, 28*28)) \nX_test = np.reshape(X_test, (-1, 28*28)) \nX_train = X_train.astype('float32') / 255\nX_test = X_test.astype('float32') / 255\ny_train = to_categorical(y_train)\ny_test = to_categorical(y_test)\n\n# Create the neural network\nmodel = Sequential()\n\n# Add layers\nmodel.add(Dense(128, activation='relu', input_shape=(784,)))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(10, activation='softmax'))\n\n# Compile\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X_train, y_train,\n          validation_data=(X_test, y_test),\n          epochs=10) [/INST] \\n  </s>", "instruction": "Design a neural network to classify a collection of 23,000 digitized handwritten digits.", "input": "", "output": "# Import packages\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.utils import to_categorical\n\n# Set training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Pre-process the data\nX_train = np.reshape(X_train, (-1, 28*28)) \nX_test = np.reshape(X_test, (-1, 28*28)) \nX_train = X_train.astype('float32') / 255\nX_test = X_test.astype('float32') / 255\ny_train = to_categorical(y_train)\ny_test = to_categorical(y_test)\n\n# Create the neural network\nmodel = Sequential()\n\n# Add layers\nmodel.add(Dense(128, activation='relu', input_shape=(784,)))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(10, activation='softmax'))\n\n# Compile\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X_train, y_train,\n          validation_data=(X_test, y_test),\n          epochs=10)"}
{"text": "<s>[INST] Write a SQL query to find employees who have a given string in their name or email address. here are the inputs SELECT * \nFROM employees\nWHERE  name LIKE '%Smith%' \nOR email LIKE '%Smith%'; [/INST] \\n search_string = 'Smith' </s>", "instruction": "Write a SQL query to find employees who have a given string in their name or email address.", "input": "search_string = 'Smith'", "output": "SELECT * \nFROM employees\nWHERE  name LIKE '%Smith%' \nOR email LIKE '%Smith%';"}
{"text": "<s>[INST] Write a query in SQL to determine the total number of orders for a given customer. here are the inputs SELECT COUNT(*) \nFROM Orders \nWHERE customer_id = 10; [/INST] \\n customer_id: 10 </s>", "instruction": "Write a query in SQL to determine the total number of orders for a given customer.", "input": "customer_id: 10", "output": "SELECT COUNT(*) \nFROM Orders \nWHERE customer_id = 10;"}
{"text": "<s>[INST] Design a Bloomberg terminal application which allows user to manage her assets. here are the inputs The application will be a web-based terminal application designed to help users manage their assets. The application will provide users with the ability to view their asset portfolio and update their holdings in real-time, monitor market data from global markets, track stock and financial indices, and receive news alerts. The application will also provide investors with analysis tools, such as portfolio analysis, asset allocation, and risk assessment. The application will provide charting tools for data analysis and traders with various tracking and trading tools, such as order entry, order tracking, and active orders history. In addition, the application will have a user interface designed to be easy to use and understand, with support for multiple language translations. [/INST] \\n Not applicable </s>", "instruction": "Design a Bloomberg terminal application which allows user to manage her assets.", "input": "Not applicable", "output": "The application will be a web-based terminal application designed to help users manage their assets. The application will provide users with the ability to view their asset portfolio and update their holdings in real-time, monitor market data from global markets, track stock and financial indices, and receive news alerts. The application will also provide investors with analysis tools, such as portfolio analysis, asset allocation, and risk assessment. The application will provide charting tools for data analysis and traders with various tracking and trading tools, such as order entry, order tracking, and active orders history. In addition, the application will have a user interface designed to be easy to use and understand, with support for multiple language translations."}
{"text": "<s>[INST] Modify the Java code below so it prints out the factorial of a given number. here are the inputs public class Factorial {\n    public static void main(String[] args) {\n        int n = 5;\n        int factorial = 1;\n\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n        }\n        System.out.println(\"The factorial of \" + n + \" is \" + factorial);\n    }\n} [/INST] \\n int n = 5; </s>", "instruction": "Modify the Java code below so it prints out the factorial of a given number.", "input": "int n = 5;", "output": "public class Factorial {\n    public static void main(String[] args) {\n        int n = 5;\n        int factorial = 1;\n\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n        }\n        System.out.println(\"The factorial of \" + n + \" is \" + factorial);\n    }\n}"}
{"text": "<s>[INST] Develop a program to solve a quadratic equation. here are the inputs def solve_quadratic_eq(a, b, c): \n    # Calculate the two solutions of the equation  \n    solution1 = (-b + math.sqrt(b**2 - 4*a*c)) / (2 * a) \n    solution2 = (-b - math.sqrt(b**2 - 4*a*c)) / (2 * a) \n    \n    # Return both solutions \n    return solution1, solution2 \n\na = 1\nb = 5\nc = 6\n\nsolution1, solution2 = solve_quadratic_eq(a,b,c)\nprint(\"Solutions to the Quadratic Equation: \", solution1, solution2) # Output: Solutions to the Quadratic Equation:  -2.0 -3.0 [/INST] \\n a = 1, b = 5, c = 6 </s>", "instruction": "Develop a program to solve a quadratic equation.", "input": "a = 1, b = 5, c = 6", "output": "def solve_quadratic_eq(a, b, c): \n    # Calculate the two solutions of the equation  \n    solution1 = (-b + math.sqrt(b**2 - 4*a*c)) / (2 * a) \n    solution2 = (-b - math.sqrt(b**2 - 4*a*c)) / (2 * a) \n    \n    # Return both solutions \n    return solution1, solution2 \n\na = 1\nb = 5\nc = 6\n\nsolution1, solution2 = solve_quadratic_eq(a,b,c)\nprint(\"Solutions to the Quadratic Equation: \", solution1, solution2) # Output: Solutions to the Quadratic Equation:  -2.0 -3.0"}
{"text": "<s>[INST] Generate random numbers between 1 and 10 using JavaScript. here are the inputs // generate random numbers between 1 and 10 \nfunction randomNumber() {\n  return Math.floor(Math.random() * (10 - 1 + 1)) + 1;\n} [/INST] \\n  </s>", "instruction": "Generate random numbers between 1 and 10 using JavaScript.", "input": "", "output": "// generate random numbers between 1 and 10 \nfunction randomNumber() {\n  return Math.floor(Math.random() * (10 - 1 + 1)) + 1;\n}"}
{"text": "<s>[INST] Create an Angular application with a table that displays a provided dataset. here are the inputs import {Component} from \"@angular/core\";\n\n@Component({\n selector:\"datatable\",\n template:`\n  <div>\n   <table>\n    <thead>\n     <th>Name</th>\n     <th>Total</th>\n    </thead>\n    <tbody *ngFor=\"let data of dataset\">\n     <tr>\n      <td>{{data.name}}</td>\n      <td>{{data.total}}</td>\n     </tr>\n    </tbody>\n   </table>\n  </div>\n `\n})\nexport class DatatableComponent{\n  dataset = [\n  {name: \"Alice\", total: 20},\n  {name: \"Bob\", total: 10},\n  {name: \"Carol\", total: 30},\n  {name: \"Dave\", total: 40},\n  ];\n} [/INST] \\n [\n  {name: \"Alice\", total: 20},\n  {name: \"Bob\", total: 10},\n  {name: \"Carol\", total: 30},\n  {name: \"Dave\", total: 40},\n] </s>", "instruction": "Create an Angular application with a table that displays a provided dataset.", "input": "[\n  {name: \"Alice\", total: 20},\n  {name: \"Bob\", total: 10},\n  {name: \"Carol\", total: 30},\n  {name: \"Dave\", total: 40},\n]", "output": "import {Component} from \"@angular/core\";\n\n@Component({\n selector:\"datatable\",\n template:`\n  <div>\n   <table>\n    <thead>\n     <th>Name</th>\n     <th>Total</th>\n    </thead>\n    <tbody *ngFor=\"let data of dataset\">\n     <tr>\n      <td>{{data.name}}</td>\n      <td>{{data.total}}</td>\n     </tr>\n    </tbody>\n   </table>\n  </div>\n `\n})\nexport class DatatableComponent{\n  dataset = [\n  {name: \"Alice\", total: 20},\n  {name: \"Bob\", total: 10},\n  {name: \"Carol\", total: 30},\n  {name: \"Dave\", total: 40},\n  ];\n}"}
{"text": "<s>[INST] Create a Python neural network model that takes in a given trajectory of stock prices and predicts the stock price for the next day. here are the inputs import numpy as np\nimport tensorflow as tf\n\ndef create_model():\n    model = tf.keras.Sequential([\n        tf.keras.layers.Dense(64, activation='relu', input_shape=(7, )),\n        tf.keras.layers.Dense(1)\n    ])\n\n    model.compile(loss='mean_squared_error', \n                  optimizer='adam',\n                  metrics=['accuracy'])\n\n    return model\n    \nif __name__ == \"__main__\":\n    model = create_model()\n\n    input_data = np.array([[10, 10.4, 10.5, 10.6, 10.7, 10.9, 11]])\n    predictions = model.predict(input_data)\n\n    print(f\"Predicted stock price for the next day is: {predictions[0][0]}\") [/INST] \\n [10, 10.4, 10.5, 10.6, 10.7, 10.9, 11] </s>", "instruction": "Create a Python neural network model that takes in a given trajectory of stock prices and predicts the stock price for the next day.", "input": "[10, 10.4, 10.5, 10.6, 10.7, 10.9, 11]", "output": "import numpy as np\nimport tensorflow as tf\n\ndef create_model():\n    model = tf.keras.Sequential([\n        tf.keras.layers.Dense(64, activation='relu', input_shape=(7, )),\n        tf.keras.layers.Dense(1)\n    ])\n\n    model.compile(loss='mean_squared_error', \n                  optimizer='adam',\n                  metrics=['accuracy'])\n\n    return model\n    \nif __name__ == \"__main__\":\n    model = create_model()\n\n    input_data = np.array([[10, 10.4, 10.5, 10.6, 10.7, 10.9, 11]])\n    predictions = model.predict(input_data)\n\n    print(f\"Predicted stock price for the next day is: {predictions[0][0]}\")"}
{"text": "<s>[INST] Create a loop structure in JavaScript to print out the squares of all even numbers between 1 and 10. here are the inputs for(let i=2;i<=10;i=i+2){\n    var square = i*i;\n    console.log(square);\n} [/INST] \\n  </s>", "instruction": "Create a loop structure in JavaScript to print out the squares of all even numbers between 1 and 10.", "input": "", "output": "for(let i=2;i<=10;i=i+2){\n    var square = i*i;\n    console.log(square);\n}"}
{"text": "<s>[INST] Create a function to generate a Matrix of size m x n. here are the inputs def generate_matrix(m, n):\n    matrix = [] \n    for i in range(m): \n        row_list = [] \n        for j in range(n): \n            row_list.append(0) \n        matrix.append(row_list) \n    return matrix [/INST] \\n  </s>", "instruction": "Create a function to generate a Matrix of size m x n.", "input": "", "output": "def generate_matrix(m, n):\n    matrix = [] \n    for i in range(m): \n        row_list = [] \n        for j in range(n): \n            row_list.append(0) \n        matrix.append(row_list) \n    return matrix"}
{"text": "<s>[INST] Write a Java program that takes a string and a character as input and prints out the index of the first occurrence of the character. here are the inputs public static int findFirstOccurrence(String str, char ch) {\n\tint len = str.length();\n\tfor (int i=0; i<len; i++) {\n\t\tif (str.charAt(i) == ch) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\t\n} [/INST] \\n  </s>", "instruction": "Write a Java program that takes a string and a character as input and prints out the index of the first occurrence of the character.", "input": "", "output": "public static int findFirstOccurrence(String str, char ch) {\n\tint len = str.length();\n\tfor (int i=0; i<len; i++) {\n\t\tif (str.charAt(i) == ch) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\t\n}"}
{"text": "<s>[INST] Create a way to encrypt a message using a key in Python. here are the inputs import hashlib\n\ndef encrypt(message, key):\n    encrypted_msg = \"\"\n    for char in message:\n        encrypted_msg += chr(ord(char) + ord(key[0]))\n    return encrypted_msg\n\nencrypted_msg = encrypt(message, key)\nprint(encrypted_msg) [/INST] \\n message = \"Hello world!\"\nkey = \"secret\" </s>", "instruction": "Create a way to encrypt a message using a key in Python.", "input": "message = \"Hello world!\"\nkey = \"secret\"", "output": "import hashlib\n\ndef encrypt(message, key):\n    encrypted_msg = \"\"\n    for char in message:\n        encrypted_msg += chr(ord(char) + ord(key[0]))\n    return encrypted_msg\n\nencrypted_msg = encrypt(message, key)\nprint(encrypted_msg)"}
{"text": "<s>[INST] Find the area of a triangle with a base of 8 cm and height of 5 cm. here are the inputs Area = (8 cm * 5 cm)/2\nArea = 20 cm2 [/INST] \\n  </s>", "instruction": "Find the area of a triangle with a base of 8 cm and height of 5 cm.", "input": "", "output": "Area = (8 cm * 5 cm)/2\nArea = 20 cm2"}
{"text": "<s>[INST] Create a PHP program to implement a simple Hello World web-app. here are the inputs <?php\n\necho '<h1>Hello, World!</h1>';\n\n?> [/INST] \\n Not applicable </s>", "instruction": "Create a PHP program to implement a simple Hello World web-app.", "input": "Not applicable", "output": "<?php\n\necho '<h1>Hello, World!</h1>';\n\n?>"}
{"text": "<s>[INST] Write a binary search algorithm in C++ to search for a given number in a sorted list. here are the inputs #include <iostream> \n  \nusing namespace std; \n  \n// Binary search algorithm \nint binarySearch(int arr[], int l, int r, int x) \n{ \n    while (l <= r) { \n        int m = l + (r - l) / 2; \n  \n        // Check if x is present at mid \n        if (arr[m] == x) \n            return m; \n  \n        // If x greater, ignore left half \n        if (arr[m] < x) \n            l = m + 1; \n  \n        // If x is smaller, ignore right half \n        else\n            r = m - 1; \n    } \n  \n    // if we reach here, then element was \n    // not present \n    return -1; \n} \n  \nint main(void) \n{ \n    int arr[] = {2, 5, 8, 11, 19}; \n    int n = sizeof(arr) / sizeof(arr[0]); \n    int x = 11; \n  \n    // Function call \n    int result = binarySearch(arr, 0, n - 1, x); \n  \n    (result == -1) ? cout << \"Element is not present in array\"\n                   : cout << \"Element is present at index \" << result; \n  \n    return 0; \n} [/INST] \\n sorted list: [2, 5, 8, 11, 19] \nnumber to search: 11 </s>", "instruction": "Write a binary search algorithm in C++ to search for a given number in a sorted list.", "input": "sorted list: [2, 5, 8, 11, 19] \nnumber to search: 11", "output": "#include <iostream> \n  \nusing namespace std; \n  \n// Binary search algorithm \nint binarySearch(int arr[], int l, int r, int x) \n{ \n    while (l <= r) { \n        int m = l + (r - l) / 2; \n  \n        // Check if x is present at mid \n        if (arr[m] == x) \n            return m; \n  \n        // If x greater, ignore left half \n        if (arr[m] < x) \n            l = m + 1; \n  \n        // If x is smaller, ignore right half \n        else\n            r = m - 1; \n    } \n  \n    // if we reach here, then element was \n    // not present \n    return -1; \n} \n  \nint main(void) \n{ \n    int arr[] = {2, 5, 8, 11, 19}; \n    int n = sizeof(arr) / sizeof(arr[0]); \n    int x = 11; \n  \n    // Function call \n    int result = binarySearch(arr, 0, n - 1, x); \n  \n    (result == -1) ? cout << \"Element is not present in array\"\n                   : cout << \"Element is present at index \" << result; \n  \n    return 0; \n}"}
{"text": "<s>[INST] Develop a program to display the largest number in a list here are the inputs def largest_number(nums_list):\n    # Initialize largest\n    largest = nums_list[0]\n\n    # Iterate through list\n    for num in nums_list:\n        if num > largest:\n            largest = num\n\n    # Output\n    print(\"Largest number is:\", largest)\n\nlist = [7, 8, 5, 10, 6]\nlargest_number(list) [/INST] \\n list = [7, 8, 5, 10, 6] </s>", "instruction": "Develop a program to display the largest number in a list", "input": "list = [7, 8, 5, 10, 6]", "output": "def largest_number(nums_list):\n    # Initialize largest\n    largest = nums_list[0]\n\n    # Iterate through list\n    for num in nums_list:\n        if num > largest:\n            largest = num\n\n    # Output\n    print(\"Largest number is:\", largest)\n\nlist = [7, 8, 5, 10, 6]\nlargest_number(list)"}
{"text": "<s>[INST] Optimize a given code block to minimize execution time. here are the inputs num_list = [-2, -1, 0, 1, 2]\nmax = 0\n\nfor i in range(4):\n    for j in range(i + 1, 5):\n        if num_list[i] + num_list[j] > max:\n            max = num_list[i] + num_list[j] [/INST] \\n num_list = [-2, -1, 0, 1, 2]\nmax = 0\n\nfor i in range(1, 5):\n  for j in range(5):\n    if num_list[i-1] + num_list[j] > max:\n      max = num_list[i-1] + num_list[j] </s>", "instruction": "Optimize a given code block to minimize execution time.", "input": "num_list = [-2, -1, 0, 1, 2]\nmax = 0\n\nfor i in range(1, 5):\n  for j in range(5):\n    if num_list[i-1] + num_list[j] > max:\n      max = num_list[i-1] + num_list[j]", "output": "num_list = [-2, -1, 0, 1, 2]\nmax = 0\n\nfor i in range(4):\n    for j in range(i + 1, 5):\n        if num_list[i] + num_list[j] > max:\n            max = num_list[i] + num_list[j]"}
{"text": "<s>[INST] Create a Java servlet for a simple web search engine. The setvlet should accept a query and return a search result page with text content and links to search results. here are the inputs import java.io.IOException;\nimport java.io.PrintWriter;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n@WebServlet(\"/search\")\npublic class SearchServlet extends HttpServlet {\n protected void doGet(HttpServletRequest request, HttpServletResponse response)\n throws ServletException, IOException {\n\n String query = request.getParameter(\"query\");\n\n response.setContentType(\"text/html\");\n PrintWriter out = response.getWriter();\n\n out.println(\"<html>\");\n out.println(\"<head>\");\n out.println(\"<title>Search Result</title>\");\n out.println(\"</head>\");\n out.println(\"<body>\");\n out.println(\"<h1>Search Result for: \" + query + \"</h1>\");\n\n // Code to search and display results\n\n out.println(\"</body>\");\n out.println(\"</html>\");\n }\n} [/INST] \\n query = \"java programming\" </s>", "instruction": "Create a Java servlet for a simple web search engine. The setvlet should accept a query and return a search result page with text content and links to search results.", "input": "query = \"java programming\"", "output": "import java.io.IOException;\nimport java.io.PrintWriter;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n@WebServlet(\"/search\")\npublic class SearchServlet extends HttpServlet {\n protected void doGet(HttpServletRequest request, HttpServletResponse response)\n throws ServletException, IOException {\n\n String query = request.getParameter(\"query\");\n\n response.setContentType(\"text/html\");\n PrintWriter out = response.getWriter();\n\n out.println(\"<html>\");\n out.println(\"<head>\");\n out.println(\"<title>Search Result</title>\");\n out.println(\"</head>\");\n out.println(\"<body>\");\n out.println(\"<h1>Search Result for: \" + query + \"</h1>\");\n\n // Code to search and display results\n\n out.println(\"</body>\");\n out.println(\"</html>\");\n }\n}"}
{"text": "<s>[INST] Create an array, named 'list1', with elements [3, 5, 7, 8, 9]. here are the inputs list1 = [3, 5, 7, 8, 9] [/INST] \\n  </s>", "instruction": "Create an array, named 'list1', with elements [3, 5, 7, 8, 9].", "input": "", "output": "list1 = [3, 5, 7, 8, 9]"}
{"text": "<s>[INST] Create a function in Python that takes two parameters and prints out the larger of them. here are the inputs def printMax(parameter_1, parameter_2):\n    if parameter_1 > parameter_2:\n        print(parameter_1)\n    else:\n      print(parameter_2) [/INST] \\n parameter_1 = 7\nparameter_2 = 9 </s>", "instruction": "Create a function in Python that takes two parameters and prints out the larger of them.", "input": "parameter_1 = 7\nparameter_2 = 9", "output": "def printMax(parameter_1, parameter_2):\n    if parameter_1 > parameter_2:\n        print(parameter_1)\n    else:\n      print(parameter_2)"}
{"text": "<s>[INST] Create a guessing game where the user has four attempts to guess a randomly generated number between 0 to 15. here are the inputs # Guessing game where the user has four attempts to guess a randomly generated number between 0 to 15\n\nimport random\n\n# Generate a random number between 0 to 15\nrandom_num = random.randint(0,15)\n# variables to store number of guesses\nnum_guesses = 0\n#Counter to track if the game is over\ngame_over = False\n\n# User gets four attempts to guess the random number\nwhile num_guesses < 4 and not game_over:\n    user_guess = int(input(\"Guess the number: \"))\n\n    # Check if the user has guessed correctly\n    if user_guess == random_num:\n        print('You guessed it correctly')\n        game_over = True\n    else:\n        print('Incorrect guess. Try again.')\n    \n    num_guesses += 1\n\nif not game_over:\n    print(\"You lost the game! The correct answer was \", random_num) [/INST] \\n  </s>", "instruction": "Create a guessing game where the user has four attempts to guess a randomly generated number between 0 to 15.", "input": "", "output": "# Guessing game where the user has four attempts to guess a randomly generated number between 0 to 15\n\nimport random\n\n# Generate a random number between 0 to 15\nrandom_num = random.randint(0,15)\n# variables to store number of guesses\nnum_guesses = 0\n#Counter to track if the game is over\ngame_over = False\n\n# User gets four attempts to guess the random number\nwhile num_guesses < 4 and not game_over:\n    user_guess = int(input(\"Guess the number: \"))\n\n    # Check if the user has guessed correctly\n    if user_guess == random_num:\n        print('You guessed it correctly')\n        game_over = True\n    else:\n        print('Incorrect guess. Try again.')\n    \n    num_guesses += 1\n\nif not game_over:\n    print(\"You lost the game! The correct answer was \", random_num)"}
{"text": "<s>[INST] Rewrite the following Python code by introducing list comprehensions. here are the inputs even_numbers = [i for i in range(1, 21) if i % 2 == 0] [/INST] \\n even_numbers = []\nfor i in range(1,21):\n    if i % 2 == 0:\n        even_numbers.append(i) </s>", "instruction": "Rewrite the following Python code by introducing list comprehensions.", "input": "even_numbers = []\nfor i in range(1,21):\n    if i % 2 == 0:\n        even_numbers.append(i)", "output": "even_numbers = [i for i in range(1, 21) if i % 2 == 0]"}
{"text": "<s>[INST] Develop an algorithm in Python to print Fibonacci series up to a given number. here are the inputs def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n      \nn = int(input(\"Enter a number: \"))\nprint(fibonacci(n)) [/INST] \\n  </s>", "instruction": "Develop an algorithm in Python to print Fibonacci series up to a given number.", "input": "", "output": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n      \nn = int(input(\"Enter a number: \"))\nprint(fibonacci(n))"}
{"text": "<s>[INST] Develop a Bash Shell script to print the numbers from 1 to 10. here are the inputs #!/bin/sh\nfor i in {1..10}\ndo\n   echo \"$i\"\ndone [/INST] \\n  </s>", "instruction": "Develop a Bash Shell script to print the numbers from 1 to 10.", "input": "", "output": "#!/bin/sh\nfor i in {1..10}\ndo\n   echo \"$i\"\ndone"}
{"text": "<s>[INST] Write an algorithm for a binary search from an unsorted array of integers. here are the inputs function binarySearch(arr, target) {\n // Sort the array in ascending order \n arr.sort((a,b)=>a-b);\n \n // Set the left pointer, right pointer and the middle pointer\n let left = 0;\n let right = arr.length - 1;\n let middle = Math.floor((left + right) / 2);\n \n // Iterate through the array while left is less than right\n while (left <= right) {\n if (arr[middle] === target) {\n return middle;\n } else if (arr[middle] < target) {\n left = middle + 1;\n } else {\n right = middle - 1;\n }\n middle = Math.floor((left + right) / 2);\n }\n \n // Return -1 if target not found\n return -1;\n} [/INST] \\n Not Applicable </s>", "instruction": "Write an algorithm for a binary search from an unsorted array of integers.", "input": "Not Applicable", "output": "function binarySearch(arr, target) {\n // Sort the array in ascending order \n arr.sort((a,b)=>a-b);\n \n // Set the left pointer, right pointer and the middle pointer\n let left = 0;\n let right = arr.length - 1;\n let middle = Math.floor((left + right) / 2);\n \n // Iterate through the array while left is less than right\n while (left <= right) {\n if (arr[middle] === target) {\n return middle;\n } else if (arr[middle] < target) {\n left = middle + 1;\n } else {\n right = middle - 1;\n }\n middle = Math.floor((left + right) / 2);\n }\n \n // Return -1 if target not found\n return -1;\n}"}
{"text": "<s>[INST] You need to create a function that reverses a linked list. here are the inputs def reverse_list(head): \n      \n    # Set current to head of linked list \n    current = head  \n  \n    # Set prev to None \n    prev = None\n  \n    # Traverse the linked list \n    while current is not None:\n        # Store the current node's next in a variable\n        next = current.next  \n  \n        # Make current's next point to prev \n        current.next = prev  \n  \n        # Move prev and curr one step forward \n        prev = current \n        current = next\n  \n    # Once the entire linked list has been reversed\n    return prev [/INST] \\n [1, 2, 3, 4, 5] </s>", "instruction": "You need to create a function that reverses a linked list.", "input": "[1, 2, 3, 4, 5]", "output": "def reverse_list(head): \n      \n    # Set current to head of linked list \n    current = head  \n  \n    # Set prev to None \n    prev = None\n  \n    # Traverse the linked list \n    while current is not None:\n        # Store the current node's next in a variable\n        next = current.next  \n  \n        # Make current's next point to prev \n        current.next = prev  \n  \n        # Move prev and curr one step forward \n        prev = current \n        current = next\n  \n    # Once the entire linked list has been reversed\n    return prev"}
{"text": "<s>[INST] Generate a Dart program to check if a list contains an element. here are the inputs bool contains(List<int> list, int element) {\n for (int e in list) {\n if (e == element) return true;\n }\n return false;\n}\n\nvoid main() {\n List<int> list = [1, 4, 7];\n int element = 4;\n bool result = contains(list, element);\n print(result); // true\n} [/INST] \\n Not applicable </s>", "instruction": "Generate a Dart program to check if a list contains an element.", "input": "Not applicable", "output": "bool contains(List<int> list, int element) {\n for (int e in list) {\n if (e == element) return true;\n }\n return false;\n}\n\nvoid main() {\n List<int> list = [1, 4, 7];\n int element = 4;\n bool result = contains(list, element);\n print(result); // true\n}"}
{"text": "<s>[INST] Make the following code snippet into a function in Python3 capable of solving Any Sudoku puzzle here are the inputs def solve_sudoku(board): \n  \n    # Utility function to find vacant cells \n    # Returns a boolean     \n    def find_vacant_cell(board, l): \n        for row in range(9): \n            for col in range(9): \n                if board[row][col] == 0: \n                    l[0] = row \n                    l[1] = col \n                    return True\n        return False\n  \n    # Utility function to check if a number  \n    # is not currently placed in a particular  \n    # row, column and block \n    def is_safe(board, row, col, num): \n  \n        # Check if 'num' is not already placed  \n        # in current row, current column  \n        # and current 3x3 box \n        for i in range(9): \n  \n            # Check the rows\n            if(board[row][i] == num): \n                return False\n  \n            # Check the columns \n            if(board[i][col] == num): \n                return False\n  \n            # Check the 3x3 boxes \n            if(board[(row//3)*3 + i//3][(col//3)*3 + i%3] == num): \n                return False\n  \n        return True\n  \n    # Solve the sudoku \n    def solve(board): \n        # 'l' is a list variable that keeps \n        # the record of row and col in \n        # find_vacant_cell function \n        l = [0, 0] \n  \n        # If there is no unassigned location, \n        # we are done \n        if (not find_vacant_cell(board, l)): \n            return True\n  \n        # Assigning the list values\n        row = l[0] \n        col = l[1] \n  \n        # consider digits 1 to 9 \n        for num in range(1, 10): \n  \n            # if it is a safe position\n            if (is_safe(board, row, col, num)): \n  \n                # make tentative assignment \n                board[row][col] = num \n  \n                # return if succcess\n                if (solve(board)): \n                    return True\n  \n                # failure, unmake and try again \n                board[row][col] = 0\n  \n        # trigger backtracking \n        return False\n  \n    #Driver Program \n    if (solve(board)): \n        for row in board: \n            print(row) \n    else: \n        print(\"No solution\") [/INST] \\n board = [\n    [7,8,0,4,0,0,1,2,0],\n    [6,0,0,0,7,5,0,0,9],\n    [0,0,0,6,0,1,0,7,8],\n    [0,0,7,0,4,0,2,6,0],\n    [0,0,1,0,5,0,9,3,0],\n    [9,0,4,0,6,0,0,0,5],\n    [0,7,0,3,0,0,0,1,2],\n    [1,2,0,0,0,7,4,0,0],\n    [0,4,9,2,0,6,0,0,7]\n] </s>", "instruction": "Make the following code snippet into a function in Python3 capable of solving Any Sudoku puzzle", "input": "board = [\n    [7,8,0,4,0,0,1,2,0],\n    [6,0,0,0,7,5,0,0,9],\n    [0,0,0,6,0,1,0,7,8],\n    [0,0,7,0,4,0,2,6,0],\n    [0,0,1,0,5,0,9,3,0],\n    [9,0,4,0,6,0,0,0,5],\n    [0,7,0,3,0,0,0,1,2],\n    [1,2,0,0,0,7,4,0,0],\n    [0,4,9,2,0,6,0,0,7]\n]", "output": "def solve_sudoku(board): \n  \n    # Utility function to find vacant cells \n    # Returns a boolean     \n    def find_vacant_cell(board, l): \n        for row in range(9): \n            for col in range(9): \n                if board[row][col] == 0: \n                    l[0] = row \n                    l[1] = col \n                    return True\n        return False\n  \n    # Utility function to check if a number  \n    # is not currently placed in a particular  \n    # row, column and block \n    def is_safe(board, row, col, num): \n  \n        # Check if 'num' is not already placed  \n        # in current row, current column  \n        # and current 3x3 box \n        for i in range(9): \n  \n            # Check the rows\n            if(board[row][i] == num): \n                return False\n  \n            # Check the columns \n            if(board[i][col] == num): \n                return False\n  \n            # Check the 3x3 boxes \n            if(board[(row//3)*3 + i//3][(col//3)*3 + i%3] == num): \n                return False\n  \n        return True\n  \n    # Solve the sudoku \n    def solve(board): \n        # 'l' is a list variable that keeps \n        # the record of row and col in \n        # find_vacant_cell function \n        l = [0, 0] \n  \n        # If there is no unassigned location, \n        # we are done \n        if (not find_vacant_cell(board, l)): \n            return True\n  \n        # Assigning the list values\n        row = l[0] \n        col = l[1] \n  \n        # consider digits 1 to 9 \n        for num in range(1, 10): \n  \n            # if it is a safe position\n            if (is_safe(board, row, col, num)): \n  \n                # make tentative assignment \n                board[row][col] = num \n  \n                # return if succcess\n                if (solve(board)): \n                    return True\n  \n                # failure, unmake and try again \n                board[row][col] = 0\n  \n        # trigger backtracking \n        return False\n  \n    #Driver Program \n    if (solve(board)): \n        for row in board: \n            print(row) \n    else: \n        print(\"No solution\")"}
{"text": "<s>[INST] Design a program that generates a random password with 10 characters and contains at least 1 capital letter, 1 lowercase letter, 1 number and 1 special character. here are the inputs import random\nimport string\n\ndef generate_password():\n    characters = string.ascii_letters + string.digits + '!@#$&_'\n    password = ''.join(random.choice(characters) for x in range(10))\n    chars = [c for c in password]\n    password = (\n        ''.join(random.sample(string.ascii_lowercase, 1)) +\n        ''.join(random.sample(string.ascii_uppercase, 1)) +\n        ''.join(random.sample(string.digits, 1)) +\n        ''.join(random.sample(string.punctuation, 1)) +\n        ''.join(random.sample(chars, 6))\n    )\n    return password\n\nprint(generate_password()) [/INST] \\n Not applicable </s>", "instruction": "Design a program that generates a random password with 10 characters and contains at least 1 capital letter, 1 lowercase letter, 1 number and 1 special character.", "input": "Not applicable", "output": "import random\nimport string\n\ndef generate_password():\n    characters = string.ascii_letters + string.digits + '!@#$&_'\n    password = ''.join(random.choice(characters) for x in range(10))\n    chars = [c for c in password]\n    password = (\n        ''.join(random.sample(string.ascii_lowercase, 1)) +\n        ''.join(random.sample(string.ascii_uppercase, 1)) +\n        ''.join(random.sample(string.digits, 1)) +\n        ''.join(random.sample(string.punctuation, 1)) +\n        ''.join(random.sample(chars, 6))\n    )\n    return password\n\nprint(generate_password())"}
{"text": "<s>[INST] Find the missing value in an array here are the inputs The missing value in the given array is 5. [/INST] \\n [1, 2, 3, 4, 6, 7, 8] </s>", "instruction": "Find the missing value in an array", "input": "[1, 2, 3, 4, 6, 7, 8]", "output": "The missing value in the given array is 5."}
{"text": "<s>[INST] Write a function in Python to calculate the sum of the digits in a given number. here are the inputs def sum_digits(num):\n    total = 0\n    while num > 0:\n        digit = num % 10\n        total += digit\n        num = num // 10\n    return total [/INST] \\n  </s>", "instruction": "Write a function in Python to calculate the sum of the digits in a given number.", "input": "", "output": "def sum_digits(num):\n    total = 0\n    while num > 0:\n        digit = num % 10\n        total += digit\n        num = num // 10\n    return total"}
{"text": "<s>[INST] Write an SQL query that returns customer records that contain orders from the past year. here are the inputs SELECT * \nFROM Customers c  \nINNER JOIN Orders o \n\tON c.CustomerID = o.CustomerID \n\tAND YEAR(o.OrderDate) = YEAR(CURRENT_DATE); [/INST] \\n No Input needed. </s>", "instruction": "Write an SQL query that returns customer records that contain orders from the past year.", "input": "No Input needed.", "output": "SELECT * \nFROM Customers c  \nINNER JOIN Orders o \n\tON c.CustomerID = o.CustomerID \n\tAND YEAR(o.OrderDate) = YEAR(CURRENT_DATE);"}
{"text": "<s>[INST] Create a TypeScript class for a car that has the properties, make, model, year, and color. here are the inputs class Car {\n private make: string;\n private model: string;\n private year: number;\n private color: string;\n\n constructor(make: string, model: string, year: number, color: string) {\n this.make = make;\n this.model = model;\n this.year = year;\n this.color = color;\n }\n\n getMake(): string {\n return this.make;\n }\n \n setMake(make: string): void {\n this.make = make;\n }\n \n getModel(): string {\n return this.model;\n }\n \n setModel(model: string): void {\n this.model = model;\n }\n \n getYear(): number {\n return this.year;\n }\n \n setYear(year: number): void {\n this.year = year;\n }\n \n getColor(): string {\n return this.color;\n }\n \n setColor(color: string): void {\n this.color = color;\n }\n} [/INST] \\n Not applicable </s>", "instruction": "Create a TypeScript class for a car that has the properties, make, model, year, and color.", "input": "Not applicable", "output": "class Car {\n private make: string;\n private model: string;\n private year: number;\n private color: string;\n\n constructor(make: string, model: string, year: number, color: string) {\n this.make = make;\n this.model = model;\n this.year = year;\n this.color = color;\n }\n\n getMake(): string {\n return this.make;\n }\n \n setMake(make: string): void {\n this.make = make;\n }\n \n getModel(): string {\n return this.model;\n }\n \n setModel(model: string): void {\n this.model = model;\n }\n \n getYear(): number {\n return this.year;\n }\n \n setYear(year: number): void {\n this.year = year;\n }\n \n getColor(): string {\n return this.color;\n }\n \n setColor(color: string): void {\n this.color = color;\n }\n}"}
{"text": "<s>[INST] Take the list of people below and create a Python dictionary with the names as keys and the ages as values. here are the inputs people_dict = {'John': 20, 'Jane': 40, 'Alex': 18, 'Peter': 45} [/INST] \\n John (20), Jane (40), Alex (18), Peter (45) </s>", "instruction": "Take the list of people below and create a Python dictionary with the names as keys and the ages as values.", "input": "John (20), Jane (40), Alex (18), Peter (45)", "output": "people_dict = {'John': 20, 'Jane': 40, 'Alex': 18, 'Peter': 45}"}
{"text": "<s>[INST] Create a Node.js Promise to call an API with the given parameters. here are the inputs const fetchData = (url) => new Promise((resolve, reject) => {\n  request(url, (err, res, body) => {\n    if (err) {\n      //network error\n      reject(err);\n    } else {\n      resolve(body);\n    }\n  });\n});\n\nfetchData('https://api.example.com/data?param=value')\n  .then(data => {\n    //data fetched successfully\n  })\n  .catch(err => {\n    //network error\n  }); [/INST] \\n URL:\nhttps://api.example.com/data?param=value </s>", "instruction": "Create a Node.js Promise to call an API with the given parameters.", "input": "URL:\nhttps://api.example.com/data?param=value", "output": "const fetchData = (url) => new Promise((resolve, reject) => {\n  request(url, (err, res, body) => {\n    if (err) {\n      //network error\n      reject(err);\n    } else {\n      resolve(body);\n    }\n  });\n});\n\nfetchData('https://api.example.com/data?param=value')\n  .then(data => {\n    //data fetched successfully\n  })\n  .catch(err => {\n    //network error\n  });"}
{"text": "<s>[INST] Design an algorithm in Java to remove all the white spaces from a given string. here are the inputs public static String removeWhiteSpaces(String str) { \n  \n    StringBuilder sb = new StringBuilder(); \n  \n    for (int i = 0; i < str.length(); i++) { \n        if(str.charAt(i) != ' ') \n            sb.append(str.charAt(i)); \n    } \n    return sb.toString(); \n} [/INST] \\n  </s>", "instruction": "Design an algorithm in Java to remove all the white spaces from a given string.", "input": "", "output": "public static String removeWhiteSpaces(String str) { \n  \n    StringBuilder sb = new StringBuilder(); \n  \n    for (int i = 0; i < str.length(); i++) { \n        if(str.charAt(i) != ' ') \n            sb.append(str.charAt(i)); \n    } \n    return sb.toString(); \n}"}
{"text": "<s>[INST] Generate a Node.js script that makes an API request to the GitHub API to get the list of followers for a specific user. here are the inputs const axios = require('axios');\n\nasync function getFollowers(username) {\n const response = await axios.get(`https://api.github.com/users/${username}/followers`);\n console.log(response.data);\n}\n\ngetFollowers('johndoe'); [/INST] \\n The username: johndoe </s>", "instruction": "Generate a Node.js script that makes an API request to the GitHub API to get the list of followers for a specific user.", "input": "The username: johndoe", "output": "const axios = require('axios');\n\nasync function getFollowers(username) {\n const response = await axios.get(`https://api.github.com/users/${username}/followers`);\n console.log(response.data);\n}\n\ngetFollowers('johndoe');"}
{"text": "<s>[INST] Create a C++ function for computing the Fibonacci sequence. The function should return an array of sequence numbers up to a given number. here are the inputs int* fibonacci(int n) {\n int* seq = new int[n];\n seq[0] = 0;\n seq[1] = 1;\n \n for (int i = 2; i < n; i++) {\n seq[i] = seq[i - 1] + seq[i - 2];\n }\n \n return seq;\n}\n\nint* sequence = fibonacci(5);\n\n// Print the sequence\nfor (int i = 0; i < 5; i++) {\n std::cout << sequence[i] << \" \"; // 0 1 1 2 3\n} [/INST] \\n Not applicable </s>", "instruction": "Create a C++ function for computing the Fibonacci sequence. The function should return an array of sequence numbers up to a given number.", "input": "Not applicable", "output": "int* fibonacci(int n) {\n int* seq = new int[n];\n seq[0] = 0;\n seq[1] = 1;\n \n for (int i = 2; i < n; i++) {\n seq[i] = seq[i - 1] + seq[i - 2];\n }\n \n return seq;\n}\n\nint* sequence = fibonacci(5);\n\n// Print the sequence\nfor (int i = 0; i < 5; i++) {\n std::cout << sequence[i] << \" \"; // 0 1 1 2 3\n}"}
{"text": "<s>[INST] Optimize a SQL query to find the most popular movie genres in the database. here are the inputs SELECT genres, Count(*) AS cnt \nFROM movies \nGROUP BY genres \nORDER BY cnt DESC; [/INST] \\n Not applicable </s>", "instruction": "Optimize a SQL query to find the most popular movie genres in the database.", "input": "Not applicable", "output": "SELECT genres, Count(*) AS cnt \nFROM movies \nGROUP BY genres \nORDER BY cnt DESC;"}
{"text": "<s>[INST] Develop a Python program to clearly understand the concept of recursion. here are the inputs # This program is to understand recursion in Python.\n\n# Define a recursive function to calculate the factorial of a number\ndef factorial(n):\n   if n == 1:\n      return 1\n   else:\n      return n * factorial(n - 1)\n\n# Calculate factorial of number 5\nresult = factorial(5)\nprint(\"Factorial of 5 is \", result) \n\n# Output: Factorial of 5 is 120 [/INST] \\n  </s>", "instruction": "Develop a Python program to clearly understand the concept of recursion.", "input": "", "output": "# This program is to understand recursion in Python.\n\n# Define a recursive function to calculate the factorial of a number\ndef factorial(n):\n   if n == 1:\n      return 1\n   else:\n      return n * factorial(n - 1)\n\n# Calculate factorial of number 5\nresult = factorial(5)\nprint(\"Factorial of 5 is \", result) \n\n# Output: Factorial of 5 is 120"}
{"text": "<s>[INST] Edit the following code to handle errors gracefully. here are the inputs try:\n    x = 1/0\nexcept ZeroDivisionError as e:\n    print(\"Can't divide by zero!\")\n    x = 0 [/INST] \\n try:\n    x = 1/0\nexcept ZeroDivisionError as e:\n    print \"Can't divide by zero!\" </s>", "instruction": "Edit the following code to handle errors gracefully.", "input": "try:\n    x = 1/0\nexcept ZeroDivisionError as e:\n    print \"Can't divide by zero!\"", "output": "try:\n    x = 1/0\nexcept ZeroDivisionError as e:\n    print(\"Can't divide by zero!\")\n    x = 0"}
{"text": "<s>[INST] Design a Java algorithm for a lock combination. here are the inputs public class ComboLock {\n \n    private int lockCombo;\n \n    public ComboLock(int combo) { \n        this.lockCombo = combo; \n    }\n \n    public boolean open(int a, int b, int c) { \n        if (a * 100 + b * 10 + c == this.lockCombo) { \n            return true; \n        } else { \n            return false; \n        } \n    } \n} [/INST] \\n Not applicable </s>", "instruction": "Design a Java algorithm for a lock combination.", "input": "Not applicable", "output": "public class ComboLock {\n \n    private int lockCombo;\n \n    public ComboLock(int combo) { \n        this.lockCombo = combo; \n    }\n \n    public boolean open(int a, int b, int c) { \n        if (a * 100 + b * 10 + c == this.lockCombo) { \n            return true; \n        } else { \n            return false; \n        } \n    } \n}"}
{"text": "<s>[INST] Implement a function in JavaScript that takes two arguments a string and a number, and returns the first n characters of that string. here are the inputs function firstNCharacters(str, n) {\n return str.substring(0, n);\n} [/INST] \\n Not applicable </s>", "instruction": "Implement a function in JavaScript that takes two arguments a string and a number, and returns the first n characters of that string.", "input": "Not applicable", "output": "function firstNCharacters(str, n) {\n return str.substring(0, n);\n}"}
{"text": "<s>[INST] Generate a PHP function to validate an email address and return true if it is valid, false otherwise. here are the inputs function isValidEmail($email) {\n return filter_var($email, FILTER_VALIDATE_EMAIL);\n}\n\n$email = 'example@example.com';\nif (isValidEmail($email)) {\n echo 'Valid email';\n} else {\n echo 'Invalid email';\n} [/INST] \\n Not applicable </s>", "instruction": "Generate a PHP function to validate an email address and return true if it is valid, false otherwise.", "input": "Not applicable", "output": "function isValidEmail($email) {\n return filter_var($email, FILTER_VALIDATE_EMAIL);\n}\n\n$email = 'example@example.com';\nif (isValidEmail($email)) {\n echo 'Valid email';\n} else {\n echo 'Invalid email';\n}"}
{"text": "<s>[INST] Create a graphql schema that allows users to query, add, update, and delete posts. Each post should include fields for title and description. here are the inputs type Post {\n id: ID!\n title: String!\n description: String!\n}\n\ntype Query {\n posts: [Post]\n post(id: ID!): Post\n}\n\ntype Mutation {\n createPost(title: String!, description: String!): Post\n updatePost(id: ID!, title: String!, description: String!): Post\n deletePost(id: ID!): Boolean\n} [/INST] \\n Not applicable </s>", "instruction": "Create a graphql schema that allows users to query, add, update, and delete posts. Each post should include fields for title and description.", "input": "Not applicable", "output": "type Post {\n id: ID!\n title: String!\n description: String!\n}\n\ntype Query {\n posts: [Post]\n post(id: ID!): Post\n}\n\ntype Mutation {\n createPost(title: String!, description: String!): Post\n updatePost(id: ID!, title: String!, description: String!): Post\n deletePost(id: ID!): Boolean\n}"}
{"text": "<s>[INST] Create a Haskell function to receive two parameters and return the larger one. here are the inputs max :: (Ord a) => a -> a -> a\nmax x y =\n    if x > y\n        then x\n    else\n        y\n        \nmain :: IO ()\nmain = do\n    let param1 = 4\n    let param2 = 9\n    print $ max param1 param2 [/INST] \\n param1 = 4\nparam2 = 9 </s>", "instruction": "Create a Haskell function to receive two parameters and return the larger one.", "input": "param1 = 4\nparam2 = 9", "output": "max :: (Ord a) => a -> a -> a\nmax x y =\n    if x > y\n        then x\n    else\n        y\n        \nmain :: IO ()\nmain = do\n    let param1 = 4\n    let param2 = 9\n    print $ max param1 param2"}
{"text": "<s>[INST] Build a web-crawler to fetch webpages from a given website. here are the inputs import requests \nimport urllib.parse \nfrom bs4 import BeautifulSoup \n\n# List to keep track of visited pages \nvisited = []\n\n# Use requests to fetch the webpage \ndef request_webpage(url): \n    try: \n        response = requests.get(url) \n        if response.status_code == 200: \n            # parse the webpage and visit all links recursively \n            soup = BeautifulSoup(response.text, 'html.parser') \n            visit_all_links(soup) \n    except: \n        print('Error accessing the URL') \n\n# visit all the links within the given page\ndef visit_all_links(soup): \n    for link in soup.findAll('a'): \n        href = link.get('href') \n        if href == \"\" or href is None: \n            continue \n        href = urllib.parse.urljoin(url, href) \n        if href not in visited: \n            visited.append(href) \n            print(f\"Visited {href}\") \n            request_webpage(href)\n\n# URL to visit \nurl = \"https://www.example.com/\"\n\n# Visit the given URL \nrequest_webpage(url) [/INST] \\n Website URL: https://www.example.com </s>", "instruction": "Build a web-crawler to fetch webpages from a given website.", "input": "Website URL: https://www.example.com", "output": "import requests \nimport urllib.parse \nfrom bs4 import BeautifulSoup \n\n# List to keep track of visited pages \nvisited = []\n\n# Use requests to fetch the webpage \ndef request_webpage(url): \n    try: \n        response = requests.get(url) \n        if response.status_code == 200: \n            # parse the webpage and visit all links recursively \n            soup = BeautifulSoup(response.text, 'html.parser') \n            visit_all_links(soup) \n    except: \n        print('Error accessing the URL') \n\n# visit all the links within the given page\ndef visit_all_links(soup): \n    for link in soup.findAll('a'): \n        href = link.get('href') \n        if href == \"\" or href is None: \n            continue \n        href = urllib.parse.urljoin(url, href) \n        if href not in visited: \n            visited.append(href) \n            print(f\"Visited {href}\") \n            request_webpage(href)\n\n# URL to visit \nurl = \"https://www.example.com/\"\n\n# Visit the given URL \nrequest_webpage(url)"}
{"text": "<s>[INST] Develop a program to optimize the route for an online delivery. here are the inputs def compute_route(number_of_orders, orders, distances): \n  total_distance = 0\n  sorted_distance_index = sorted(range(len(distances)), key=lambda k: distances[k])\n   \n  route = [0] * number_of_orders  \n  index = 0 \n  total = 0 \n   \n  for i in sorted_distance_index: \n      total += orders[i] \n      route[index] = i\n      index += 1\n      if total > 50: \n          total_distance += distances[i] \n          break\n  \n  for i in range(index, number_of_orders): \n      route[i] = 0\n      total_distance += distances[i] \n    \n  return route, total_distance\n  \ncompute_route(5, [100, 30, 70, 40, 50], [20, 15, 25, 10, 15]) [/INST] \\n Number of orders = 5\nList of orders = [100, 30, 70, 40, 50]\nList of distances = [20, 15, 25, 10, 15] </s>", "instruction": "Develop a program to optimize the route for an online delivery.", "input": "Number of orders = 5\nList of orders = [100, 30, 70, 40, 50]\nList of distances = [20, 15, 25, 10, 15]", "output": "def compute_route(number_of_orders, orders, distances): \n  total_distance = 0\n  sorted_distance_index = sorted(range(len(distances)), key=lambda k: distances[k])\n   \n  route = [0] * number_of_orders  \n  index = 0 \n  total = 0 \n   \n  for i in sorted_distance_index: \n      total += orders[i] \n      route[index] = i\n      index += 1\n      if total > 50: \n          total_distance += distances[i] \n          break\n  \n  for i in range(index, number_of_orders): \n      route[i] = 0\n      total_distance += distances[i] \n    \n  return route, total_distance\n  \ncompute_route(5, [100, 30, 70, 40, 50], [20, 15, 25, 10, 15])"}
{"text": "<s>[INST] Create a data structure to store the following information about students: name, course and average grade. here are the inputs class StudentData:\n    def __init__(self):\n        self.students = []\n    \n    def add_student(self, name, course, average_grade):\n        student = {\n            'name': name,\n            'course': course,\n            'average_grade': average_grade\n        }\n        self.students.append(student)\n\nstudents = StudentData()\nstudents.add_student('John', 'Programming', 9.2)\nstudents.add_student('Alice', 'English', 7.8) [/INST] \\n No Input </s>", "instruction": "Create a data structure to store the following information about students: name, course and average grade.", "input": "No Input", "output": "class StudentData:\n    def __init__(self):\n        self.students = []\n    \n    def add_student(self, name, course, average_grade):\n        student = {\n            'name': name,\n            'course': course,\n            'average_grade': average_grade\n        }\n        self.students.append(student)\n\nstudents = StudentData()\nstudents.add_student('John', 'Programming', 9.2)\nstudents.add_student('Alice', 'English', 7.8)"}
{"text": "<s>[INST] Design an algorithm for a chatbot that is able to respond to user messages. here are the inputs 1. Collect user messages.\n2. Preprocess the messages to remove noise and improve the accuracy of natural language understanding (NLU).\n3. Use natural language processing (NLP) and machine learning techniques to determine the intent and extract entities from the messages.\n4. Use the intent and entities to select the appropriate response for the user's message.\n5. Generate an appropriate response for the user.\n6. Send the response to the user. [/INST] \\n Not applicable </s>", "instruction": "Design an algorithm for a chatbot that is able to respond to user messages.", "input": "Not applicable", "output": "1. Collect user messages.\n2. Preprocess the messages to remove noise and improve the accuracy of natural language understanding (NLU).\n3. Use natural language processing (NLP) and machine learning techniques to determine the intent and extract entities from the messages.\n4. Use the intent and entities to select the appropriate response for the user's message.\n5. Generate an appropriate response for the user.\n6. Send the response to the user."}
{"text": "<s>[INST] Design an algorithm to find the most common word in a sentence. here are the inputs # Function\ndef find_most_common_word(sentence):\n    # Initialize\n    words = sentence.split()\n    word_dict = {}\n    \n    # Count number of times each word appears\n    for word in words:\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    \n    # Find most common word \n    most_common_word = max(word_dict, key=word_dict.get)\n    \n    # Return most common words\n    return most_common_word\n\n# Output\nprint(find_most_common_word(\"This is a sentence with a lot of different words\"))\n# Output: a [/INST] \\n \"This is a sentence with a lot of different words\" </s>", "instruction": "Design an algorithm to find the most common word in a sentence.", "input": "\"This is a sentence with a lot of different words\"", "output": "# Function\ndef find_most_common_word(sentence):\n    # Initialize\n    words = sentence.split()\n    word_dict = {}\n    \n    # Count number of times each word appears\n    for word in words:\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    \n    # Find most common word \n    most_common_word = max(word_dict, key=word_dict.get)\n    \n    # Return most common words\n    return most_common_word\n\n# Output\nprint(find_most_common_word(\"This is a sentence with a lot of different words\"))\n# Output: a"}
{"text": "<s>[INST] Generate a random 6-digits number in Python. here are the inputs import random\n\nnumber = random.randint(100000, 999999)\nprint(number) [/INST] \\n  </s>", "instruction": "Generate a random 6-digits number in Python.", "input": "", "output": "import random\n\nnumber = random.randint(100000, 999999)\nprint(number)"}
{"text": "<s>[INST] Write a JavaScript program to get the current day and time. here are the inputs let currentDateTime =  new Date();\nlet day = currentDateTime.getDay();\nlet hour = currentDateTime.getHours();\nlet minute = currentDateTime.getMinutes();\nlet second = currentDateTime.getSeconds();\n\nlet days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\nconsole.log(`Today is: ${days[day]}, current time is ${hour}:${minute}:${second}`); [/INST] \\n  </s>", "instruction": "Write a JavaScript program to get the current day and time.", "input": "", "output": "let currentDateTime =  new Date();\nlet day = currentDateTime.getDay();\nlet hour = currentDateTime.getHours();\nlet minute = currentDateTime.getMinutes();\nlet second = currentDateTime.getSeconds();\n\nlet days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\nconsole.log(`Today is: ${days[day]}, current time is ${hour}:${minute}:${second}`);"}
{"text": "<s>[INST] Create a sorting algorithm in Python to sort strings by their length. here are the inputs def sort_by_length(strings):\n    for i in range(len(strings) - 1):\n        for j in range(i + 1, len(strings)):\n            if len(strings[i]) > len(strings[j]):\n                strings[i], strings[j] = strings[j], strings[i]\n    return strings\n\nunsorted_list = [\"cat\", \"dog\", \"apple\", \"banana\"]\n\nsorted_list = sort_by_length(unsorted_list)\n\nprint(sorted_list) [/INST] \\n [\"cat\", \"dog\", \"apple\", \"banana\"] </s>", "instruction": "Create a sorting algorithm in Python to sort strings by their length.", "input": "[\"cat\", \"dog\", \"apple\", \"banana\"]", "output": "def sort_by_length(strings):\n    for i in range(len(strings) - 1):\n        for j in range(i + 1, len(strings)):\n            if len(strings[i]) > len(strings[j]):\n                strings[i], strings[j] = strings[j], strings[i]\n    return strings\n\nunsorted_list = [\"cat\", \"dog\", \"apple\", \"banana\"]\n\nsorted_list = sort_by_length(unsorted_list)\n\nprint(sorted_list)"}
{"text": "<s>[INST] Create a Ruby program that takes in two arrays and a block as input, and uses the block to combine the elements of the two arrays. here are the inputs def combine_arrays(array1, array2)\n  result = []\n  array1.each do |elem1|\n    array2.each do |elem2|\n      result << yield(elem1, elem2)\n    end\n  end\n  result\nend\n\narr1 = [1,2,3,4]\narr2 = [11,12,13,14]\n\nresult = combine_arrays(arr1, arr2) do |x, y|\n  x * y\nend\n\np result # prints [11, 24, 39, 56] [/INST] \\n [1,2,3,4], [11,12,13,14] </s>", "instruction": "Create a Ruby program that takes in two arrays and a block as input, and uses the block to combine the elements of the two arrays.", "input": "[1,2,3,4], [11,12,13,14]", "output": "def combine_arrays(array1, array2)\n  result = []\n  array1.each do |elem1|\n    array2.each do |elem2|\n      result << yield(elem1, elem2)\n    end\n  end\n  result\nend\n\narr1 = [1,2,3,4]\narr2 = [11,12,13,14]\n\nresult = combine_arrays(arr1, arr2) do |x, y|\n  x * y\nend\n\np result # prints [11, 24, 39, 56]"}
{"text": "<s>[INST] Develop a function to search for an item in a 2D array. here are the inputs def search(arr, target):\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if arr[i][j] == target:\n                return (i, j)\n    return -1 [/INST] \\n arr = [[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]] </s>", "instruction": "Develop a function to search for an item in a 2D array.", "input": "arr = [[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]]", "output": "def search(arr, target):\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if arr[i][j] == target:\n                return (i, j)\n    return -1"}
{"text": "<s>[INST] Design a function to generate a histogram for an array of numbers. here are the inputs def  generate_histogram(arr):\n    \"\"\"\n    Generates a histogram for an array of numbers.\n    Parameters:\n        list arr: The array to process.\n    Returns:\n        dict: The dict containing the frequency of each number in the array.\n    \"\"\"\n    histogram = dict()\n    for number in arr:\n        count = histogram.get(number, 0)\n        count += 1\n        histogram[number] = count\n    return histogram [/INST] \\n  </s>", "instruction": "Design a function to generate a histogram for an array of numbers.", "input": "", "output": "def  generate_histogram(arr):\n    \"\"\"\n    Generates a histogram for an array of numbers.\n    Parameters:\n        list arr: The array to process.\n    Returns:\n        dict: The dict containing the frequency of each number in the array.\n    \"\"\"\n    histogram = dict()\n    for number in arr:\n        count = histogram.get(number, 0)\n        count += 1\n        histogram[number] = count\n    return histogram"}
{"text": "<s>[INST] Generate a PHP function that generates an array of random numbers here are the inputs <?php\nfunction generateRandomArray($n) {\n    // array to store generated numbers \n    $randomArray = array();\n    \n    // generate random numbers within the range \n    while(count($randomArray) < $n) { \n        // generate a random number \n        $value = mt_rand(1, $n); \n\n        if(!in_array($value, $randomArray)) { \n            $randomArray[] = $value; \n        } \n    } \n\n    return $randomArray; \n} \n\n# Driver code \n$n = 10; \n$randomArray = generateRandomArray($n); \n\n# Print the result \nprint_r($randomArray); \n?> [/INST] \\n N=10 </s>", "instruction": "Generate a PHP function that generates an array of random numbers", "input": "N=10", "output": "<?php\nfunction generateRandomArray($n) {\n    // array to store generated numbers \n    $randomArray = array();\n    \n    // generate random numbers within the range \n    while(count($randomArray) < $n) { \n        // generate a random number \n        $value = mt_rand(1, $n); \n\n        if(!in_array($value, $randomArray)) { \n            $randomArray[] = $value; \n        } \n    } \n\n    return $randomArray; \n} \n\n# Driver code \n$n = 10; \n$randomArray = generateRandomArray($n); \n\n# Print the result \nprint_r($randomArray); \n?>"}
{"text": "<s>[INST] Generate a PostgreSQL query to update the ``quantity`` field of the ``products`` table to the value 10. here are the inputs UPDATE products\nSET quantity = 10 [/INST] \\n  </s>", "instruction": "Generate a PostgreSQL query to update the ``quantity`` field of the ``products`` table to the value 10.", "input": "", "output": "UPDATE products\nSET quantity = 10"}
{"text": "<s>[INST] Write a JavaScript function that takes an array of strings as input and returns an array of objects with the keys and values. here are the inputs // Function to convert array to object\nfunction arrayToObject(arr) {\n const obj = {};\n arr.forEach(item => {\n const [key, value] = item.split(':');\n obj[key] = value;\n });\n\n return obj;\n}\n\n// Test \nconst arr = ['name:John', 'age:30', 'country:US'];\nconst obj = arrayToObject(arr);\nconsole.log(obj); // Output: { name: 'John', age: '30', country: 'US' } [/INST] \\n ['name', 'age', 'country'] </s>", "instruction": "Write a JavaScript function that takes an array of strings as input and returns an array of objects with the keys and values.", "input": "['name', 'age', 'country']", "output": "// Function to convert array to object\nfunction arrayToObject(arr) {\n const obj = {};\n arr.forEach(item => {\n const [key, value] = item.split(':');\n obj[key] = value;\n });\n\n return obj;\n}\n\n// Test \nconst arr = ['name:John', 'age:30', 'country:US'];\nconst obj = arrayToObject(arr);\nconsole.log(obj); // Output: { name: 'John', age: '30', country: 'US' }"}
{"text": "<s>[INST] Can you write a computer program to search a given string for all occurrences of a given word? here are the inputs def word_count(string, word):\n  count = 0\n  for i in string.split():\n    if i == word:\n      count += 1\n  return count\n  \nstring = \"Hello World, Hello Programmers\"\nword = \"Hello\"\ncount = word_count(string, word)\nprint(count) [/INST] \\n \"Hello World, Hello Programmers\", \"Hello\" </s>", "instruction": "Can you write a computer program to search a given string for all occurrences of a given word?", "input": "\"Hello World, Hello Programmers\", \"Hello\"", "output": "def word_count(string, word):\n  count = 0\n  for i in string.split():\n    if i == word:\n      count += 1\n  return count\n  \nstring = \"Hello World, Hello Programmers\"\nword = \"Hello\"\ncount = word_count(string, word)\nprint(count)"}
{"text": "<s>[INST] Create a React application for a simple to-do list. This application should include the ability to add, delete, and edit items in the list. here are the inputs //importing all the necessary components \nimport React, { Component } from 'react';\nimport {  \n  BrowserRouter as Router,\n  Route,\n  Link\n } from \"react-router-dom\";\n\n//component for the to-do list\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    //initializing state variables\n    this.state = {\n      todos: [],\n      input: ''\n    }\n    //binding state variables\n    this.handleChange = this.handleChange.bind(this);\n    this.addTodo = this.addTodo.bind(this);\n    this.deleteTodo = this.deleteTodo.bind(this);\n    this.editTodo = this.editTodo.bind(this);\n  }\n\n  //function for handling change in input \n  handleChange(e) {\n    this.setState({\n      input: e.target.value\n    });\n  }\n\n  //function to add todo\n  addTodo(todo) {\n    if (todo.length > 0) {\n      this.setState({\n        todos: [...this.state.todos, todo],\n        input: ''\n      })\n    }\n  }\n\n  //function to delete todo \n  deleteTodo(index) {\n    let todos = this.state.todos;\n    todos.splice(index, 1);\n    this.setState({\n      todos\n    });\n  }\n\n  //function to edit todo  \n  editTodo(index, newTodo ) {\n    let todos = this.state.todos;\n    todos[index] = newTodo;\n    this.setState({\n      todos\n    });\n  }\n\n  //function for rendering the component \n  render() {\n    //setting up todo inputs\n    let todoInput;\n    todoInput = (\n      <div>\n        <input value={this.state.input} onChange={this.handleChange} type=\"text\"/>\n        <button onClick={() => this.addTodo(this.state.input)}>+</button>\n      </div>\n    );\n\n    //setting up todos list \n    let todos = this.state.todos.map((todo, index) => {\n      return (\n        <div key={index} >\n          <Todo editTodoFn={this.editTodo} deleteTodoFn={this.deleteTodo} id={index} todo={todo}/>\n        </div> \n      )\n    });\n\n    //rendering the list\n    return (\n      <div>\n        {todoInput}\n        {todos}\n      </div>\n    );\n  }\n}\n\n//export the todolist\nexport default TodoList; [/INST] \\n Not applicable </s>", "instruction": "Create a React application for a simple to-do list. This application should include the ability to add, delete, and edit items in the list.", "input": "Not applicable", "output": "//importing all the necessary components \nimport React, { Component } from 'react';\nimport {  \n  BrowserRouter as Router,\n  Route,\n  Link\n } from \"react-router-dom\";\n\n//component for the to-do list\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    //initializing state variables\n    this.state = {\n      todos: [],\n      input: ''\n    }\n    //binding state variables\n    this.handleChange = this.handleChange.bind(this);\n    this.addTodo = this.addTodo.bind(this);\n    this.deleteTodo = this.deleteTodo.bind(this);\n    this.editTodo = this.editTodo.bind(this);\n  }\n\n  //function for handling change in input \n  handleChange(e) {\n    this.setState({\n      input: e.target.value\n    });\n  }\n\n  //function to add todo\n  addTodo(todo) {\n    if (todo.length > 0) {\n      this.setState({\n        todos: [...this.state.todos, todo],\n        input: ''\n      })\n    }\n  }\n\n  //function to delete todo \n  deleteTodo(index) {\n    let todos = this.state.todos;\n    todos.splice(index, 1);\n    this.setState({\n      todos\n    });\n  }\n\n  //function to edit todo  \n  editTodo(index, newTodo ) {\n    let todos = this.state.todos;\n    todos[index] = newTodo;\n    this.setState({\n      todos\n    });\n  }\n\n  //function for rendering the component \n  render() {\n    //setting up todo inputs\n    let todoInput;\n    todoInput = (\n      <div>\n        <input value={this.state.input} onChange={this.handleChange} type=\"text\"/>\n        <button onClick={() => this.addTodo(this.state.input)}>+</button>\n      </div>\n    );\n\n    //setting up todos list \n    let todos = this.state.todos.map((todo, index) => {\n      return (\n        <div key={index} >\n          <Todo editTodoFn={this.editTodo} deleteTodoFn={this.deleteTodo} id={index} todo={todo}/>\n        </div> \n      )\n    });\n\n    //rendering the list\n    return (\n      <div>\n        {todoInput}\n        {todos}\n      </div>\n    );\n  }\n}\n\n//export the todolist\nexport default TodoList;"}
{"text": "<s>[INST] Write an SQL query to create a table in a given database. here are the inputs CREATE TABLE MyDatabase.Customers (\n   id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n   firstname VARCHAR(255) NOT NULL,\n   lastname VARCHAR(255) NOT NULL,\n   city VARCHAR(255) NOT NULL\n); [/INST] \\n Database name: MyDatabase, Table name: Customers </s>", "instruction": "Write an SQL query to create a table in a given database.", "input": "Database name: MyDatabase, Table name: Customers", "output": "CREATE TABLE MyDatabase.Customers (\n   id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n   firstname VARCHAR(255) NOT NULL,\n   lastname VARCHAR(255) NOT NULL,\n   city VARCHAR(255) NOT NULL\n);"}
{"text": "<s>[INST] Write a Python function to get the maximum and minimum values in a given list. here are the inputs def get_max_min(lst):\n min_value = lst[0]\n max_value = lst[0]\n \n for i in range(1, len(lst)):\n  if lst[i] > max_value:\n   max_value = lst[i]\n  if lst[i] < min_value:\n   min_value = lst[i]\n \n return (min_value, max_value) [/INST] \\n Not applicable </s>", "instruction": "Write a Python function to get the maximum and minimum values in a given list.", "input": "Not applicable", "output": "def get_max_min(lst):\n min_value = lst[0]\n max_value = lst[0]\n \n for i in range(1, len(lst)):\n  if lst[i] > max_value:\n   max_value = lst[i]\n  if lst[i] < min_value:\n   min_value = lst[i]\n \n return (min_value, max_value)"}
{"text": "<s>[INST] Create a program in C# to sort a list of randomly generated numbers from lowest to highest by implementing a Bubble Sort algorithm. here are the inputs using System;\n\nnamespace SortList\n{\n    class Program\n    {\n        public static void Main()\n        {\n            int[] array = new int[] { 4, 2, 1, 3 };\n\n            int n = array.Length;\n            bool swapped;\n\n            do\n            {\n                swapped = false;\n                for (int i = 0; i < n - 1; i++)\n                {\n                    if (array[i] > array[i + 1])\n                    {\n                        // swap elements\n                        int temp = array[i];\n                        array[i] = array[i + 1];\n                        array[i + 1] = temp;\n                        swapped = true;\n                    }\n                }\n            }\n            while (swapped == true);\n\n            Console.WriteLine(\"Sorted list:\");\n            foreach (int num in array)\n            {\n                Console.Write(num + \" \");\n            }\n            Console.WriteLine();\n\n        }\n    }\n} [/INST] \\n Given list: [4, 2, 1, 3] </s>", "instruction": "Create a program in C# to sort a list of randomly generated numbers from lowest to highest by implementing a Bubble Sort algorithm.", "input": "Given list: [4, 2, 1, 3]", "output": "using System;\n\nnamespace SortList\n{\n    class Program\n    {\n        public static void Main()\n        {\n            int[] array = new int[] { 4, 2, 1, 3 };\n\n            int n = array.Length;\n            bool swapped;\n\n            do\n            {\n                swapped = false;\n                for (int i = 0; i < n - 1; i++)\n                {\n                    if (array[i] > array[i + 1])\n                    {\n                        // swap elements\n                        int temp = array[i];\n                        array[i] = array[i + 1];\n                        array[i + 1] = temp;\n                        swapped = true;\n                    }\n                }\n            }\n            while (swapped == true);\n\n            Console.WriteLine(\"Sorted list:\");\n            foreach (int num in array)\n            {\n                Console.Write(num + \" \");\n            }\n            Console.WriteLine();\n\n        }\n    }\n}"}
{"text": "<s>[INST] Create a program to find the most repeated character in an input string. here are the inputs def most_repeated(s): \n    d = dict() \n    count = 0\n  \n    for i in s: \n        if i in d.keys(): \n            d[i] += 1\n        else: \n            d[i] = 1\n      \n    # d.items() returns a list of (key, value) \n    character, frequency = max(d.items(), key = lambda x: x[1]) \n  \n    print(character, frequency ) [/INST] \\n  </s>", "instruction": "Create a program to find the most repeated character in an input string.", "input": "", "output": "def most_repeated(s): \n    d = dict() \n    count = 0\n  \n    for i in s: \n        if i in d.keys(): \n            d[i] += 1\n        else: \n            d[i] = 1\n      \n    # d.items() returns a list of (key, value) \n    character, frequency = max(d.items(), key = lambda x: x[1]) \n  \n    print(character, frequency )"}
{"text": "<s>[INST] Construct a JavaScript function to validate a given password using regular expression. here are the inputs function isValidPassword(password) {\n  return /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/.test(password);\n}\n\nconsole.log(isValidPassword(\"P@ssw0rd\")); // true [/INST] \\n \"P@ssw0rd\" (Password to be validated) </s>", "instruction": "Construct a JavaScript function to validate a given password using regular expression.", "input": "\"P@ssw0rd\" (Password to be validated)", "output": "function isValidPassword(password) {\n  return /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/.test(password);\n}\n\nconsole.log(isValidPassword(\"P@ssw0rd\")); // true"}
{"text": "<s>[INST] Write a C++ code to sort a vector of integers using Bubble Sort. here are the inputs void bubbleSort(vector<int> &num) { \n    int i, j, temp; \n    int size = num.size();\n    \n    for (i = 0; i < size-1; i++) {     \n \n        for (j = 0; j < size-i-1; j++) {  \n            if (num[j] > num[j+1]) { \n                temp = num[j]; \n                num[j] = num[j+1]; \n                num[j+1] = temp; \n            } \n        } \n    } \n} \n  \nint main() { \n    vector<int> myVector = {2, 3, 1, 8, 4, 5, 6}; \n\n    bubbleSort(myVector); \n  \n    for (int i=0; i < myVector.size(); i++) \n    cout << myVector[i] << \" \"; \n    cout << endl; \n  \n    return 0; \n} [/INST] \\n vector<int> myVector = {2, 3, 1, 8, 4, 5, 6}; </s>", "instruction": "Write a C++ code to sort a vector of integers using Bubble Sort.", "input": "vector<int> myVector = {2, 3, 1, 8, 4, 5, 6};", "output": "void bubbleSort(vector<int> &num) { \n    int i, j, temp; \n    int size = num.size();\n    \n    for (i = 0; i < size-1; i++) {     \n \n        for (j = 0; j < size-i-1; j++) {  \n            if (num[j] > num[j+1]) { \n                temp = num[j]; \n                num[j] = num[j+1]; \n                num[j+1] = temp; \n            } \n        } \n    } \n} \n  \nint main() { \n    vector<int> myVector = {2, 3, 1, 8, 4, 5, 6}; \n\n    bubbleSort(myVector); \n  \n    for (int i=0; i < myVector.size(); i++) \n    cout << myVector[i] << \" \"; \n    cout << endl; \n  \n    return 0; \n}"}
{"text": "<s>[INST] Create a function in JavaScript that takes in two lists and returns a single, flattened list. here are the inputs const flatten = (list1, list2) => {\n let result = [];\n list1.forEach(el => {\n result.push(el);\n });\n list2.forEach(el => {\n result.push(el);\n });\n\n return result;\n}\n\nlet list1 = [1, 2, 3];\nlet list2 = [4, 5, 6];\n\nlet flattenedList = flatten(list1, list2); // flattenedList = [1, 2, 3, 4, 5, 6] [/INST] \\n The two lists are [1, 2, 3] and [4, 5, 6]. </s>", "instruction": "Create a function in JavaScript that takes in two lists and returns a single, flattened list.", "input": "The two lists are [1, 2, 3] and [4, 5, 6].", "output": "const flatten = (list1, list2) => {\n let result = [];\n list1.forEach(el => {\n result.push(el);\n });\n list2.forEach(el => {\n result.push(el);\n });\n\n return result;\n}\n\nlet list1 = [1, 2, 3];\nlet list2 = [4, 5, 6];\n\nlet flattenedList = flatten(list1, list2); // flattenedList = [1, 2, 3, 4, 5, 6]"}
{"text": "<s>[INST] Create a website for displaying an online catalogue of books. The website should have pages for listing all books, displaying details of a particular book and allowing users to search for books. here are the inputs <html>\n <head>\n  <title>Book Catalogue</title>\n  <link rel='stylesheet' type='text/css' href='styles.css' />\n </head>\n <body>\n  <h1>Book Catalog</h1>\n  <div id=\"main\">\n   <!--List of Books-->\n   <div id=\"book-list\">\n    <h2>Book List</h2>\n    <ul>\n     <li><a href=\"#book1\">Book 1</a></li>\n     <li><a href=\"#book2\">Book 2</a></li>\n     <li><a href=\"#book3\">Book 3</a></li>\n    </ul>\n   </div>\n   <!--Individual Book Details-->\n   <div id=\"book-details\">\n    <h2>Book Details</h2>\n    <div id=\"book1\">\n     <h3>Book 1</h3>\n     <p>Book 1 details..... </p>\n    </div>\n    <div id=\"book2\">\n     <h3>Book 2</h3>\n     <p>Book 2 details..... </p>\n    </div>\n    <div id=\"book3\">\n     <h3>Book 3</h3>\n     <p>Book 3 details..... </p>\n    </div>\n   </div>\n   <!--Search Box-->\n   <div id=\"book-search\">\n    <h2>Book Search</h2>\n    <form>\n     <input type=\"text\" name=\"title\" />\n     <input type=\"submit\" value=\"Search\" />\n    </form>\n   </div>\n  </div>\n </body>\n</html> [/INST] \\n Not applicable </s>", "instruction": "Create a website for displaying an online catalogue of books. The website should have pages for listing all books, displaying details of a particular book and allowing users to search for books.", "input": "Not applicable", "output": "<html>\n <head>\n  <title>Book Catalogue</title>\n  <link rel='stylesheet' type='text/css' href='styles.css' />\n </head>\n <body>\n  <h1>Book Catalog</h1>\n  <div id=\"main\">\n   <!--List of Books-->\n   <div id=\"book-list\">\n    <h2>Book List</h2>\n    <ul>\n     <li><a href=\"#book1\">Book 1</a></li>\n     <li><a href=\"#book2\">Book 2</a></li>\n     <li><a href=\"#book3\">Book 3</a></li>\n    </ul>\n   </div>\n   <!--Individual Book Details-->\n   <div id=\"book-details\">\n    <h2>Book Details</h2>\n    <div id=\"book1\">\n     <h3>Book 1</h3>\n     <p>Book 1 details..... </p>\n    </div>\n    <div id=\"book2\">\n     <h3>Book 2</h3>\n     <p>Book 2 details..... </p>\n    </div>\n    <div id=\"book3\">\n     <h3>Book 3</h3>\n     <p>Book 3 details..... </p>\n    </div>\n   </div>\n   <!--Search Box-->\n   <div id=\"book-search\">\n    <h2>Book Search</h2>\n    <form>\n     <input type=\"text\" name=\"title\" />\n     <input type=\"submit\" value=\"Search\" />\n    </form>\n   </div>\n  </div>\n </body>\n</html>"}
{"text": "<s>[INST] Create a function in Java that takes an integer as an argument and counts the number of bits that are set to 1. here are the inputs public static int countBits(int num) {  \n  int count = 0;  \n  while(num > 0) {\n    count += num & 1; \n    num >>= 1;\n  }\n  return count;\n} [/INST] \\n 12 </s>", "instruction": "Create a function in Java that takes an integer as an argument and counts the number of bits that are set to 1.", "input": "12", "output": "public static int countBits(int num) {  \n  int count = 0;  \n  while(num > 0) {\n    count += num & 1; \n    num >>= 1;\n  }\n  return count;\n}"}
{"text": "<s>[INST] Identify the language of a given piece of text. here are the inputs import langdetect\n\ndef detect_language(text):\n    language = langdetect.detect(text)\n    print(\"Detected language: \", language)\n\ndetect_language(text) [/INST] \\n text = \"Salut tous, comment \u00e7a va ?\" </s>", "instruction": "Identify the language of a given piece of text.", "input": "text = \"Salut tous, comment \u00e7a va ?\"", "output": "import langdetect\n\ndef detect_language(text):\n    language = langdetect.detect(text)\n    print(\"Detected language: \", language)\n\ndetect_language(text)"}
{"text": "<s>[INST] Create a for loop in Python to iterate over a list of numbers and print only the even numbers. here are the inputs for num in my_list:\n    if num % 2 == 0:\n        print(num) [/INST] \\n my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] </s>", "instruction": "Create a for loop in Python to iterate over a list of numbers and print only the even numbers.", "input": "my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "output": "for num in my_list:\n    if num % 2 == 0:\n        print(num)"}
{"text": "<s>[INST] Write a SQL query to find the most recent customer transactions. here are the inputs SELECT  *\nFROM    customer_transactions\nORDER   BY transaction_date DESC \nLIMIT   1; [/INST] \\n  </s>", "instruction": "Write a SQL query to find the most recent customer transactions.", "input": "", "output": "SELECT  *\nFROM    customer_transactions\nORDER   BY transaction_date DESC \nLIMIT   1;"}
{"text": "<s>[INST] Can you suggest a pure python alternative to declaring a Float32 array with numbers from 0 to 10? here are the inputs myArray = [float(i) for i in range(0,11)] [/INST] \\n  </s>", "instruction": "Can you suggest a pure python alternative to declaring a Float32 array with numbers from 0 to 10?", "input": "", "output": "myArray = [float(i) for i in range(0,11)]"}
{"text": "<s>[INST] Construct a neural network model in Python to classify the MNIST data set correctly. here are the inputs import keras\n\n# Input layer\ninput_layer = keras.layers.Input(shape=(784,))\n\n# Hidden layer\nhidden_layer = keras.layers.Dense(128, \n                activation='relu')(input_layer)\n\n# Output layer\noutput_layer = keras.layers.Dense(10, \n                activation='softmax')(hidden_layer)\n\n# Model\nmodel = keras.Model(inputs=input_layer, outputs=output_layer)\n\n# Compile model\nmodel.compile(optimizer='adam', \n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy']) [/INST] \\n  </s>", "instruction": "Construct a neural network model in Python to classify the MNIST data set correctly.", "input": "", "output": "import keras\n\n# Input layer\ninput_layer = keras.layers.Input(shape=(784,))\n\n# Hidden layer\nhidden_layer = keras.layers.Dense(128, \n                activation='relu')(input_layer)\n\n# Output layer\noutput_layer = keras.layers.Dense(10, \n                activation='softmax')(hidden_layer)\n\n# Model\nmodel = keras.Model(inputs=input_layer, outputs=output_layer)\n\n# Compile model\nmodel.compile(optimizer='adam', \n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])"}
{"text": "<s>[INST] Produce a function that takes two strings, takes the string with the longest length and swaps it with the other. here are the inputs def swap_strings(string1, string2): \n    # If string1 is the longest\n    if len(string1) > len(string2): \n        # Swap strings\n        temp = string1 \n        string1 = string2 \n        string2 = temp \n    return string1, string2 [/INST] \\n string1 = \"hello\"\nstring2 = \"world\" </s>", "instruction": "Produce a function that takes two strings, takes the string with the longest length and swaps it with the other.", "input": "string1 = \"hello\"\nstring2 = \"world\"", "output": "def swap_strings(string1, string2): \n    # If string1 is the longest\n    if len(string1) > len(string2): \n        # Swap strings\n        temp = string1 \n        string1 = string2 \n        string2 = temp \n    return string1, string2"}
{"text": "<s>[INST] Write a R code snippet to perform non-linear least squares fitting of a given data set. here are the inputs \"\"\"\nWrite a R code snippet to perform non-linear least squares fitting of a given data set.\n\"\"\"\n\nx <- c(0,1,2,3,4)\ny <- c(0,1,3,3,3)\n\nlibrary(\"minpack.lm\")\n\nfit <- nlsLM(y ~ a + b*exp(-c*x), start = list(a = 0, b = 10, c=2))\n\nprint(summary(fit)) [/INST] \\n x <- c(0,1,2,3,4)\ny <- c(0,1,3,3,3) </s>", "instruction": "Write a R code snippet to perform non-linear least squares fitting of a given data set.", "input": "x <- c(0,1,2,3,4)\ny <- c(0,1,3,3,3)", "output": "\"\"\"\nWrite a R code snippet to perform non-linear least squares fitting of a given data set.\n\"\"\"\n\nx <- c(0,1,2,3,4)\ny <- c(0,1,3,3,3)\n\nlibrary(\"minpack.lm\")\n\nfit <- nlsLM(y ~ a + b*exp(-c*x), start = list(a = 0, b = 10, c=2))\n\nprint(summary(fit))"}
{"text": "<s>[INST] Create an application in C++ to obtain the maximum depth of a given binary tree. here are the inputs int maxDepth(struct Node* node) \n{ \n    if (node == NULL) \n        return 0; \n    else\n    { \n        /* compute the depth of each subtree */\n        int lDepth = maxDepth(node->left); \n        int rDepth = maxDepth(node->right); \n  \n        /* use the larger one */\n        if (lDepth > rDepth) \n            return(lDepth + 1); \n        else return(rDepth + 1); \n    } \n} [/INST] \\n  </s>", "instruction": "Create an application in C++ to obtain the maximum depth of a given binary tree.", "input": "", "output": "int maxDepth(struct Node* node) \n{ \n    if (node == NULL) \n        return 0; \n    else\n    { \n        /* compute the depth of each subtree */\n        int lDepth = maxDepth(node->left); \n        int rDepth = maxDepth(node->right); \n  \n        /* use the larger one */\n        if (lDepth > rDepth) \n            return(lDepth + 1); \n        else return(rDepth + 1); \n    } \n}"}
{"text": "<s>[INST] Create a machine learning classifier in Python for categorizing user input. here are the inputs from sklearn.naive_bayes import MultinomialNB \n\n# Assuming an input string is passed to the function as a parameter\n\ndef classify_string(input_string):\n\n  # Feature extraction and transformation from string to numeric\n  features = . . .\n\n  # Create an instance of the classifier \n  model = MultinomialNB()\n\n  # Train the classifier on the data\n  model.fit(data, target)\n\n  # Make a prediction based on the input\n  prediction = model.predict([features])\n\n  # Return the prediction\n  return prediction [/INST] \\n  </s>", "instruction": "Create a machine learning classifier in Python for categorizing user input.", "input": "", "output": "from sklearn.naive_bayes import MultinomialNB \n\n# Assuming an input string is passed to the function as a parameter\n\ndef classify_string(input_string):\n\n  # Feature extraction and transformation from string to numeric\n  features = . . .\n\n  # Create an instance of the classifier \n  model = MultinomialNB()\n\n  # Train the classifier on the data\n  model.fit(data, target)\n\n  # Make a prediction based on the input\n  prediction = model.predict([features])\n\n  # Return the prediction\n  return prediction"}
{"text": "<s>[INST] Create a JavaScript function that takes in an array and returns an object containing the count of each element in the array. here are the inputs function countElements(arr) { \n    let obj = {}; \n    arr.forEach(function (e) { \n        if(obj[e])  \n            obj[e] +=1; \n        else\n            obj[e] =1; \n    }); \n  \n    return obj; \n} \n  \nconsole.log(countElements([1, 2, 1])); [/INST] \\n [1, 2, 1] </s>", "instruction": "Create a JavaScript function that takes in an array and returns an object containing the count of each element in the array.", "input": "[1, 2, 1]", "output": "function countElements(arr) { \n    let obj = {}; \n    arr.forEach(function (e) { \n        if(obj[e])  \n            obj[e] +=1; \n        else\n            obj[e] =1; \n    }); \n  \n    return obj; \n} \n  \nconsole.log(countElements([1, 2, 1]));"}
{"text": "<s>[INST] Implement a algorithm in Python for sorting two large lists A and B. The algorithm should take the first element of list A and compare it with the first element of list B. If it is greater, then it should add the element to the result list and move the pointer of B to the next element. If the element of A is smaller, the pointer should move to the next element of A, and so on. here are the inputs def merge_sort(A, B):\n result = [] \n i, j = 0, 0\n\n# Compare elements and add lower one to result\nwhile i < len(A) and j < len(B):\n if A[i] < B[j]:\n result.append(A[i])\n i += 1\n else:\n result.append(B[j])\n j += 1\n\n# Add remaining elements\nresult += A[i:]\nresult += B[j:]\n\nreturn result\n\n#Test the algorithm\nA = [3, 6, 8, 10, 11]\nB = [2, 5, 7, 12]\n\nprint(merge_sort(A, B))\n# Output: [2, 3, 5, 6, 7, 8, 10, 11, 12] [/INST] \\n A = [3, 6, 8, 10, 11]\nB = [2, 5, 7, 12] </s>", "instruction": "Implement a algorithm in Python for sorting two large lists A and B. The algorithm should take the first element of list A and compare it with the first element of list B. If it is greater, then it should add the element to the result list and move the pointer of B to the next element. If the element of A is smaller, the pointer should move to the next element of A, and so on.", "input": "A = [3, 6, 8, 10, 11]\nB = [2, 5, 7, 12]", "output": "def merge_sort(A, B):\n result = [] \n i, j = 0, 0\n\n# Compare elements and add lower one to result\nwhile i < len(A) and j < len(B):\n if A[i] < B[j]:\n result.append(A[i])\n i += 1\n else:\n result.append(B[j])\n j += 1\n\n# Add remaining elements\nresult += A[i:]\nresult += B[j:]\n\nreturn result\n\n#Test the algorithm\nA = [3, 6, 8, 10, 11]\nB = [2, 5, 7, 12]\n\nprint(merge_sort(A, B))\n# Output: [2, 3, 5, 6, 7, 8, 10, 11, 12]"}
{"text": "<s>[INST] Create a function in Rust that sums the digits of a given integer. here are the inputs pub fn sum_digits(n: i32) -> i32 {\n    let mut sum = 0;\n    let mut n = n;\n\n    while n > 0 {\n        sum += n % 10;\n        n = n / 10;\n    }\n    sum\n} [/INST] \\n  </s>", "instruction": "Create a function in Rust that sums the digits of a given integer.", "input": "", "output": "pub fn sum_digits(n: i32) -> i32 {\n    let mut sum = 0;\n    let mut n = n;\n\n    while n > 0 {\n        sum += n % 10;\n        n = n / 10;\n    }\n    sum\n}"}
{"text": "<s>[INST] Create an algorithm to search for a given item in a sorted array using binary search. here are the inputs function binarySearch(numbers, item) {\n let left = 0;\n let right = numbers.length-1;\n\n while (left <= right) {\n let mid = Math.floor((left + right) / 2);\n let guess = numbers[mid];\n if (guess == item) {\n return mid;\n }\n if (guess > item) {\n right = mid - 1;\n } else {\n left = mid + 1;\n }\n }\n return null;\n}\n\nlet numbers = [1, 3, 5, 7, 9];\nlet item = 7;\n\nlet index = binarySearch(numbers, item);\nconsole.log(index); [/INST] \\n numbers = [1, 3, 5, 7, 9]\nitem = 7 </s>", "instruction": "Create an algorithm to search for a given item in a sorted array using binary search.", "input": "numbers = [1, 3, 5, 7, 9]\nitem = 7", "output": "function binarySearch(numbers, item) {\n let left = 0;\n let right = numbers.length-1;\n\n while (left <= right) {\n let mid = Math.floor((left + right) / 2);\n let guess = numbers[mid];\n if (guess == item) {\n return mid;\n }\n if (guess > item) {\n right = mid - 1;\n } else {\n left = mid + 1;\n }\n }\n return null;\n}\n\nlet numbers = [1, 3, 5, 7, 9];\nlet item = 7;\n\nlet index = binarySearch(numbers, item);\nconsole.log(index);"}
{"text": "<s>[INST] Create a program to generate a random name based on a given list of first and last names here are the inputs import random\n\ndef generate_random_name(first_names, last_names):\n    first_name = random.choice(first_names)\n    last_name = random.choice(last_names)\n    return first_name, last_name [/INST] \\n first_names = ['John', 'Jane', 'Jack', 'Jill']\nlast_names = ['Smith', 'Johnson', 'Williams', 'Jones'] </s>", "instruction": "Create a program to generate a random name based on a given list of first and last names", "input": "first_names = ['John', 'Jane', 'Jack', 'Jill']\nlast_names = ['Smith', 'Johnson', 'Williams', 'Jones']", "output": "import random\n\ndef generate_random_name(first_names, last_names):\n    first_name = random.choice(first_names)\n    last_name = random.choice(last_names)\n    return first_name, last_name"}
{"text": "<s>[INST] Create a MySQL database with two tables - \u2018users\u2019 and \u2018items\u2019. Users table should have columns for name, email, and age. Items table should have columns for item name, item type, quantity, and status. here are the inputs CREATE DATABASE myapp;\n\nUSE myapp;\n\nCREATE TABLE users (\n id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n name VARCHAR(255) NOT NULL,\n email VARCHAR(255) NOT NULL,\n age INT NOT NULL\n);\n\nCREATE TABLE items (\n id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n item_name VARCHAR(255) NOT NULL,\n item_type VARCHAR(255) NOT NULL,\n quantity INT NOT NULL,\n status VARCHAR(255) NOT NULL\n); [/INST] \\n Not applicable </s>", "instruction": "Create a MySQL database with two tables - \u2018users\u2019 and \u2018items\u2019. Users table should have columns for name, email, and age. Items table should have columns for item name, item type, quantity, and status.", "input": "Not applicable", "output": "CREATE DATABASE myapp;\n\nUSE myapp;\n\nCREATE TABLE users (\n id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n name VARCHAR(255) NOT NULL,\n email VARCHAR(255) NOT NULL,\n age INT NOT NULL\n);\n\nCREATE TABLE items (\n id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n item_name VARCHAR(255) NOT NULL,\n item_type VARCHAR(255) NOT NULL,\n quantity INT NOT NULL,\n status VARCHAR(255) NOT NULL\n);"}
{"text": "<s>[INST] Create a REST API that can retrieve a list of diagonstic codes for a given condition. here are the inputs from flask import Flask, request\nfrom flask_restful import Resource, Api\nimport json\n\n#  Create the flask app\napp = Flask(__name__)\napi = Api(app)\n\n# create dictionary of diagonsis codes\ncodes = {\n    'cancer': ['A123', 'B111', 'C999'],\n    'diabetes': ['D456', 'E222', 'F888']\n}\n\n# Create the REST end point\nclass DiagnosticCodes(Resource):\n    def get(self, condition):\n        return codes.get(condition, [])\n\n# Add the resource to the api\napi.add_resource(DiagnosticCodes, '/codes/<string:condition>')\n\nif __name__ == '__main__':\n    app.run(debug=True) [/INST] \\n  </s>", "instruction": "Create a REST API that can retrieve a list of diagonstic codes for a given condition.", "input": "", "output": "from flask import Flask, request\nfrom flask_restful import Resource, Api\nimport json\n\n#  Create the flask app\napp = Flask(__name__)\napi = Api(app)\n\n# create dictionary of diagonsis codes\ncodes = {\n    'cancer': ['A123', 'B111', 'C999'],\n    'diabetes': ['D456', 'E222', 'F888']\n}\n\n# Create the REST end point\nclass DiagnosticCodes(Resource):\n    def get(self, condition):\n        return codes.get(condition, [])\n\n# Add the resource to the api\napi.add_resource(DiagnosticCodes, '/codes/<string:condition>')\n\nif __name__ == '__main__':\n    app.run(debug=True)"}
{"text": "<s>[INST] Create a SQL query that returns the sum of all customer orders in a given year. here are the inputs SELECT SUM(order_amount)\nFROM orders\nWHERE YEAR(order_date) = 2020; [/INST] \\n  </s>", "instruction": "Create a SQL query that returns the sum of all customer orders in a given year.", "input": "", "output": "SELECT SUM(order_amount)\nFROM orders\nWHERE YEAR(order_date) = 2020;"}
{"text": "<s>[INST] Develop a program in Python for finding the longest common subsequence between two strings. here are the inputs def longest_common_subsequence(string1, string2):\n    table = [[0]*(len(string2)+1) for _ in range(len(string1)+1)]\n\n    for i, x in enumerate(string1):\n        for j, y in enumerate(string2):\n            if x == y:\n                table[i+1][j+1] = table[i][j]+1\n            else:\n                table[i+1][j+1] = max(table[i+1][j], table[i][j+1])\n\n    result = \"\"\n    x, y = len(string1), len(string2)\n    while x != 0 and y != 0:\n        if table[x][y] == table[x-1][y]:\n            x -= 1\n        elif table[x][y] == table[x][y-1]:\n            y -= 1\n        else:\n            result = string1[x-1] + result\n            x -= 1\n            y -= 1\n    return result\n\nresult = longest_common_subsequence(\"ABCDF\", \"ABECD\")\nprint(result) [/INST] \\n \"ABCDF\", \"ABECD\" </s>", "instruction": "Develop a program in Python for finding the longest common subsequence between two strings.", "input": "\"ABCDF\", \"ABECD\"", "output": "def longest_common_subsequence(string1, string2):\n    table = [[0]*(len(string2)+1) for _ in range(len(string1)+1)]\n\n    for i, x in enumerate(string1):\n        for j, y in enumerate(string2):\n            if x == y:\n                table[i+1][j+1] = table[i][j]+1\n            else:\n                table[i+1][j+1] = max(table[i+1][j], table[i][j+1])\n\n    result = \"\"\n    x, y = len(string1), len(string2)\n    while x != 0 and y != 0:\n        if table[x][y] == table[x-1][y]:\n            x -= 1\n        elif table[x][y] == table[x][y-1]:\n            y -= 1\n        else:\n            result = string1[x-1] + result\n            x -= 1\n            y -= 1\n    return result\n\nresult = longest_common_subsequence(\"ABCDF\", \"ABECD\")\nprint(result)"}
{"text": "<s>[INST] Write a C++ code snippet to generate a shorthand alias from a string. here are the inputs // create the shorthand of the string \nstring alias = \"\"; \nfor (char c : string) \n{ \n    if (isalpha(c))\n        alias += c; \n} \n// print alias \ncout << alias; \n// Output: MnisJD [/INST] \\n string = \"My name is John Doe\" </s>", "instruction": "Write a C++ code snippet to generate a shorthand alias from a string.", "input": "string = \"My name is John Doe\"", "output": "// create the shorthand of the string \nstring alias = \"\"; \nfor (char c : string) \n{ \n    if (isalpha(c))\n        alias += c; \n} \n// print alias \ncout << alias; \n// Output: MnisJD"}
{"text": "<s>[INST] Create a program to construct the following pattern from user input:\n\n*\n**\n***\n****\n***** here are the inputs #include <iostream> \nusing namespace std; \n\nint main() \n{ \n    int n;\n    cin>>n;\n    \n    for (int i = 0; i < n; i++)  \n    {  \n        // Print i+1 stars \n        for (int j = 0; j <= i; j++)  \n            cout << \"*\";  \n  \n        cout << endl; \n    }   \n    return 0;\n} [/INST] \\n 5 </s>", "instruction": "Create a program to construct the following pattern from user input:\n\n*\n**\n***\n****\n*****", "input": "5", "output": "#include <iostream> \nusing namespace std; \n\nint main() \n{ \n    int n;\n    cin>>n;\n    \n    for (int i = 0; i < n; i++)  \n    {  \n        // Print i+1 stars \n        for (int j = 0; j <= i; j++)  \n            cout << \"*\";  \n  \n        cout << endl; \n    }   \n    return 0;\n}"}
{"text": "<s>[INST] Generate a PHP code that fetches data from a MySQL database and displays it in an HTML table. here are the inputs <?php\n$mysql = new mysqli(\"localhost\", \"user\", \"password\", \"database\");\n\nif ($mysql->connect_errno) {\n    echo \"Failed to connect to MySQL\";\n    exit;\n}\n\n$results = $mysql->query(\"SELECT * FROM table\");\n\necho \"<table>\";\n\nwhile ($row = $results->fetch_assoc()) {\n    echo \"<tr>\";\n    echo \"<td>\" . $row[\"column1\"] . \"</td>\";\n    echo \"<td>\" . $row[\"column2\"] . \"</td>\";\n    echo \"<td>\" . $row[\"column3\"] . \"</td>\";\n    echo \"</tr>\";\n}\n\necho \"</table>\";\n?> [/INST] \\n Not applicable </s>", "instruction": "Generate a PHP code that fetches data from a MySQL database and displays it in an HTML table.", "input": "Not applicable", "output": "<?php\n$mysql = new mysqli(\"localhost\", \"user\", \"password\", \"database\");\n\nif ($mysql->connect_errno) {\n    echo \"Failed to connect to MySQL\";\n    exit;\n}\n\n$results = $mysql->query(\"SELECT * FROM table\");\n\necho \"<table>\";\n\nwhile ($row = $results->fetch_assoc()) {\n    echo \"<tr>\";\n    echo \"<td>\" . $row[\"column1\"] . \"</td>\";\n    echo \"<td>\" . $row[\"column2\"] . \"</td>\";\n    echo \"<td>\" . $row[\"column3\"] . \"</td>\";\n    echo \"</tr>\";\n}\n\necho \"</table>\";\n?>"}
{"text": "<s>[INST] Create a HTML webpage that displays a form with three text fields. here are the inputs <html>\n    <head>\n        <title>Simple Form</title>\n    </head>\n    <body>\n        <form>\n            <label>Name: <input type=\"text\" name=\"name\"/></label><br>\n            <label>Email: <input type=\"text\" name=\"email\"/></label><br>\n            <label>Telephone: <input type=\"text\" name=\"telephone\"/></label><br>\n            <input type=\"submit\" value=\"Submit\"/>\n        </form>\n    </body>\n</html> [/INST] \\n  </s>", "instruction": "Create a HTML webpage that displays a form with three text fields.", "input": "", "output": "<html>\n    <head>\n        <title>Simple Form</title>\n    </head>\n    <body>\n        <form>\n            <label>Name: <input type=\"text\" name=\"name\"/></label><br>\n            <label>Email: <input type=\"text\" name=\"email\"/></label><br>\n            <label>Telephone: <input type=\"text\" name=\"telephone\"/></label><br>\n            <input type=\"submit\" value=\"Submit\"/>\n        </form>\n    </body>\n</html>"}
{"text": "<s>[INST] Create a React application for searching through a list of products. The user should be able to select a product to view more details about it. here are the inputs import React, { useState, useEffect } from 'react';\n\nconst products = [\n {\n name: 'Product 1',\n category: 'Category 1',\n description: 'This is an example product.',\n price: 19.99\n },\n {\n name: 'Product 2',\n category: 'Category 2',\n description: 'This is another example product.',\n price: 29.99\n },\n {\n name: 'Product 3',\n category: 'Category 1',\n description: 'This is yet another example product.',\n price: 39.99\n }\n];\n\nfunction App() {\n const [search, setSearch] = useState('');\n const [selectedProduct, setSelectedProduct] = useState(null);\n const [filteredProducts, setFilteredProducts] = useState(products);\n\n useEffect(() => {\n const filterProducts = products.filter(product => {\n return product.name.toLowerCase().indexOf(search.toLowerCase()) !== -1;\n });\n setFilteredProducts(filterProducts);\n }, [search]);\n\n return (\n <div>\n <input\n value={search}\n onChange={e => setSearch(e.target.value)}\n placeholder=\"Search products\"\n />\n <ul>\n {filteredProducts.map(product => (\n <li\n key={product.name}\n onClick={() => setSelectedProduct(product)}\n >\n {product.name}\n </li>\n ))}\n </ul>\n {selectedProduct && (\n <div>\n <h2>{selectedProduct.name}</h2>\n <p>{selectedProduct.description}</p>\n <p>Category: {selectedProduct.category}</p>\n <p>Price: {selectedProduct.price}</p>\n </div>\n )}\n </div>\n );\n}\n\nexport default App; [/INST] \\n Not applicable </s>", "instruction": "Create a React application for searching through a list of products. The user should be able to select a product to view more details about it.", "input": "Not applicable", "output": "import React, { useState, useEffect } from 'react';\n\nconst products = [\n {\n name: 'Product 1',\n category: 'Category 1',\n description: 'This is an example product.',\n price: 19.99\n },\n {\n name: 'Product 2',\n category: 'Category 2',\n description: 'This is another example product.',\n price: 29.99\n },\n {\n name: 'Product 3',\n category: 'Category 1',\n description: 'This is yet another example product.',\n price: 39.99\n }\n];\n\nfunction App() {\n const [search, setSearch] = useState('');\n const [selectedProduct, setSelectedProduct] = useState(null);\n const [filteredProducts, setFilteredProducts] = useState(products);\n\n useEffect(() => {\n const filterProducts = products.filter(product => {\n return product.name.toLowerCase().indexOf(search.toLowerCase()) !== -1;\n });\n setFilteredProducts(filterProducts);\n }, [search]);\n\n return (\n <div>\n <input\n value={search}\n onChange={e => setSearch(e.target.value)}\n placeholder=\"Search products\"\n />\n <ul>\n {filteredProducts.map(product => (\n <li\n key={product.name}\n onClick={() => setSelectedProduct(product)}\n >\n {product.name}\n </li>\n ))}\n </ul>\n {selectedProduct && (\n <div>\n <h2>{selectedProduct.name}</h2>\n <p>{selectedProduct.description}</p>\n <p>Category: {selectedProduct.category}</p>\n <p>Price: {selectedProduct.price}</p>\n </div>\n )}\n </div>\n );\n}\n\nexport default App;"}
{"text": "<s>[INST] Generate a Jupyter Notebook cell to implement a Machine Learning algorithm. here are the inputs # import necessary packages\nfrom sklearn.linear_model import LinearRegression\n\n# define the model\nmodel = LinearRegression()\n\n# fit the model to the data\nmodel.fit(X_train, y_train)\n\n# evaluate the model\nscore = model.score(X_test, y_test)\n\nprint(f\"Model score: {score:.2f}\") [/INST] \\n Not applicable </s>", "instruction": "Generate a Jupyter Notebook cell to implement a Machine Learning algorithm.", "input": "Not applicable", "output": "# import necessary packages\nfrom sklearn.linear_model import LinearRegression\n\n# define the model\nmodel = LinearRegression()\n\n# fit the model to the data\nmodel.fit(X_train, y_train)\n\n# evaluate the model\nscore = model.score(X_test, y_test)\n\nprint(f\"Model score: {score:.2f}\")"}
{"text": "<s>[INST] Convert a given Python program to a C# program. here are the inputs public int Power(int x, int y)\n{\n    if (y == 0)\n    {\n        return 1;\n    }\n    else\n    {\n        return x * Power(x, y - 1);\n    }\n} [/INST] \\n def power(x, y):\n    if y == 0:\n        return 1\n    else:\n        return x * power(x, y - 1) </s>", "instruction": "Convert a given Python program to a C# program.", "input": "def power(x, y):\n    if y == 0:\n        return 1\n    else:\n        return x * power(x, y - 1)", "output": "public int Power(int x, int y)\n{\n    if (y == 0)\n    {\n        return 1;\n    }\n    else\n    {\n        return x * Power(x, y - 1);\n    }\n}"}
{"text": "<s>[INST] Output a code to print out the indexes of all occurrences of a given element in a given list. here are the inputs def all_occurrences(list, element):\n    result = []\n    for i in range(0, len(list)):\n        if element == list[i]:\n            result.append(i)\n    return result [/INST] \\n  </s>", "instruction": "Output a code to print out the indexes of all occurrences of a given element in a given list.", "input": "", "output": "def all_occurrences(list, element):\n    result = []\n    for i in range(0, len(list)):\n        if element == list[i]:\n            result.append(i)\n    return result"}
{"text": "<s>[INST] Create a program to classify a triangle based on its sides. here are the inputs def classify_triangle(side1, side2, side3):\n    if side1 == side2 and side2 == side3:\n        return \"Equilateral Triangle\"\n    elif side1 == side2 or side2 == side3 or side1 == side3:\n        return \"Isosceles Triangle\"\n    else:\n        return \"Scalene Triangle\" [/INST] \\n  </s>", "instruction": "Create a program to classify a triangle based on its sides.", "input": "", "output": "def classify_triangle(side1, side2, side3):\n    if side1 == side2 and side2 == side3:\n        return \"Equilateral Triangle\"\n    elif side1 == side2 or side2 == side3 or side1 == side3:\n        return \"Isosceles Triangle\"\n    else:\n        return \"Scalene Triangle\""}
{"text": "<s>[INST] Create a Java program for validating credit card numbers. here are the inputs public class CreditCardValidator {\n \n public static boolean validate(String creditCardNumber) {\n  int sum = 0;\n  boolean alternate = false;\n  for (int i = creditCardNumber.length() - 1; i >= 0; i--) {\n  int n = Integer.parseInt(creditCardNumber.substring(i, i + 1));\n  if (alternate) {\n   n *= 2;\n   if (n > 9) {\n    n = (n % 10) + 1;\n   }\n  }\n  sum += n;\n  alternate = !alternate;\n  }\n  return (sum % 10 == 0);\n }\n} [/INST] \\n Not applicable </s>", "instruction": "Create a Java program for validating credit card numbers.", "input": "Not applicable", "output": "public class CreditCardValidator {\n \n public static boolean validate(String creditCardNumber) {\n  int sum = 0;\n  boolean alternate = false;\n  for (int i = creditCardNumber.length() - 1; i >= 0; i--) {\n  int n = Integer.parseInt(creditCardNumber.substring(i, i + 1));\n  if (alternate) {\n   n *= 2;\n   if (n > 9) {\n    n = (n % 10) + 1;\n   }\n  }\n  sum += n;\n  alternate = !alternate;\n  }\n  return (sum % 10 == 0);\n }\n}"}
{"text": "<s>[INST] Create a C++ program to reverse a string without using a built-in string library function. here are the inputs #include<iostream>\nusing namespace std;\n\nstring reverseString(string str) { \n    int n = str.length(); \n  \n    // Swap character starting from two \n    // corners \n    for (int i = 0; i < n / 2; i++) \n        swap(str[i], str[n - i - 1]); \n  \n    return str; \n} \n  \n// Driver code \nint main() \n{ \n    string str = \"Geeks For Geeks\"; \n    cout << reverseString(str); \n  \n    return 0; \n} [/INST] \\n  </s>", "instruction": "Create a C++ program to reverse a string without using a built-in string library function.", "input": "", "output": "#include<iostream>\nusing namespace std;\n\nstring reverseString(string str) { \n    int n = str.length(); \n  \n    // Swap character starting from two \n    // corners \n    for (int i = 0; i < n / 2; i++) \n        swap(str[i], str[n - i - 1]); \n  \n    return str; \n} \n  \n// Driver code \nint main() \n{ \n    string str = \"Geeks For Geeks\"; \n    cout << reverseString(str); \n  \n    return 0; \n}"}
{"text": "<s>[INST] Write a JavaScript program which will print out a random sentence. here are the inputs const adjectives = [\"big\",\"small\",\"tall\",\"dark\",\"light\",\"fast\",\"slow\",\"powerful\",\"weak\",\"happy\",\"sad\"];\nconst nouns = [\"cat\",\"dog\",\"monkey\",\"elephant\",\"pigeon\",\"sea lion\",\"dolphin\",\"lizard\",\"whale\",\"dragon\"];\n \nlet randomAdjective = adjectives[Math.floor(Math.random() * adjectives.length)];\nlet randomNoun = nouns[Math.floor(Math.random() * nouns.length)];\n \nconsole.log(`The ${randomAdjective} ${randomNoun} ran away.`); [/INST] \\n  </s>", "instruction": "Write a JavaScript program which will print out a random sentence.", "input": "", "output": "const adjectives = [\"big\",\"small\",\"tall\",\"dark\",\"light\",\"fast\",\"slow\",\"powerful\",\"weak\",\"happy\",\"sad\"];\nconst nouns = [\"cat\",\"dog\",\"monkey\",\"elephant\",\"pigeon\",\"sea lion\",\"dolphin\",\"lizard\",\"whale\",\"dragon\"];\n \nlet randomAdjective = adjectives[Math.floor(Math.random() * adjectives.length)];\nlet randomNoun = nouns[Math.floor(Math.random() * nouns.length)];\n \nconsole.log(`The ${randomAdjective} ${randomNoun} ran away.`);"}
{"text": "<s>[INST] Write an SQL query to select the top three records from the table named 'Customers' based on their 'Total_Spend' amount from highest to lowest. here are the inputs SELECT * FROM Customers ORDER BY Total_Spend DESC LIMIT 3; [/INST] \\n  </s>", "instruction": "Write an SQL query to select the top three records from the table named 'Customers' based on their 'Total_Spend' amount from highest to lowest.", "input": "", "output": "SELECT * FROM Customers ORDER BY Total_Spend DESC LIMIT 3;"}
{"text": "<s>[INST] Create a neural network classifier for breast cancer. here are the inputs import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\nclass BreastCancerClassifier(object):\n    \n    def __init__(self, input_dim, output_dim, hidden_layers):\n        self.input_dim = input_dim\n        self.output_dim = output_dim\n        self.hidden_layers = hidden_layers\n        \n        self.model = self.create_model()\n\n    def create_model(self):\n        model = Sequential()\n        # Input layer\n        model.add(Dense(self.input_dim, activation=\"relu\", input_dim=self.input_dim))\n    \n        # Hidden layers\n        for num_neurons in self.hidden_layers:\n            model.add(Dense(num_neurons, activation=\"relu\"))\n\n        # Output layer \n        model.add(Dense(self.output_dim, activation=\"sigmoid\"))\n\n        model.compile(loss=\"binary_crossentropy\",\n            optimizer=\"adam\", metrics=[\"accuracy\"])\n\n        return model [/INST] \\n  </s>", "instruction": "Create a neural network classifier for breast cancer.", "input": "", "output": "import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\nclass BreastCancerClassifier(object):\n    \n    def __init__(self, input_dim, output_dim, hidden_layers):\n        self.input_dim = input_dim\n        self.output_dim = output_dim\n        self.hidden_layers = hidden_layers\n        \n        self.model = self.create_model()\n\n    def create_model(self):\n        model = Sequential()\n        # Input layer\n        model.add(Dense(self.input_dim, activation=\"relu\", input_dim=self.input_dim))\n    \n        # Hidden layers\n        for num_neurons in self.hidden_layers:\n            model.add(Dense(num_neurons, activation=\"relu\"))\n\n        # Output layer \n        model.add(Dense(self.output_dim, activation=\"sigmoid\"))\n\n        model.compile(loss=\"binary_crossentropy\",\n            optimizer=\"adam\", metrics=[\"accuracy\"])\n\n        return model"}
{"text": "<s>[INST] Create an algorithm to optimize a given program for speed. here are the inputs def optimize_for_speed(program):\n # Identify operation performed in the given program\n operations = analyze_operations(program)\n\n # Optimize each operations to improve the speed\n for o in operations:\n  optimized_op = optimize_operation(o)\n\n # Replace the old operations with the new optimized operations\n optimized_program = replace_operations(program, operations, optimized_op)\n \n return optimized_program [/INST] \\n  </s>", "instruction": "Create an algorithm to optimize a given program for speed.", "input": "", "output": "def optimize_for_speed(program):\n # Identify operation performed in the given program\n operations = analyze_operations(program)\n\n # Optimize each operations to improve the speed\n for o in operations:\n  optimized_op = optimize_operation(o)\n\n # Replace the old operations with the new optimized operations\n optimized_program = replace_operations(program, operations, optimized_op)\n \n return optimized_program"}
{"text": "<s>[INST] Rewrite the following code in a different programming language. here are the inputs # Python code\narr = [1, 2, 3, 4, 5]\n\nfor item in arr:\n print(item * 2) [/INST] \\n // JavaScript code\nlet arr = [1, 2, 3, 4, 5];\n\narr.forEach(item => {\n console.log(item * 2);\n}); </s>", "instruction": "Rewrite the following code in a different programming language.", "input": "// JavaScript code\nlet arr = [1, 2, 3, 4, 5];\n\narr.forEach(item => {\n console.log(item * 2);\n});", "output": "# Python code\narr = [1, 2, 3, 4, 5]\n\nfor item in arr:\n print(item * 2)"}
{"text": "<s>[INST] Construct a Java function to check if two strings are anagrams of each other. here are the inputs public static boolean checkAnagrams(String s1, String s2) { \n    int[] count1 = new int[256]; \n    int[] count2 = new int[256]; \n  \n    // edge cases\n    if (s1.length() != s2.length()) \n        return false; \n\n    for (int i = 0; i < s1.length(); i++) { \n        count1[s1.charAt(i)]++; \n        count2[s2.charAt(i)]++; \n    } \n  \n    for (int i = 0; i < 256; i++) \n        if (count1[i] != count2[i]) \n            return false; \n  \n    return true; \n} [/INST] \\n  </s>", "instruction": "Construct a Java function to check if two strings are anagrams of each other.", "input": "", "output": "public static boolean checkAnagrams(String s1, String s2) { \n    int[] count1 = new int[256]; \n    int[] count2 = new int[256]; \n  \n    // edge cases\n    if (s1.length() != s2.length()) \n        return false; \n\n    for (int i = 0; i < s1.length(); i++) { \n        count1[s1.charAt(i)]++; \n        count2[s2.charAt(i)]++; \n    } \n  \n    for (int i = 0; i < 256; i++) \n        if (count1[i] != count2[i]) \n            return false; \n  \n    return true; \n}"}
{"text": "<s>[INST] Create a function that takes a string and an integer as arguments and repeatedly concatenates the characters from the string in order to form the integer. here are the inputs def concatString(string, limit):\n  s=''\n  for i in range(limit):\n    s+=string[i%len(string)]\n  return s\n   \nprint(concatString(\"Hello\", 14)) [/INST] \\n String: Hello\nInteger: 14 </s>", "instruction": "Create a function that takes a string and an integer as arguments and repeatedly concatenates the characters from the string in order to form the integer.", "input": "String: Hello\nInteger: 14", "output": "def concatString(string, limit):\n  s=''\n  for i in range(limit):\n    s+=string[i%len(string)]\n  return s\n   \nprint(concatString(\"Hello\", 14))"}
{"text": "<s>[INST] Suggest a solution to find the maximum value in a given array without using any library functions. here are the inputs def find_max(arr):\n  if len(arr) == 0:\n      return None\n\n  max_val = arr[0]\n\n  for i in range(1, len(arr)):\n      if arr[i] > max_val:\n          max_val = arr[i]\n\n  return max_val [/INST] \\n  </s>", "instruction": "Suggest a solution to find the maximum value in a given array without using any library functions.", "input": "", "output": "def find_max(arr):\n  if len(arr) == 0:\n      return None\n\n  max_val = arr[0]\n\n  for i in range(1, len(arr)):\n      if arr[i] > max_val:\n          max_val = arr[i]\n\n  return max_val"}
{"text": "<s>[INST] Create a TicTacToe game in Python. here are the inputs class TicTacToe:\n\ndef __init__(self):\n    self.board = [['_' for _ in range(3)] \n                   for _ in range(3)]\n    self.turn = 'x'\n    \ndef display(self):\n    for row in self.board:\n        print(' '.join(row))\n\ndef check_win(self):\n    board = self.board\n\n    # check if the player with the current turn has a row of three\n    for row in self.board:\n        if row.count(self.turn) == 3:\n            return True\n        \n    # check if the player with the current turn has a column of three\n    for col in range(3):\n        if board[0][col] == board[1][col] and board[1][col] == board[2][col] and board[2][col] == self.turn:\n            return True\n        \n    # check for the two diagonals\n    if board[0][0] == board[1][1] and board[1][1] == board[2][2] and board[2][2] == self.turn:\n        return True\n    if board[0][2] == board[1][1] and board[1][1] == board[2][0] and board[2][0] == self.turn:\n        return True\n    return False [/INST] \\n  </s>", "instruction": "Create a TicTacToe game in Python.", "input": "", "output": "class TicTacToe:\n\ndef __init__(self):\n    self.board = [['_' for _ in range(3)] \n                   for _ in range(3)]\n    self.turn = 'x'\n    \ndef display(self):\n    for row in self.board:\n        print(' '.join(row))\n\ndef check_win(self):\n    board = self.board\n\n    # check if the player with the current turn has a row of three\n    for row in self.board:\n        if row.count(self.turn) == 3:\n            return True\n        \n    # check if the player with the current turn has a column of three\n    for col in range(3):\n        if board[0][col] == board[1][col] and board[1][col] == board[2][col] and board[2][col] == self.turn:\n            return True\n        \n    # check for the two diagonals\n    if board[0][0] == board[1][1] and board[1][1] == board[2][2] and board[2][2] == self.turn:\n        return True\n    if board[0][2] == board[1][1] and board[1][1] == board[2][0] and board[2][0] == self.turn:\n        return True\n    return False"}
{"text": "<s>[INST] Create a console UI application that asks a user for a user name and password to log in. here are the inputs import java.util.Scanner;\npublic class Login {\n\n  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n\n    System.out.println(\"Please enter user name:\");\n    String userName = in.nextLine();\n    System.out.println(\"Please enter password:\");\n    String password = in.nextLine();\n\n    if (authenticate(userName, password)) {\n        System.out.println(\"Login successful!\");\n    } else {\n        System.out.println(\"Login failed.\");\n    }\n  }\n\n  private static boolean authenticate(String userName, String password) {\n    boolean isAuthenticated = false;\n    // Add authentication logic here\n    // ...\n\n    return isAuthenticated;\n\n  }\n\n} [/INST] \\n  </s>", "instruction": "Create a console UI application that asks a user for a user name and password to log in.", "input": "", "output": "import java.util.Scanner;\npublic class Login {\n\n  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n\n    System.out.println(\"Please enter user name:\");\n    String userName = in.nextLine();\n    System.out.println(\"Please enter password:\");\n    String password = in.nextLine();\n\n    if (authenticate(userName, password)) {\n        System.out.println(\"Login successful!\");\n    } else {\n        System.out.println(\"Login failed.\");\n    }\n  }\n\n  private static boolean authenticate(String userName, String password) {\n    boolean isAuthenticated = false;\n    // Add authentication logic here\n    // ...\n\n    return isAuthenticated;\n\n  }\n\n}"}
{"text": "<s>[INST] Create a Python program to store the strings \"Hello\" and \"World\" and print them in the same line. here are the inputs string1 = \"Hello\"\nstring2 = \"World\"\n\nprint(string1 + \" \" + string2) [/INST] \\n  </s>", "instruction": "Create a Python program to store the strings \"Hello\" and \"World\" and print them in the same line.", "input": "", "output": "string1 = \"Hello\"\nstring2 = \"World\"\n\nprint(string1 + \" \" + string2)"}
{"text": "<s>[INST] Write a SQL query to retrieve the employee name and salary with the highest salary. here are the inputs SELECT name, salary\nFROM Employees\nORDER BY salary DESC\nLIMIT 1; [/INST] \\n  </s>", "instruction": "Write a SQL query to retrieve the employee name and salary with the highest salary.", "input": "", "output": "SELECT name, salary\nFROM Employees\nORDER BY salary DESC\nLIMIT 1;"}
{"text": "<s>[INST] Create a Bash script that takes a sequence of filenames and renames them according to a given pattern. here are the inputs #!/bin/bash\n\ndeclare -a filenames=(\"document1.txt\" \"text2.pdf\" \"photo3.png\")\npattern=\"file-{i}.{ext}\"\n\nfor i in \"${!filenames[@]}\"\ndo\n name=\"${filenames[$i]}\"\n ext=\"${name##*.}\"\n num=\"$((i+1))\"\n newname=`echo $pattern | sed \"s/{i}/${num}/\" | sed \"s/{ext}/${ext}/\"`\n mv \"$name\" \"$newname\"\ndone [/INST] \\n filenames = [\"document1.txt\", \"text2.pdf\", \"photo3.png\"]\npattern = \"file-{i}.{ext}\" </s>", "instruction": "Create a Bash script that takes a sequence of filenames and renames them according to a given pattern.", "input": "filenames = [\"document1.txt\", \"text2.pdf\", \"photo3.png\"]\npattern = \"file-{i}.{ext}\"", "output": "#!/bin/bash\n\ndeclare -a filenames=(\"document1.txt\" \"text2.pdf\" \"photo3.png\")\npattern=\"file-{i}.{ext}\"\n\nfor i in \"${!filenames[@]}\"\ndo\n name=\"${filenames[$i]}\"\n ext=\"${name##*.}\"\n num=\"$((i+1))\"\n newname=`echo $pattern | sed \"s/{i}/${num}/\" | sed \"s/{ext}/${ext}/\"`\n mv \"$name\" \"$newname\"\ndone"}
{"text": "<s>[INST] Create a basic Flask application to serve a static index page. here are the inputs from flask import Flask\n\napp = Flask(__name__, static_folder='static')\n\n@app.route('/')\ndef index():\n return app.send_static_file('index.html')\n\nif __name__ == '__main__':\n app.run() [/INST] \\n Not applicable </s>", "instruction": "Create a basic Flask application to serve a static index page.", "input": "Not applicable", "output": "from flask import Flask\n\napp = Flask(__name__, static_folder='static')\n\n@app.route('/')\ndef index():\n return app.send_static_file('index.html')\n\nif __name__ == '__main__':\n app.run()"}
{"text": "<s>[INST] Create a program to extract the content from a string between two specified characters here are the inputs def get_content_between_chars(input_string, start, end):\n    start_index = input_string.find(start)\n    if start_index == -1:\n        return \"\"\n\n    end_index = input_string.find(end, start_index + len(start))\n    if end_index == -1:\n        return \"\"\n\n    content = input_string[start_index + len(start):end_index]\n    return content\n\n\nstring = \"This is a [example] string\"\nprint(get_content_between_chars(string, '[', ']')) [/INST] \\n String: \"This is a [example] string\",\nStart character: '[',\nEnd character: ']' </s>", "instruction": "Create a program to extract the content from a string between two specified characters", "input": "String: \"This is a [example] string\",\nStart character: '[',\nEnd character: ']'", "output": "def get_content_between_chars(input_string, start, end):\n    start_index = input_string.find(start)\n    if start_index == -1:\n        return \"\"\n\n    end_index = input_string.find(end, start_index + len(start))\n    if end_index == -1:\n        return \"\"\n\n    content = input_string[start_index + len(start):end_index]\n    return content\n\n\nstring = \"This is a [example] string\"\nprint(get_content_between_chars(string, '[', ']'))"}
{"text": "<s>[INST] Generate a JavaScript function that performs a deep copy of an object. here are the inputs // Function:\nconst deepCopy = (obj) => {\n if (obj == null || typeof obj !== 'object') {\n  return obj;\n }\n \n let copy = {};\n \n for (const key in obj) {\n  if (obj.hasOwnProperty(key)) {\n   const value = obj[key];\n   copy[key] = deepCopy(value);\n  }\n }\n \n return copy;\n} [/INST] \\n Not applicable </s>", "instruction": "Generate a JavaScript function that performs a deep copy of an object.", "input": "Not applicable", "output": "// Function:\nconst deepCopy = (obj) => {\n if (obj == null || typeof obj !== 'object') {\n  return obj;\n }\n \n let copy = {};\n \n for (const key in obj) {\n  if (obj.hasOwnProperty(key)) {\n   const value = obj[key];\n   copy[key] = deepCopy(value);\n  }\n }\n \n return copy;\n}"}
{"text": "<s>[INST] Use the inputs provided, write Python code to check if two integers are equal. here are the inputs if int(10) == int(10):\n    print(\"The two integers are equal\")\nelse:\n    print(\"The two integers are not equal\") [/INST] \\n First Integer: 10\nSecond Integer: 10 </s>", "instruction": "Use the inputs provided, write Python code to check if two integers are equal.", "input": "First Integer: 10\nSecond Integer: 10", "output": "if int(10) == int(10):\n    print(\"The two integers are equal\")\nelse:\n    print(\"The two integers are not equal\")"}
{"text": "<s>[INST] Create an HTML form for a registration page that captures name, email ID, date of birth, and gender. here are the inputs <form action=\"\">\n  <label for=\"name\">Name:</label>\n  <input type=\"text\" name=\"name\" id=\"name\">\n\n  <label for=\"email\">Email:</label>\n  <input type=\"email\" name=\"email\" id=\"email\">\n\n  <label for=\"dob\">Date of Birth:</label>\n  <input type=\"date\" name=\"dob\" id=\"dob\">\n\n  <label for=\"gender\">Gender:</label>\n  <select name=\"gender\" id=\"gender\">\n    <option value=\"\">Select</option>\n    <option value=\"male\">Male</option>\n    <option value=\"female\">Female</option>\n  </select>\n\n  <input type=\"submit\" value=\"Register\">\n</form> [/INST] \\n Not applicable </s>", "instruction": "Create an HTML form for a registration page that captures name, email ID, date of birth, and gender.", "input": "Not applicable", "output": "<form action=\"\">\n  <label for=\"name\">Name:</label>\n  <input type=\"text\" name=\"name\" id=\"name\">\n\n  <label for=\"email\">Email:</label>\n  <input type=\"email\" name=\"email\" id=\"email\">\n\n  <label for=\"dob\">Date of Birth:</label>\n  <input type=\"date\" name=\"dob\" id=\"dob\">\n\n  <label for=\"gender\">Gender:</label>\n  <select name=\"gender\" id=\"gender\">\n    <option value=\"\">Select</option>\n    <option value=\"male\">Male</option>\n    <option value=\"female\">Female</option>\n  </select>\n\n  <input type=\"submit\" value=\"Register\">\n</form>"}
{"text": "<s>[INST] Create a Python program for analyzing the sentiment of given text. The program should categorize the text into positive, negative, and neutral sentiments. here are the inputs import nltk\nfrom nltk.tokenize import sent_tokenize\nfrom nltk.classify import NaiveBayesClassifier\n\ndef analyze_sentiment(text):\n    sents = sent_tokenize(text)\n    neg = 0\n    pos = 0\n    for sentence in sents:\n        sentiment_analysis = NaiveBayesClassifier.classify(sentence)\n        if sentiment_analysis == 'neg':\n            neg += 1\n        if sentiment_analysis == 'pos':\n            pos += 1\n    \n    if neg > pos:\n        sentiment = 'negative'\n    elif pos > neg:\n        sentiment = 'positive'\n    else:\n        sentiment = 'neutral'\n    \n    return sentiment\n\n# End analyze sentiment definition [/INST] \\n Not applicable </s>", "instruction": "Create a Python program for analyzing the sentiment of given text. The program should categorize the text into positive, negative, and neutral sentiments.", "input": "Not applicable", "output": "import nltk\nfrom nltk.tokenize import sent_tokenize\nfrom nltk.classify import NaiveBayesClassifier\n\ndef analyze_sentiment(text):\n    sents = sent_tokenize(text)\n    neg = 0\n    pos = 0\n    for sentence in sents:\n        sentiment_analysis = NaiveBayesClassifier.classify(sentence)\n        if sentiment_analysis == 'neg':\n            neg += 1\n        if sentiment_analysis == 'pos':\n            pos += 1\n    \n    if neg > pos:\n        sentiment = 'negative'\n    elif pos > neg:\n        sentiment = 'positive'\n    else:\n        sentiment = 'neutral'\n    \n    return sentiment\n\n# End analyze sentiment definition"}
{"text": "<s>[INST] Create a React application which generates a random number between 1 and 10 and displays it on an HTML page. here are the inputs import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst App = () => {\n const [number, setNumber] = useState();\n\n const getRandomNumber = () => {\n setNumber(Math.ceil(Math.random() * 10));\n };\n\n return (\n <div>\n  <button onClick={getRandomNumber}>Generate!</button>\n  {number &&\n   <h1>\n    Your random number is: <span>{number}</span>\n   </h1>\n  }\n </div>\n );\n};\n\nReactDOM.render(<App />, document.getElementById('root')); [/INST] \\n Not applicable </s>", "instruction": "Create a React application which generates a random number between 1 and 10 and displays it on an HTML page.", "input": "Not applicable", "output": "import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst App = () => {\n const [number, setNumber] = useState();\n\n const getRandomNumber = () => {\n setNumber(Math.ceil(Math.random() * 10));\n };\n\n return (\n <div>\n  <button onClick={getRandomNumber}>Generate!</button>\n  {number &&\n   <h1>\n    Your random number is: <span>{number}</span>\n   </h1>\n  }\n </div>\n );\n};\n\nReactDOM.render(<App />, document.getElementById('root'));"}
{"text": "<s>[INST] Create a Python program to calculate the average of five numbers entered by a user. here are the inputs nums = []\nfor i in range(5):\n    nums.append(int(input(\"Please enter number: \")))\n\n#Calculate average\naverage = sum(nums) / len(nums)\n\n#Print average\nprint(\"The average is \", average) [/INST] \\n  </s>", "instruction": "Create a Python program to calculate the average of five numbers entered by a user.", "input": "", "output": "nums = []\nfor i in range(5):\n    nums.append(int(input(\"Please enter number: \")))\n\n#Calculate average\naverage = sum(nums) / len(nums)\n\n#Print average\nprint(\"The average is \", average)"}
{"text": "<s>[INST] Create a program to determine the largest of three numbers in PHP. here are the inputs <?php\n// findLargestNum function\nfunction findLargestNum($num1, $num2, $num3){\n    $largestNum = max($num1,$num2,$num3);\n    return $largestNum;\n}\n\n// Main code\n$num1 = 23;\n$num2 = 56;\n$num3 = 16;\n$largest = findLargestNum($num1,$num2,$num3);\necho \"The largest number is: \".$largest;\n?> [/INST] \\n  </s>", "instruction": "Create a program to determine the largest of three numbers in PHP.", "input": "", "output": "<?php\n// findLargestNum function\nfunction findLargestNum($num1, $num2, $num3){\n    $largestNum = max($num1,$num2,$num3);\n    return $largestNum;\n}\n\n// Main code\n$num1 = 23;\n$num2 = 56;\n$num3 = 16;\n$largest = findLargestNum($num1,$num2,$num3);\necho \"The largest number is: \".$largest;\n?>"}
{"text": "<s>[INST] Create a program in Java to calculate the average grade of a class of 10 students. here are the inputs // Declare and initialize an array\nint[] classGrades = {95, 88, 99, 77, 83, 94, 90, 85, 79, 92};\n\n// Declare and initialize variables\nint sum = 0;\nint average = 0;\n\n// Iterate over array\nfor (int grade : classGrades) {\n sum += grade;\n}\n\n// Calculate the average\naverage = sum / classGrades.length;\n\n// Print the result\nSystem.out.println(\"Average grade: \" + average);\n\n// Output:\n// Average grade: 88.5 [/INST] \\n Student 1: 95\nStudent 2: 88\nStudent 3: 99\nStudent 4: 77\nStudent 5: 83\nStudent 6: 94\nStudent 7: 90\nStudent 8: 85\nStudent 9: 79\nStudent 10: 92 </s>", "instruction": "Create a program in Java to calculate the average grade of a class of 10 students.", "input": "Student 1: 95\nStudent 2: 88\nStudent 3: 99\nStudent 4: 77\nStudent 5: 83\nStudent 6: 94\nStudent 7: 90\nStudent 8: 85\nStudent 9: 79\nStudent 10: 92", "output": "// Declare and initialize an array\nint[] classGrades = {95, 88, 99, 77, 83, 94, 90, 85, 79, 92};\n\n// Declare and initialize variables\nint sum = 0;\nint average = 0;\n\n// Iterate over array\nfor (int grade : classGrades) {\n sum += grade;\n}\n\n// Calculate the average\naverage = sum / classGrades.length;\n\n// Print the result\nSystem.out.println(\"Average grade: \" + average);\n\n// Output:\n// Average grade: 88.5"}
{"text": "<s>[INST] Can you generate a program to print the set difference of the two sets? here are the inputs # Initialize two sets\nSet1 = {'a', 'b', 'c'}\nSet2 = {'c', 'd', 'e'}\n\n# Print the set difference\nprint(\"Set Difference:\", Set1.difference(Set2)) [/INST] \\n Set1 = {'a', 'b', 'c'}\nSet2 = {'c', 'd', 'e'} </s>", "instruction": "Can you generate a program to print the set difference of the two sets?", "input": "Set1 = {'a', 'b', 'c'}\nSet2 = {'c', 'd', 'e'}", "output": "# Initialize two sets\nSet1 = {'a', 'b', 'c'}\nSet2 = {'c', 'd', 'e'}\n\n# Print the set difference\nprint(\"Set Difference:\", Set1.difference(Set2))"}
{"text": "<s>[INST] Write a SQL query to find all students from the \"student\" table who live in the same city as their parents. here are the inputs SELECT s.name \nFROM student s \nINNER JOIN parent p \nON s.city = p.city [/INST] \\n  </s>", "instruction": "Write a SQL query to find all students from the \"student\" table who live in the same city as their parents.", "input": "", "output": "SELECT s.name \nFROM student s \nINNER JOIN parent p \nON s.city = p.city"}
{"text": "<s>[INST] Create an algorithm in C to sort an array of given integers. here are the inputs #include <stdio.h>\n \nvoid sort(int arr[], int n)\n{\n   int i, key, j;\n   for (i = 1; i < n; i++)\n   {\n       key = arr[i];\n       j = i-1;\n \n       while (j >= 0 && arr[j] > key)\n       {\n           arr[j+1] = arr[j];\n           j = j-1;\n       }\n       arr[j+1] = key;\n   }\n}\n\n //Main Function\n int main()\n {\n      int arr[] = {32, 11, 8, 7};\n      int n = sizeof(arr)/sizeof(arr[0]);\n \n      sort(arr, n);\n \n      for (int i=0; i<n; i++)\n          printf(\"%d \", arr[i]);\n      printf(\"\\n\");\n \n   return 0;\n} [/INST] \\n [32, 11, 8, 7] </s>", "instruction": "Create an algorithm in C to sort an array of given integers.", "input": "[32, 11, 8, 7]", "output": "#include <stdio.h>\n \nvoid sort(int arr[], int n)\n{\n   int i, key, j;\n   for (i = 1; i < n; i++)\n   {\n       key = arr[i];\n       j = i-1;\n \n       while (j >= 0 && arr[j] > key)\n       {\n           arr[j+1] = arr[j];\n           j = j-1;\n       }\n       arr[j+1] = key;\n   }\n}\n\n //Main Function\n int main()\n {\n      int arr[] = {32, 11, 8, 7};\n      int n = sizeof(arr)/sizeof(arr[0]);\n \n      sort(arr, n);\n \n      for (int i=0; i<n; i++)\n          printf(\"%d \", arr[i]);\n      printf(\"\\n\");\n \n   return 0;\n}"}
{"text": "<s>[INST] Create a basic React application for a search engine. The application should include a search bar and a button. Whenever the button is clicked, the search bar should perform a search with the entered query. here are the inputs import React, {useState} from 'react';\n\nfunction App() {\n const [value, setValue] = useState('');\n\n function handleSubmit(e) {\n e.preventDefault();\n search(value);\n }\n\n function search(query) {\n // Perform the search\n }\n\n return (\n <div>\n <form onSubmit={handleSubmit}>\n <input value={value} onChange={e => setValue(e.target.value)} />\n <button type=\"submit\">Search</button>\n </form>\n </div>\n );\n}\n\nexport default App; [/INST] \\n Not applicable </s>", "instruction": "Create a basic React application for a search engine. The application should include a search bar and a button. Whenever the button is clicked, the search bar should perform a search with the entered query.", "input": "Not applicable", "output": "import React, {useState} from 'react';\n\nfunction App() {\n const [value, setValue] = useState('');\n\n function handleSubmit(e) {\n e.preventDefault();\n search(value);\n }\n\n function search(query) {\n // Perform the search\n }\n\n return (\n <div>\n <form onSubmit={handleSubmit}>\n <input value={value} onChange={e => setValue(e.target.value)} />\n <button type=\"submit\">Search</button>\n </form>\n </div>\n );\n}\n\nexport default App;"}
{"text": "<s>[INST] Generate a D3.js interactive bar chart for displaying the GDP of five countries. here are the inputs <svg width=\"900\" height=\"500\">\n\n   //Scales\n    var x = d3.scaleBand()\n    .domain(['China', 'India', 'United States', 'Indonesia', 'Brazil'])\n    .range([0, 900]);\n    \n    var y = d3.scaleLinear()\n    .domain([0, 21.44])\n    .range([500, 0]);\n    \n    //Axes\n    var xAxis = d3.axisBottom(x);\n    var yAxis = d3.axisLeft(y);\n    \n    //Create the SVG\n    var svg = d3.select(\"body\")\n    .append(\"svg\")\n    .attr(\"width\", 900)\n    .attr(\"height\",500);\n    \n    //And now the actual chart\n    svg.selectAll(\"rect\")\n    .data([11.38, 2.72, 21.44, 1.03, 1.86])\n    .enter().append(\"rect\")\n    .attr(\"x\", (d,i) => x(x.domain()[i]))\n    .attr(\"y\", d => y(d))\n    .attr(\"width\", x.bandwidth())\n    .attr(\"height\", d => 500 - y(d))\n    .style(\"fill\", 'steelblue');\n    \n    //Tooltips\n    svg.selectAll(\"rect\")\n    .on(\"mouseover\", function(d, i) {\n        d3.select(this)\n        .style(\"fill\", '#FFFF00');\n    })\n    .on(\"mouseout\", function(d, i) {\n        d3.select(this)\n        .style(\"fill\", 'steelblue')\n    }); \n    \n    //Axes\n    svg.append(\"g\")\n  .attr(\"class\", \"x axis\")\n  .attr(\"transform\", \"translate(0,\" + 500 + \")\")\n  .call(xAxis)\n  .selectAll(\"text\")\n  .style(\"text-anchor\", \"end\")\n  .attr(\"dx\", \"-.8em\")\n  .attr(\"dy\", \".15em\")\n  .attr(\"transform\", \"rotate(-65)\");\n\nsvg.append(\"g\")\n  .attr(\"class\", \"y axis\")\n  .attr(\"transform\", \"translate(0,0)\")\n  .call(yAxis);\n\n</svg> [/INST] \\n Data points:\n- China: 11.38 Trillion USD\n- India: 2.72 Trillion USD\n- United States: 21.44 Trillion USD\n- Indonesia: 1.03 Trillion USD\n- Brazil: 1.86 Trillion USD </s>", "instruction": "Generate a D3.js interactive bar chart for displaying the GDP of five countries.", "input": "Data points:\n- China: 11.38 Trillion USD\n- India: 2.72 Trillion USD\n- United States: 21.44 Trillion USD\n- Indonesia: 1.03 Trillion USD\n- Brazil: 1.86 Trillion USD", "output": "<svg width=\"900\" height=\"500\">\n\n   //Scales\n    var x = d3.scaleBand()\n    .domain(['China', 'India', 'United States', 'Indonesia', 'Brazil'])\n    .range([0, 900]);\n    \n    var y = d3.scaleLinear()\n    .domain([0, 21.44])\n    .range([500, 0]);\n    \n    //Axes\n    var xAxis = d3.axisBottom(x);\n    var yAxis = d3.axisLeft(y);\n    \n    //Create the SVG\n    var svg = d3.select(\"body\")\n    .append(\"svg\")\n    .attr(\"width\", 900)\n    .attr(\"height\",500);\n    \n    //And now the actual chart\n    svg.selectAll(\"rect\")\n    .data([11.38, 2.72, 21.44, 1.03, 1.86])\n    .enter().append(\"rect\")\n    .attr(\"x\", (d,i) => x(x.domain()[i]))\n    .attr(\"y\", d => y(d))\n    .attr(\"width\", x.bandwidth())\n    .attr(\"height\", d => 500 - y(d))\n    .style(\"fill\", 'steelblue');\n    \n    //Tooltips\n    svg.selectAll(\"rect\")\n    .on(\"mouseover\", function(d, i) {\n        d3.select(this)\n        .style(\"fill\", '#FFFF00');\n    })\n    .on(\"mouseout\", function(d, i) {\n        d3.select(this)\n        .style(\"fill\", 'steelblue')\n    }); \n    \n    //Axes\n    svg.append(\"g\")\n  .attr(\"class\", \"x axis\")\n  .attr(\"transform\", \"translate(0,\" + 500 + \")\")\n  .call(xAxis)\n  .selectAll(\"text\")\n  .style(\"text-anchor\", \"end\")\n  .attr(\"dx\", \"-.8em\")\n  .attr(\"dy\", \".15em\")\n  .attr(\"transform\", \"rotate(-65)\");\n\nsvg.append(\"g\")\n  .attr(\"class\", \"y axis\")\n  .attr(\"transform\", \"translate(0,0)\")\n  .call(yAxis);\n\n</svg>"}
{"text": "<s>[INST] Create a Basic HTML website with a simple landing page and two more pages accessible through a main navigation. here are the inputs <!DOCTYPE html>\n<html>\n<head>\n  <title>My Website</title>\n</head>\n<body>\n   <header>\n     <h1>My Website</h1>\n     <nav>\n       <ul>\n         <li><a href=\"index.html\">Home</a></li>\n         <li><a href=\"about.html\">About</a></li>\n         <li><a href=\"contact.html\">Contact</a></li>\n       </ul>\n     </nav>\n   </header>\n   <main>\n     <h2>Welcome to my website!</h2>\n   </main>\n</body>\n</html> [/INST] \\n Not applicable </s>", "instruction": "Create a Basic HTML website with a simple landing page and two more pages accessible through a main navigation.", "input": "Not applicable", "output": "<!DOCTYPE html>\n<html>\n<head>\n  <title>My Website</title>\n</head>\n<body>\n   <header>\n     <h1>My Website</h1>\n     <nav>\n       <ul>\n         <li><a href=\"index.html\">Home</a></li>\n         <li><a href=\"about.html\">About</a></li>\n         <li><a href=\"contact.html\">Contact</a></li>\n       </ul>\n     </nav>\n   </header>\n   <main>\n     <h2>Welcome to my website!</h2>\n   </main>\n</body>\n</html>"}
{"text": "<s>[INST] Write an SQL query to select the five most recent employee records which have an age greater than 60, ordered by hire date in descending order. here are the inputs SELECT * FROM employees WHERE age > 60 ORDER BY hire_date DESC LIMIT 5; [/INST] \\n  </s>", "instruction": "Write an SQL query to select the five most recent employee records which have an age greater than 60, ordered by hire date in descending order.", "input": "", "output": "SELECT * FROM employees WHERE age > 60 ORDER BY hire_date DESC LIMIT 5;"}
{"text": "<s>[INST] Generate code to create a sequence of numbers that starts at 0, goes up by 5, and ends at a maximum integer value provided. here are the inputs def create_sequence(maximum):\n    sequence = []\n    i = 0\n    while i <= maximum:\n        sequence.append(i)\n        i += 5\n    return sequence\n\nsequence = create_sequence(maximum)\nprint(sequence) [/INST] \\n maximum = 15 </s>", "instruction": "Generate code to create a sequence of numbers that starts at 0, goes up by 5, and ends at a maximum integer value provided.", "input": "maximum = 15", "output": "def create_sequence(maximum):\n    sequence = []\n    i = 0\n    while i <= maximum:\n        sequence.append(i)\n        i += 5\n    return sequence\n\nsequence = create_sequence(maximum)\nprint(sequence)"}
{"text": "<s>[INST] In JavaScript, create a function to convert temperature from Fahrenheit to Celsius. here are the inputs function convertFtoC(f) {\n    return (f - 32) * 5 / 9;\n  }\n  \n  console.log(convertFtoC(90)); // Outputs: 32.22 [/INST] \\n Temperature in Fahrenheit: 90 </s>", "instruction": "In JavaScript, create a function to convert temperature from Fahrenheit to Celsius.", "input": "Temperature in Fahrenheit: 90", "output": "function convertFtoC(f) {\n    return (f - 32) * 5 / 9;\n  }\n  \n  console.log(convertFtoC(90)); // Outputs: 32.22"}
{"text": "<s>[INST] Write a code snippet to convert a given string of '0' and '1' characters to a list of boolean values. here are the inputs string = '111011'\nboolean_list = [item == '1' for item in string]\nprint(boolean_list) # output: [True, True, True, False, True, True] [/INST] \\n 111011 </s>", "instruction": "Write a code snippet to convert a given string of '0' and '1' characters to a list of boolean values.", "input": "111011", "output": "string = '111011'\nboolean_list = [item == '1' for item in string]\nprint(boolean_list) # output: [True, True, True, False, True, True]"}
{"text": "<s>[INST] Create a web application to search an online database. here are the inputs <html>\n<head>\n    <title>Search Application</title>\n    <script>\n        function search() {\n            //get search term\n            let searchTerm = document.getElementById('searchbox').value;\n            //construct query string\n            let queryString = \"?searchTerm=\" + searchTerm;\n            //add fields to query string\n            let fields = <Your Input Here>;\n            for(let i = 0; i < fields.length; i++) {\n                queryString += \"&field=\" + fields[i];\n            }\n            //fetch results\n            fetch('/search' + queryString)\n                .then((response) => {\n                    //display results\n                    response.text().then((text) => {\n                        document.getElementById('results').innerHTML = text;\n                    });\n                });\n        }\n    </script>\n</head>\n<body>\n    <h1>Search Application</h1>\n    <input type=\"text\" id=\"searchbox\" />\n    <button type=\"button\" onclick=\"search()\">Search</button>\n    <div id=\"results\"></div>\n</body>\n</html> [/INST] \\n a list of fields </s>", "instruction": "Create a web application to search an online database.", "input": "a list of fields", "output": "<html>\n<head>\n    <title>Search Application</title>\n    <script>\n        function search() {\n            //get search term\n            let searchTerm = document.getElementById('searchbox').value;\n            //construct query string\n            let queryString = \"?searchTerm=\" + searchTerm;\n            //add fields to query string\n            let fields = <Your Input Here>;\n            for(let i = 0; i < fields.length; i++) {\n                queryString += \"&field=\" + fields[i];\n            }\n            //fetch results\n            fetch('/search' + queryString)\n                .then((response) => {\n                    //display results\n                    response.text().then((text) => {\n                        document.getElementById('results').innerHTML = text;\n                    });\n                });\n        }\n    </script>\n</head>\n<body>\n    <h1>Search Application</h1>\n    <input type=\"text\" id=\"searchbox\" />\n    <button type=\"button\" onclick=\"search()\">Search</button>\n    <div id=\"results\"></div>\n</body>\n</html>"}
{"text": "<s>[INST] Write a SQL query to identify the most popular product sold by a store. here are the inputs SELECT p.product_name, COUNT(o.id) AS sales_count\nFROM products p\nINNER JOIN orders o\nON p.id = o.product_id\nGROUP BY p.id\nORDER BY sales_count DESC\nLIMIT 1; [/INST] \\n  </s>", "instruction": "Write a SQL query to identify the most popular product sold by a store.", "input": "", "output": "SELECT p.product_name, COUNT(o.id) AS sales_count\nFROM products p\nINNER JOIN orders o\nON p.id = o.product_id\nGROUP BY p.id\nORDER BY sales_count DESC\nLIMIT 1;"}
{"text": "<s>[INST] Create an Angular page for viewing a profile of a user and their friends. here are the inputs import {Component, OnInit} from '@angular/core';\n\n@Component({\n selector: 'app-profile',\n templateUrl: './profile.component.html',\n styleUrls: ['./profile.component.css'],\n})\nexport class ProfileComponent implements OnInit {\n constructor() { }\n friends: any[] = [\n  {name: 'John Doe', age: 30, job: 'Developer'}, \n  {name: 'Jane Smith', age: 28, job: 'Designer'}, \n ];\n \n ngOnInit() {\n }\n} [/INST] \\n friends = [{name: 'John Doe', age: 30, job 'Developer'}, {name: 'Jane Smith', age: 28, job: 'Designer'}] </s>", "instruction": "Create an Angular page for viewing a profile of a user and their friends.", "input": "friends = [{name: 'John Doe', age: 30, job 'Developer'}, {name: 'Jane Smith', age: 28, job: 'Designer'}]", "output": "import {Component, OnInit} from '@angular/core';\n\n@Component({\n selector: 'app-profile',\n templateUrl: './profile.component.html',\n styleUrls: ['./profile.component.css'],\n})\nexport class ProfileComponent implements OnInit {\n constructor() { }\n friends: any[] = [\n  {name: 'John Doe', age: 30, job: 'Developer'}, \n  {name: 'Jane Smith', age: 28, job: 'Designer'}, \n ];\n \n ngOnInit() {\n }\n}"}
{"text": "<s>[INST] Create an API endpoint to update an user's profile information in a database. here are the inputs const express = require('express');\nconst app = express();\nconst mysql = require('mysql');\n\n// configuration of the database\nconst connection = mysql.createConnection({\n host: 'localhost',\n user: 'root',\n password: '',\n database: 'test'\n});\n\n// route handler\napp.put('/api/users/:id', (req, res) => {\n const id = req.params.id;\n const queryString = 'UPDATE users SET ? WHERE id = ?';\n connection.query(queryString, [req.body, id], (err, results, fields) => {\n if (err) {\n console.log('Error updating user');\n res.sendStatus(500);\n return;\n }\n console.log('Updated user successfully');\n res.end();\n});\n});\n\napp.listen(3000, () => console.log('Server started on port 3000')); [/INST] \\n User ID: 123 </s>", "instruction": "Create an API endpoint to update an user's profile information in a database.", "input": "User ID: 123", "output": "const express = require('express');\nconst app = express();\nconst mysql = require('mysql');\n\n// configuration of the database\nconst connection = mysql.createConnection({\n host: 'localhost',\n user: 'root',\n password: '',\n database: 'test'\n});\n\n// route handler\napp.put('/api/users/:id', (req, res) => {\n const id = req.params.id;\n const queryString = 'UPDATE users SET ? WHERE id = ?';\n connection.query(queryString, [req.body, id], (err, results, fields) => {\n if (err) {\n console.log('Error updating user');\n res.sendStatus(500);\n return;\n }\n console.log('Updated user successfully');\n res.end();\n});\n});\n\napp.listen(3000, () => console.log('Server started on port 3000'));"}
{"text": "<s>[INST] Create a program to remove all punctuation from a text string and output it as a new string. here are the inputs import string\n\npunc_removed = string.replace(string, '', string.punctuation)\nprint(punc_removed) [/INST] \\n string = \"Hi! Welcome to my website.\" </s>", "instruction": "Create a program to remove all punctuation from a text string and output it as a new string.", "input": "string = \"Hi! Welcome to my website.\"", "output": "import string\n\npunc_removed = string.replace(string, '', string.punctuation)\nprint(punc_removed)"}
{"text": "<s>[INST] Build a cryptocurrency price checker using Node.js that prints out the current Bitcoin and Ethereum prices. here are the inputs const request = require('request');\n\nconst checkPrice = () => {\n const URL = 'https://api.coindesk.com/v1/bpi/currentprice.json';\n request(URL, (err, resp, body) => {\n   const data = JSON.parse(body);\n   console.log(`Bitcoin: ${data.bpi.USD.rate_float}`);\n   console.log(`Ethereum: ${data.bpi.EUR.rate_float}`);\n });\n};\n\ncheckPrice(); [/INST] \\n Not applicable </s>", "instruction": "Build a cryptocurrency price checker using Node.js that prints out the current Bitcoin and Ethereum prices.", "input": "Not applicable", "output": "const request = require('request');\n\nconst checkPrice = () => {\n const URL = 'https://api.coindesk.com/v1/bpi/currentprice.json';\n request(URL, (err, resp, body) => {\n   const data = JSON.parse(body);\n   console.log(`Bitcoin: ${data.bpi.USD.rate_float}`);\n   console.log(`Ethereum: ${data.bpi.EUR.rate_float}`);\n });\n};\n\ncheckPrice();"}
{"text": "<s>[INST] Generate a random password string with specified requirements. here are the inputs # C Program to generate a random password string \n# with specified requirements \n\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\n// This function generates random passwords \nchar* random_password(int length) \n{   \n    int i; \n    char* password = malloc(length * sizeof(char)); \n    int count; \n  \n    const char lowercase_characters[] = \n\t\t\"abcdefghijklmnopqrstuvwxyz\"; \n    const char uppercase_characters[] = \n\t\t\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; \n    const char numerals[] = \"0123456789\"; \n    const char special_characters[] = \"+-*/!@#$^&?()<>{}[]:,~\"; \n  \n    while (count < length) { \n        i = rand() % 4; \n        switch (i) { \n        case 0: \n            password[count] = lowercase_characters[rand() % \n\t\t\t\t\t\t\t\t\t\t\t\t\t26]; \n            break; \n        case 1: \n            password[count] = uppercase_characters[rand() % \n\t\t\t\t\t\t\t\t\t\t\t\t\t26]; \n            break; \n        case 2: \n            password[count] = numerals[rand() % 10]; \n            break; \n        case 3: \n            password[count] = special_characters[rand() % 15]; \n            break; \n        } \n        count++; \n    } \n  \n    return password; \n} \n  \n// Driver code \nint main(void) \n{ \n    int length = 8; \n  \n    char* pswd; \n    pswd = random_password(length); \n    printf(\"Random Password : %s\\n\", pswd);\n    free(pswd); \n  \n    return 0; \n} [/INST] \\n 8 characters, 1 uppercase letter, 1 lowercase letter, 1 number and 1 special character </s>", "instruction": "Generate a random password string with specified requirements.", "input": "8 characters, 1 uppercase letter, 1 lowercase letter, 1 number and 1 special character", "output": "# C Program to generate a random password string \n# with specified requirements \n\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\n// This function generates random passwords \nchar* random_password(int length) \n{   \n    int i; \n    char* password = malloc(length * sizeof(char)); \n    int count; \n  \n    const char lowercase_characters[] = \n\t\t\"abcdefghijklmnopqrstuvwxyz\"; \n    const char uppercase_characters[] = \n\t\t\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; \n    const char numerals[] = \"0123456789\"; \n    const char special_characters[] = \"+-*/!@#$^&?()<>{}[]:,~\"; \n  \n    while (count < length) { \n        i = rand() % 4; \n        switch (i) { \n        case 0: \n            password[count] = lowercase_characters[rand() % \n\t\t\t\t\t\t\t\t\t\t\t\t\t26]; \n            break; \n        case 1: \n            password[count] = uppercase_characters[rand() % \n\t\t\t\t\t\t\t\t\t\t\t\t\t26]; \n            break; \n        case 2: \n            password[count] = numerals[rand() % 10]; \n            break; \n        case 3: \n            password[count] = special_characters[rand() % 15]; \n            break; \n        } \n        count++; \n    } \n  \n    return password; \n} \n  \n// Driver code \nint main(void) \n{ \n    int length = 8; \n  \n    char* pswd; \n    pswd = random_password(length); \n    printf(\"Random Password : %s\\n\", pswd);\n    free(pswd); \n  \n    return 0; \n}"}
{"text": "<s>[INST] Write a Python program to generate a Markov chain given a text input. here are the inputs import random\n\ndef generateMarkov(text):\n  words = text.split(' ')\n  markovChain = {}\n\n  for i in range(len(words) - 2):\n    current = words[i]\n    next = words[i + 1]\n    if current in markovChain:\n      if next in markovChain[current]:\n        markovChain[current][next] += 1\n      else:\n        markovChain[current][next] = 1\n    else:\n      markovChain[current] = {next: 1}\n\n  generatedText = \"\"\n  current = random.choice(list(markovChain))\n  generatedText += current\n\n  for i in range(100):\n    choices = markovChain[current]\n    choices = [\n      key for key, value in choices.items()\n      for i in range(value)\n    ]\n    try:\n      current = random.choice(choices)\n      generatedText += \" \" + current\n    except:\n      break\n\n  return generatedText\n\ntext = 'Alice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, `and what is the use of a book,' thought Alice `without pictures or conversation?'\n\nprint(generateMarkov(text)) [/INST] \\n Alice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, `and what is the use of a book,' thought Alice `without pictures or conversation?' </s>", "instruction": "Write a Python program to generate a Markov chain given a text input.", "input": "Alice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, `and what is the use of a book,' thought Alice `without pictures or conversation?'", "output": "import random\n\ndef generateMarkov(text):\n  words = text.split(' ')\n  markovChain = {}\n\n  for i in range(len(words) - 2):\n    current = words[i]\n    next = words[i + 1]\n    if current in markovChain:\n      if next in markovChain[current]:\n        markovChain[current][next] += 1\n      else:\n        markovChain[current][next] = 1\n    else:\n      markovChain[current] = {next: 1}\n\n  generatedText = \"\"\n  current = random.choice(list(markovChain))\n  generatedText += current\n\n  for i in range(100):\n    choices = markovChain[current]\n    choices = [\n      key for key, value in choices.items()\n      for i in range(value)\n    ]\n    try:\n      current = random.choice(choices)\n      generatedText += \" \" + current\n    except:\n      break\n\n  return generatedText\n\ntext = 'Alice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, `and what is the use of a book,' thought Alice `without pictures or conversation?'\n\nprint(generateMarkov(text))"}
{"text": "<s>[INST] Write a code to detect an Armstrong number (A number is an Armstrong number when the sum of its digits to the power of the length of the number is equal to the number itself). here are the inputs # Function to detect Armstrong number\ndef is_armstrong(num): \n    # Convert the number to a string for easier looping\n    num = str(num) \n    # Initialize sum\n    sum = 0 \n    # For Loop to get sum of cube of each digit \n    for i in range(len(num)): \n        digit = int(num[i]) \n        sum += digit ** len(num) \n    # Check if number is equal to the sum of its digits\n    if(sum == int(num)): \n        return True \n    else: \n        return False\n  \n# Print result  \nprint(is_armstrong(num)) [/INST] \\n num = 153 </s>", "instruction": "Write a code to detect an Armstrong number (A number is an Armstrong number when the sum of its digits to the power of the length of the number is equal to the number itself).", "input": "num = 153", "output": "# Function to detect Armstrong number\ndef is_armstrong(num): \n    # Convert the number to a string for easier looping\n    num = str(num) \n    # Initialize sum\n    sum = 0 \n    # For Loop to get sum of cube of each digit \n    for i in range(len(num)): \n        digit = int(num[i]) \n        sum += digit ** len(num) \n    # Check if number is equal to the sum of its digits\n    if(sum == int(num)): \n        return True \n    else: \n        return False\n  \n# Print result  \nprint(is_armstrong(num))"}
{"text": "<s>[INST] Write a JavaScript program to compute the average of the numbers in the given array and print the result. here are the inputs let arr = [3, 5, 7, 11, 13];\nlet sum = 0;\n\narr.forEach(element => {\n  sum += element;\n});\nlet average = sum/arr.length;\n\nconsole.log(average); [/INST] \\n [3, 5, 7, 11, 13] </s>", "instruction": "Write a JavaScript program to compute the average of the numbers in the given array and print the result.", "input": "[3, 5, 7, 11, 13]", "output": "let arr = [3, 5, 7, 11, 13];\nlet sum = 0;\n\narr.forEach(element => {\n  sum += element;\n});\nlet average = sum/arr.length;\n\nconsole.log(average);"}
{"text": "<s>[INST] Construct an algorithm for merging two sorted arrays into one. here are the inputs # Function to merge two sorted arrays \ndef mergeArrays(arr1, arr2): \n    res = [] \n    i, j = 0, 0\n  \n    while i < len(arr1) and j < len(arr2): \n        if arr1[i] < arr2[j]: \n            res.append(arr1[i]) \n            i += 1\n        else: \n            res.append(arr2[j]) \n            j += 1\n  \n    while i < len(arr1): \n        res.append(arr1[i]) \n        i += 1\n  \n    while j < len(arr2): \n        res.append(arr2[j]) \n        j += 1\n  \n    return res\n\nmergeArrays([3, 5, 6], [1, 2, 4]) [/INST] \\n [3, 5, 6] and [1, 2, 4] </s>", "instruction": "Construct an algorithm for merging two sorted arrays into one.", "input": "[3, 5, 6] and [1, 2, 4]", "output": "# Function to merge two sorted arrays \ndef mergeArrays(arr1, arr2): \n    res = [] \n    i, j = 0, 0\n  \n    while i < len(arr1) and j < len(arr2): \n        if arr1[i] < arr2[j]: \n            res.append(arr1[i]) \n            i += 1\n        else: \n            res.append(arr2[j]) \n            j += 1\n  \n    while i < len(arr1): \n        res.append(arr1[i]) \n        i += 1\n  \n    while j < len(arr2): \n        res.append(arr2[j]) \n        j += 1\n  \n    return res\n\nmergeArrays([3, 5, 6], [1, 2, 4])"}
{"text": "<s>[INST] Write a piece of C++ code toSort an array of integers in ascending order. here are the inputs #include <algorithm>\n#include <iostream>\n\nint main() {\n int arr[] = {-3, 7, 4, -9, 6, 1, 2};\n int size = sizeof(arr) / sizeof(arr[0]);\n \n std::sort(arr, arr + size);\n \n std::cout << \"Sorted array:\";\n for (int i = 0; i < size; i++)\n std::cout << \" \" << arr[i];\n std::cout << std::endl;\n \n return 0;\n} [/INST] \\n int arr[] = {-3, 7, 4, -9, 6, 1, 2}; </s>", "instruction": "Write a piece of C++ code toSort an array of integers in ascending order.", "input": "int arr[] = {-3, 7, 4, -9, 6, 1, 2};", "output": "#include <algorithm>\n#include <iostream>\n\nint main() {\n int arr[] = {-3, 7, 4, -9, 6, 1, 2};\n int size = sizeof(arr) / sizeof(arr[0]);\n \n std::sort(arr, arr + size);\n \n std::cout << \"Sorted array:\";\n for (int i = 0; i < size; i++)\n std::cout << \" \" << arr[i];\n std::cout << std::endl;\n \n return 0;\n}"}
{"text": "<s>[INST] You need to detect which of two inputs is greater. here are the inputs if int(1) > int(9):\n    print(\"1 is greater\")\nelse:\n    print(\"9 is greater\") [/INST] \\n 1 and 9 </s>", "instruction": "You need to detect which of two inputs is greater.", "input": "1 and 9", "output": "if int(1) > int(9):\n    print(\"1 is greater\")\nelse:\n    print(\"9 is greater\")"}
{"text": "<s>[INST] Develop an algorithm to find the least number of steps needed to reach a target number given the following set of arithmetic operations: addition (+), subtraction (-), multiplication (*), division (/). here are the inputs # This algorithm finds the least number of steps required to reach a target number using \n# the set of arithmetic operations mentioned- addition, subtraction, multiplication and division.\n\ndef least_number_of_steps(target_number): \n    # set the default number of steps to 0\n    num_steps = 0\n    # keep track of the current number with initial value of 0\n    current_number = 0\n    \n    # if the target number is equal to the current number, the condition will be False and \n    # the loop will terminate \n    while target_number != current_number: \n        # check if the target number is greater than the current number\n        if target_number > current_number: \n            # choose the maximum of from addition, subtraction,  \n            # multiplication, division operations \n            current_number = max(current_number + 1,  \n                            current_number - 1, \n                            current_number * 2, \n                            current_number / 2) \n        else: \n            # choose the minimum of from addition, subtraction,  \n            # multiplication, division operations \n            current_number = min(current_number + 1, \n                            current_number - 1, \n                            current_number * 2, \n                            current_number / 2) \n        # increment the steps count\n        num_steps += 1\n    \n    return num_steps \n  \n# Driver code \ntarget_number = 10\nprint(least_number_of_steps(target_number)) [/INST] \\n Target number: 10 </s>", "instruction": "Develop an algorithm to find the least number of steps needed to reach a target number given the following set of arithmetic operations: addition (+), subtraction (-), multiplication (*), division (/).", "input": "Target number: 10", "output": "# This algorithm finds the least number of steps required to reach a target number using \n# the set of arithmetic operations mentioned- addition, subtraction, multiplication and division.\n\ndef least_number_of_steps(target_number): \n    # set the default number of steps to 0\n    num_steps = 0\n    # keep track of the current number with initial value of 0\n    current_number = 0\n    \n    # if the target number is equal to the current number, the condition will be False and \n    # the loop will terminate \n    while target_number != current_number: \n        # check if the target number is greater than the current number\n        if target_number > current_number: \n            # choose the maximum of from addition, subtraction,  \n            # multiplication, division operations \n            current_number = max(current_number + 1,  \n                            current_number - 1, \n                            current_number * 2, \n                            current_number / 2) \n        else: \n            # choose the minimum of from addition, subtraction,  \n            # multiplication, division operations \n            current_number = min(current_number + 1, \n                            current_number - 1, \n                            current_number * 2, \n                            current_number / 2) \n        # increment the steps count\n        num_steps += 1\n    \n    return num_steps \n  \n# Driver code \ntarget_number = 10\nprint(least_number_of_steps(target_number))"}
{"text": "<s>[INST] Create a MySQL table from given data. here are the inputs CREATE TABLE Employees (\n id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,\n name VARCHAR(255),\n department VARCHAR(255),\n salary INT\n); [/INST] \\n Employees (ID: INT, Name: VARCHAR, Department: VARCHAR, Salary: INT) </s>", "instruction": "Create a MySQL table from given data.", "input": "Employees (ID: INT, Name: VARCHAR, Department: VARCHAR, Salary: INT)", "output": "CREATE TABLE Employees (\n id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,\n name VARCHAR(255),\n department VARCHAR(255),\n salary INT\n);"}
{"text": "<s>[INST] Generate the logic for sorting an array of integers here are the inputs def sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] [/INST] \\n  </s>", "instruction": "Generate the logic for sorting an array of integers", "input": "", "output": "def sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]"}
{"text": "<s>[INST] Develop a MongoDB query to create a collection for orders with the following fields: order_id, customer_id, total_amount, payment_status and delivery_status here are the inputs db.createCollection(\"orders\", {\n  fields: {\n    order_id: { type: \"String\" },\n    customer_id: { type: \"String\" },\n    total_amount: { type: \"Number\" },\n    payment_status: { type: \"String\" },\n    delivery_status: { type: \"String\" }\n  }\n}); [/INST] \\n  </s>", "instruction": "Develop a MongoDB query to create a collection for orders with the following fields: order_id, customer_id, total_amount, payment_status and delivery_status", "input": "", "output": "db.createCollection(\"orders\", {\n  fields: {\n    order_id: { type: \"String\" },\n    customer_id: { type: \"String\" },\n    total_amount: { type: \"Number\" },\n    payment_status: { type: \"String\" },\n    delivery_status: { type: \"String\" }\n  }\n});"}
{"text": "<s>[INST] Design a program that takes in an array of integers as input and removes all odd numbers from the array. here are the inputs def removeOddNumbers(input_list):\n  return [i for i in input_list if i % 2 == 0] [/INST] \\n input_list = [1,2,3,4,5,6] </s>", "instruction": "Design a program that takes in an array of integers as input and removes all odd numbers from the array.", "input": "input_list = [1,2,3,4,5,6]", "output": "def removeOddNumbers(input_list):\n  return [i for i in input_list if i % 2 == 0]"}
{"text": "<s>[INST] Suggest a completion for the following Java code to print an element from a int array. here are the inputs int[] values = {1, 2, 3}\n\nSystem.out.println(values[0]); [/INST] \\n int[] values = {1, 2, 3} \n\nSystem.out.println </s>", "instruction": "Suggest a completion for the following Java code to print an element from a int array.", "input": "int[] values = {1, 2, 3} \n\nSystem.out.println", "output": "int[] values = {1, 2, 3}\n\nSystem.out.println(values[0]);"}
{"text": "<s>[INST] Write a SQL query to find all records in the table, sorted in descending by the given column. here are the inputs SELECT *\nFROM table \nORDER BY column DESC [/INST] \\n  </s>", "instruction": "Write a SQL query to find all records in the table, sorted in descending by the given column.", "input": "", "output": "SELECT *\nFROM table \nORDER BY column DESC"}
{"text": "<s>[INST] Construct an AI program that can predict which customers are more likely to buy a specific product. here are the inputs import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Read the data\ndata = pd.read_csv('data.csv')\n\n# Extract features and labels\nX, y = data.iloc[:, :-1], data.iloc[:, -1]\n\n# Perform train test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Train the model\nclf = RandomForestClassifier(n_estimators=100, max_depth=4, random_state=0)\nclf.fit(X_train, y_train)\n\n# Test the model\ny_pred = clf.predict(X_test)\n\n# Evaluate the model\naccuracy = np.mean(y_pred == y_test)\nprint('Accuracy:', accuracy) [/INST] \\n  </s>", "instruction": "Construct an AI program that can predict which customers are more likely to buy a specific product.", "input": "", "output": "import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Read the data\ndata = pd.read_csv('data.csv')\n\n# Extract features and labels\nX, y = data.iloc[:, :-1], data.iloc[:, -1]\n\n# Perform train test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Train the model\nclf = RandomForestClassifier(n_estimators=100, max_depth=4, random_state=0)\nclf.fit(X_train, y_train)\n\n# Test the model\ny_pred = clf.predict(X_test)\n\n# Evaluate the model\naccuracy = np.mean(y_pred == y_test)\nprint('Accuracy:', accuracy)"}
{"text": "<s>[INST] Write a Python program to determine if a number provided by the user is prime or not. here are the inputs # Ask the user for a number\nnum = int(input('Enter a number: '))\n\n# Set initial values\nis_prime = True\n\n# Check for prime\nfor i in range(2, num):\n if num % i == 0:\n is_prime = False\n break\n\n# Output result\nif is_prime:\n print(f'{num} is a prime number.')\nelse:\n print(f'{num} is not a prime number.') [/INST] \\n 17 </s>", "instruction": "Write a Python program to determine if a number provided by the user is prime or not.", "input": "17", "output": "# Ask the user for a number\nnum = int(input('Enter a number: '))\n\n# Set initial values\nis_prime = True\n\n# Check for prime\nfor i in range(2, num):\n if num % i == 0:\n is_prime = False\n break\n\n# Output result\nif is_prime:\n print(f'{num} is a prime number.')\nelse:\n print(f'{num} is not a prime number.')"}
{"text": "<s>[INST] Generate an algorithm to classify a given dataset into 3 classes. here are the inputs Algorithm:\n\n1. Load the dataset.\n\n2. Normalize the feature columns in the dataset by scaling each of the features between the value 0 and 1.\n\n3. Split the dataset into training and testing sets.\n\n4. Initialize a classification algorithm of choice, such as a naive bayes classifier or a logistic regression classifier.\n\n5. Train the model on the training set by passing it the normalized feature columns and the corresponding labels.\n\n6. Tune the model by passing it the training set, varying the parameters until the highest accuracy is achieved.\n\n7. Test the model\u2019s accuracy on the testing set.\n\n8. If the accuracy is satisfactory, use the trained model to predict the labels for new unseen data. [/INST] \\n The dataset contains 15 features, and 500 examples. </s>", "instruction": "Generate an algorithm to classify a given dataset into 3 classes.", "input": "The dataset contains 15 features, and 500 examples.", "output": "Algorithm:\n\n1. Load the dataset.\n\n2. Normalize the feature columns in the dataset by scaling each of the features between the value 0 and 1.\n\n3. Split the dataset into training and testing sets.\n\n4. Initialize a classification algorithm of choice, such as a naive bayes classifier or a logistic regression classifier.\n\n5. Train the model on the training set by passing it the normalized feature columns and the corresponding labels.\n\n6. Tune the model by passing it the training set, varying the parameters until the highest accuracy is achieved.\n\n7. Test the model\u2019s accuracy on the testing set.\n\n8. If the accuracy is satisfactory, use the trained model to predict the labels for new unseen data."}
{"text": "<s>[INST] Parse the given XML document and print the text content of each node. here are the inputs def parse_xml(root): \n  for node in root.getchildren():\n      print(node.text) [/INST] \\n <book><title>The Adventures of Tom Sawyer</title><author>Mark Twain</author></book> </s>", "instruction": "Parse the given XML document and print the text content of each node.", "input": "<book><title>The Adventures of Tom Sawyer</title><author>Mark Twain</author></book>", "output": "def parse_xml(root): \n  for node in root.getchildren():\n      print(node.text)"}
{"text": "<s>[INST] Modify the following line of code to calculate the average of the elements in a given list. here are the inputs sum(list)/len(list) [/INST] \\n sum(list) </s>", "instruction": "Modify the following line of code to calculate the average of the elements in a given list.", "input": "sum(list)", "output": "sum(list)/len(list)"}
{"text": "<s>[INST] Develop a function to tokenize a sentence into words here are the inputs def tokenize_sentence(sentence):\n    tokens = sentence.split(' ')\n    return tokens\n\ntokens = tokenize_sentence(\"The quick brown fox jumped over the lazy dog\")\nprint(tokens) [/INST] \\n The quick brown fox jumped over the lazy dog </s>", "instruction": "Develop a function to tokenize a sentence into words", "input": "The quick brown fox jumped over the lazy dog", "output": "def tokenize_sentence(sentence):\n    tokens = sentence.split(' ')\n    return tokens\n\ntokens = tokenize_sentence(\"The quick brown fox jumped over the lazy dog\")\nprint(tokens)"}
{"text": "<s>[INST] Import the necessary modules and register the file descriptor and message type for QuestSettings. Do not edit the generated code. here are the inputs # Generated by the protocol buffer compiler.  DO NOT EDIT!\n# source: pogoprotos/settings/master/quest_settings.proto\n\nimport sys\n_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import message as _message\nfrom google.protobuf import reflection as _reflection\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf import descriptor_pb2\n# @@protoc_insertion_point(imports)\n\n_sym_db = _symbol_database.Default()\n\n\nfrom pogoprotos.enums import quest_type_pb2 as pogoprotos_dot_enums_dot_quest__type__pb2\nfrom pogoprotos.settings.master.quest import daily_quest_settings_pb2 as pogoprotos_dot_settings_dot_master_dot_quest_dot_daily__quest__settings__pb2\n\n\nDESCRIPTOR = _descriptor.FileDescriptor(\n  name='pogoprotos/settings/master/quest_settings.proto',\n  package='pogoprotos.settings.master',\n  syntax='proto3',\n  serialized_pb=_b('\\n/pogoprotos/settings/master/quest_settings.proto\\x12\\x1apogoprotos.settings.master\\x1a!pogoprotos/enums/quest_type.proto\\x1a;pogoprotos/settings/master/quest/daily_quest_settings.proto\\\"\\x8b\\x01\\n\\rQuestSettings\\x12/\\n\\nquest_type\\x18\\x01 \\x01(\\x0e\\x32\\x1b.pogoprotos.enums.QuestType\\x12I\\n\\x0b\\x64\\x61ily_quest\\x18\\x02 \\x01(\\x0b\\x32\\x34.pogoprotos.settings.master.quest.DailyQuestSettingsb\\x06proto3')\n  ,\n  dependencies=[pogoprotos_dot_enums_dot_quest__type__pb2.DESCRIPTOR,pogoprotos_dot_settings_dot_master_dot_quest_dot_daily__quest__settings__pb2.DESCRIPTOR,])\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\n\n\n\n\n_QUESTSETTINGS = _descriptor.Descriptor(\n  name='QuestSettings',\n  full_name='pogoprotos.settings.master.QuestSettings',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name='quest_type', full_name='pogoprotos.settings.master.QuestSettings.quest_type', index=0,\n      number=1, type=14, cpp_type=8, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name='daily_quest', full_name='pogoprotos.settings.master.QuestSettings.daily_quest', index=1,\n      number=2, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  syntax='proto3',\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=176,\n  serialized_end=315,\n)\n\n_QUESTSETTINGS.fields_by_name['quest_type'].enum_type = pogoprotos_dot_enums_dot_quest__type__pb2._QUESTTYPE\n_QUESTSETTINGS.fields_by_name['daily_quest'].message_type = pogoprotos_dot_settings_dot_master_dot_quest_dot_daily__quest__settings__pb2._DAILYQUESTSETTINGS\nDESCRIPTOR.message_types_by_name['QuestSettings'] = _QUESTSETTINGS\n\nQuestSettings = _reflection.GeneratedProtocolMessageType('QuestSettings', (_message.Message,), dict(\n  DESCRIPTOR = _QUESTSETTINGS,\n  __module__ = 'pogoprotos.settings.master.quest_settings_pb2'\n  # @@protoc_insertion_point(class_scope:pogoprotos.settings.master.QuestSettings)\n  ))\n_sym_db.RegisterMessage(QuestSettings)\n\n\n# @@protoc_insertion_point(module_scope)\n [/INST] \\n  </s>", "instruction": "Import the necessary modules and register the file descriptor and message type for QuestSettings. Do not edit the generated code.", "input": "", "output": "# Generated by the protocol buffer compiler.  DO NOT EDIT!\n# source: pogoprotos/settings/master/quest_settings.proto\n\nimport sys\n_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import message as _message\nfrom google.protobuf import reflection as _reflection\nfrom google.protobuf import symbol_database as _symbol_database\nfrom google.protobuf import descriptor_pb2\n# @@protoc_insertion_point(imports)\n\n_sym_db = _symbol_database.Default()\n\n\nfrom pogoprotos.enums import quest_type_pb2 as pogoprotos_dot_enums_dot_quest__type__pb2\nfrom pogoprotos.settings.master.quest import daily_quest_settings_pb2 as pogoprotos_dot_settings_dot_master_dot_quest_dot_daily__quest__settings__pb2\n\n\nDESCRIPTOR = _descriptor.FileDescriptor(\n  name='pogoprotos/settings/master/quest_settings.proto',\n  package='pogoprotos.settings.master',\n  syntax='proto3',\n  serialized_pb=_b('\\n/pogoprotos/settings/master/quest_settings.proto\\x12\\x1apogoprotos.settings.master\\x1a!pogoprotos/enums/quest_type.proto\\x1a;pogoprotos/settings/master/quest/daily_quest_settings.proto\\\"\\x8b\\x01\\n\\rQuestSettings\\x12/\\n\\nquest_type\\x18\\x01 \\x01(\\x0e\\x32\\x1b.pogoprotos.enums.QuestType\\x12I\\n\\x0b\\x64\\x61ily_quest\\x18\\x02 \\x01(\\x0b\\x32\\x34.pogoprotos.settings.master.quest.DailyQuestSettingsb\\x06proto3')\n  ,\n  dependencies=[pogoprotos_dot_enums_dot_quest__type__pb2.DESCRIPTOR,pogoprotos_dot_settings_dot_master_dot_quest_dot_daily__quest__settings__pb2.DESCRIPTOR,])\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\n\n\n\n\n_QUESTSETTINGS = _descriptor.Descriptor(\n  name='QuestSettings',\n  full_name='pogoprotos.settings.master.QuestSettings',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name='quest_type', full_name='pogoprotos.settings.master.QuestSettings.quest_type', index=0,\n      number=1, type=14, cpp_type=8, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n    _descriptor.FieldDescriptor(\n      name='daily_quest', full_name='pogoprotos.settings.master.QuestSettings.daily_quest', index=1,\n      number=2, type=11, cpp_type=10, label=1,\n      has_default_value=False, default_value=None,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      options=None),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  options=None,\n  is_extendable=False,\n  syntax='proto3',\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=176,\n  serialized_end=315,\n)\n\n_QUESTSETTINGS.fields_by_name['quest_type'].enum_type = pogoprotos_dot_enums_dot_quest__type__pb2._QUESTTYPE\n_QUESTSETTINGS.fields_by_name['daily_quest'].message_type = pogoprotos_dot_settings_dot_master_dot_quest_dot_daily__quest__settings__pb2._DAILYQUESTSETTINGS\nDESCRIPTOR.message_types_by_name['QuestSettings'] = _QUESTSETTINGS\n\nQuestSettings = _reflection.GeneratedProtocolMessageType('QuestSettings', (_message.Message,), dict(\n  DESCRIPTOR = _QUESTSETTINGS,\n  __module__ = 'pogoprotos.settings.master.quest_settings_pb2'\n  # @@protoc_insertion_point(class_scope:pogoprotos.settings.master.QuestSettings)\n  ))\n_sym_db.RegisterMessage(QuestSettings)\n\n\n# @@protoc_insertion_point(module_scope)\n"}
{"text": "<s>[INST] Build a machine learning model in scikit-learn that predicts the price of a house based on its size and location. here are the inputs import pandas as pd \nfrom sklearn.tree import DecisionTreeRegressor \nfrom sklearn.metrics import mean_absolute_error \n\ndata = pd.read_csv('data.csv')\n\n# Split the data into training and validation sets \ntrain_data = data[0:1500] \nval_data = data[1500:]\n\n# Get the index of the column that contains target variable \ny_name = 'price' \ny_train = train_data[y_name] \ny_val = val_data[y_name]\n\n# Get the list of the columns containing features \nx_name = ['size', 'location']  \nX_train = train_data[x_name] \nX_val = val_data[x_name]\n\n#Train\nhouse_model = DecisionTreeRegressor() \nhouse_model.fit(X_train, y_train)\n\n#Predictions \nval_predictions = house_model.predict(X_val)\n\n#Error\nval_mae = mean_absolute_error(y_val, val_predictions)\n\nprint(\"Validation MAE: {:,.2f}\".format(val_mae))\n\n# Output  Validation MAE: 0.16 [/INST] \\n Not applicable </s>", "instruction": "Build a machine learning model in scikit-learn that predicts the price of a house based on its size and location.", "input": "Not applicable", "output": "import pandas as pd \nfrom sklearn.tree import DecisionTreeRegressor \nfrom sklearn.metrics import mean_absolute_error \n\ndata = pd.read_csv('data.csv')\n\n# Split the data into training and validation sets \ntrain_data = data[0:1500] \nval_data = data[1500:]\n\n# Get the index of the column that contains target variable \ny_name = 'price' \ny_train = train_data[y_name] \ny_val = val_data[y_name]\n\n# Get the list of the columns containing features \nx_name = ['size', 'location']  \nX_train = train_data[x_name] \nX_val = val_data[x_name]\n\n#Train\nhouse_model = DecisionTreeRegressor() \nhouse_model.fit(X_train, y_train)\n\n#Predictions \nval_predictions = house_model.predict(X_val)\n\n#Error\nval_mae = mean_absolute_error(y_val, val_predictions)\n\nprint(\"Validation MAE: {:,.2f}\".format(val_mae))\n\n# Output  Validation MAE: 0.16"}
{"text": "<s>[INST] Write a JavaScript program that sums up the contents of an array. here are the inputs let array = [1, 2, 3, 4, 5];\n\nlet sum = array.reduce((acc, item) => {\n  return acc + item;\n}, 0);\n\nconsole.log(sum); // 15 [/INST] \\n let array = [1, 2, 3, 4, 5]; </s>", "instruction": "Write a JavaScript program that sums up the contents of an array.", "input": "let array = [1, 2, 3, 4, 5];", "output": "let array = [1, 2, 3, 4, 5];\n\nlet sum = array.reduce((acc, item) => {\n  return acc + item;\n}, 0);\n\nconsole.log(sum); // 15"}
{"text": "<s>[INST] Create a C++ program to find the sum of all prime numbers up to the Nth term here are the inputs #include <iostream>\nusing namespace std;\n\nbool isPrime(int n)\n{\n    if (n <= 1)\n        return false;\n    for (int i = 2; i < n; i++)\n    {\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n}\n \nint main()\n{\n    int n, sum = 0;\n\n    cout << \"Enter the Nth term: \";\n    cin >> n;\n \n    for (int i = 2; i <= n; i++)\n    {\n        if (isPrime(i))\n            sum+= i;\n    }\n    cout << \"The sum of all prime numbers up to the \"  << n <<  \"th term is \" << sum << endl;\n    return 0;\n} [/INST] \\n  </s>", "instruction": "Create a C++ program to find the sum of all prime numbers up to the Nth term", "input": "", "output": "#include <iostream>\nusing namespace std;\n\nbool isPrime(int n)\n{\n    if (n <= 1)\n        return false;\n    for (int i = 2; i < n; i++)\n    {\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n}\n \nint main()\n{\n    int n, sum = 0;\n\n    cout << \"Enter the Nth term: \";\n    cin >> n;\n \n    for (int i = 2; i <= n; i++)\n    {\n        if (isPrime(i))\n            sum+= i;\n    }\n    cout << \"The sum of all prime numbers up to the \"  << n <<  \"th term is \" << sum << endl;\n    return 0;\n}"}
{"text": "<s>[INST] Design an algorithm to find all the elements that occur an odd number of times in an array. here are the inputs function findOddOccurrences(arr) { \n    let result = []; \n  \n    // Iterate over each element \n    for (let i = 0; i < arr.length; i++) { \n  \n        // Initialize count \n        let count = 0; \n  \n        // Iterate over the rest of the elements \n        for (let j = 0; j < arr.length; j++) { \n            // If the current element is equal to other, \n            // increment the count \n            if (arr[i] == arr[j]) { \n                count++; \n            } \n        } \n  \n        // If the count is odd, add the element to the result \n        if (count % 2 != 0) { \n            result.push(arr[i]); \n        } \n    } \n  \n    return result; \n} [/INST] \\n arr[] = {5, 4, 2, 5, 2, 1, 4, 5} </s>", "instruction": "Design an algorithm to find all the elements that occur an odd number of times in an array.", "input": "arr[] = {5, 4, 2, 5, 2, 1, 4, 5}", "output": "function findOddOccurrences(arr) { \n    let result = []; \n  \n    // Iterate over each element \n    for (let i = 0; i < arr.length; i++) { \n  \n        // Initialize count \n        let count = 0; \n  \n        // Iterate over the rest of the elements \n        for (let j = 0; j < arr.length; j++) { \n            // If the current element is equal to other, \n            // increment the count \n            if (arr[i] == arr[j]) { \n                count++; \n            } \n        } \n  \n        // If the count is odd, add the element to the result \n        if (count % 2 != 0) { \n            result.push(arr[i]); \n        } \n    } \n  \n    return result; \n}"}
{"text": "<s>[INST] Rewrite the code snippet below to use the Promise API. here are the inputs fetch('http://example.com')\n .then(res => res.json())\n .then(data => console.log(data))\n .catch(error => console.log('Something went wrong')) [/INST] \\n <code>\nlet xhr = new XMLHttpRequest();\nxhr.open('GET', 'http://example.com');\nxhr.onload = () => {\n  if (xhr.status === 200) {\n    let data = JSON.parse(xhr.responseText);\n    console.log(data);\n  }\n};\nxhr.onerror = () => {\n  console.log('Something went wrong');\n};\nxhr.send();\n</code> </s>", "instruction": "Rewrite the code snippet below to use the Promise API.", "input": "<code>\nlet xhr = new XMLHttpRequest();\nxhr.open('GET', 'http://example.com');\nxhr.onload = () => {\n  if (xhr.status === 200) {\n    let data = JSON.parse(xhr.responseText);\n    console.log(data);\n  }\n};\nxhr.onerror = () => {\n  console.log('Something went wrong');\n};\nxhr.send();\n</code>", "output": "fetch('http://example.com')\n .then(res => res.json())\n .then(data => console.log(data))\n .catch(error => console.log('Something went wrong'))"}
{"text": "<s>[INST] Write a Python program to calculate the difference between the lowest and highest value for an array of integers. here are the inputs def diffHighestLowest(arr):\n    lowest = min(arr)\n    highest = max(arr)\n    return highest - lowest\n\narr = [12, 24, 3, 8, -1]\ndifference = diffHighestLowest(arr)\nprint(difference)  # 25 [/INST] \\n [12, 24, 3, 8, -1] </s>", "instruction": "Write a Python program to calculate the difference between the lowest and highest value for an array of integers.", "input": "[12, 24, 3, 8, -1]", "output": "def diffHighestLowest(arr):\n    lowest = min(arr)\n    highest = max(arr)\n    return highest - lowest\n\narr = [12, 24, 3, 8, -1]\ndifference = diffHighestLowest(arr)\nprint(difference)  # 25"}
{"text": "<s>[INST] Rewrite the following code snippet to find prime numbers using Python. here are the inputs def is_prime(num):\n    # Iterate from 2 to the square root of the number\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n# Iterate from 2 to n\nfor n in range(2, n+1):\n    # Check if the number is prime\n    if is_prime(n):\n        print(n) [/INST] \\n Not applicable </s>", "instruction": "Rewrite the following code snippet to find prime numbers using Python.", "input": "Not applicable", "output": "def is_prime(num):\n    # Iterate from 2 to the square root of the number\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n# Iterate from 2 to n\nfor n in range(2, n+1):\n    # Check if the number is prime\n    if is_prime(n):\n        print(n)"}
{"text": "<s>[INST] Analyze the given data and create an algorithm to identify an outlier in the data. here are the inputs def find_outlier(data):\n    positive_outlier = False\n    negative_outlier = False\n\n    for i in data:\n        if i > 0 and i > data[0] * 4:\n            positive_outlier = True\n        if i < 0 and i < data[0] * -4:\n            negative_outlier = True\n\n    if positive_outlier is True:\n        return max(data)\n    elif negative_outlier is True:\n        return min(data)\n \ndata = [1, 2, 3, 4, 10, 100]\nprint(find_outlier(data)) // returns 100 [/INST] \\n Input Data: [1, 2, 3, 4, 10, 100] </s>", "instruction": "Analyze the given data and create an algorithm to identify an outlier in the data.", "input": "Input Data: [1, 2, 3, 4, 10, 100]", "output": "def find_outlier(data):\n    positive_outlier = False\n    negative_outlier = False\n\n    for i in data:\n        if i > 0 and i > data[0] * 4:\n            positive_outlier = True\n        if i < 0 and i < data[0] * -4:\n            negative_outlier = True\n\n    if positive_outlier is True:\n        return max(data)\n    elif negative_outlier is True:\n        return min(data)\n \ndata = [1, 2, 3, 4, 10, 100]\nprint(find_outlier(data)) // returns 100"}
{"text": "<s>[INST] Create a function that takes in two strings as parameters and returns True if the first string can be sentence-aligned with the second string. here are the inputs def sentence_alignment(string1, string2):\n    \"\"\"\n    Returns True if the first string can be sentence-aligned with the second string.\n    \"\"\"\n\n    tokens1 = string1.split()\n    tokens2 = string2.split()\n    \n    # Remove punctuations \n    tokens1 = [token.strip(string.punctuation) for token in tokens1]\n    tokens2 = [token.strip(string.punctuation) for token in tokens2]\n    \n    # Compare tokens \n    if (tokens1 == tokens2):\n        return True\n\n    return False\n\nsentence_align = sentence_alignment('This is a sentence.', 'This is also a sentence.')\nprint(sentence_align) [/INST] \\n string1 = \"This is a sentence.\"\nstring2 = \"This is also a sentence.\" </s>", "instruction": "Create a function that takes in two strings as parameters and returns True if the first string can be sentence-aligned with the second string.", "input": "string1 = \"This is a sentence.\"\nstring2 = \"This is also a sentence.\"", "output": "def sentence_alignment(string1, string2):\n    \"\"\"\n    Returns True if the first string can be sentence-aligned with the second string.\n    \"\"\"\n\n    tokens1 = string1.split()\n    tokens2 = string2.split()\n    \n    # Remove punctuations \n    tokens1 = [token.strip(string.punctuation) for token in tokens1]\n    tokens2 = [token.strip(string.punctuation) for token in tokens2]\n    \n    # Compare tokens \n    if (tokens1 == tokens2):\n        return True\n\n    return False\n\nsentence_align = sentence_alignment('This is a sentence.', 'This is also a sentence.')\nprint(sentence_align)"}
{"text": "<s>[INST] Write a C++ program to calculate the area of a rectangle. here are the inputs #include <iostream>\n\nint main() {\n  // Declare Variables\n  float width, length, area;\n\n  // Take inputs of width and length\n  std::cout << \"Enter the width of the rectangle: \";\n  std::cin >> width;\n\n  std::cout << \"Enter the length of the rectangle: \";\n  std::cin >> length;\n\n  // Calculate the area Of rectangle\n  area = length * width;\n\n  // Display the result\n  std::cout << \"Area of the rectangle is: \" << area;\n\n  return 0;\n} [/INST] \\n two numbers that represent the width and length of the rectangle </s>", "instruction": "Write a C++ program to calculate the area of a rectangle.", "input": "two numbers that represent the width and length of the rectangle", "output": "#include <iostream>\n\nint main() {\n  // Declare Variables\n  float width, length, area;\n\n  // Take inputs of width and length\n  std::cout << \"Enter the width of the rectangle: \";\n  std::cin >> width;\n\n  std::cout << \"Enter the length of the rectangle: \";\n  std::cin >> length;\n\n  // Calculate the area Of rectangle\n  area = length * width;\n\n  // Display the result\n  std::cout << \"Area of the rectangle is: \" << area;\n\n  return 0;\n}"}
{"text": "<s>[INST] Create a function to generate a Fibonacci series of 10 terms in Java. here are the inputs public static void printFibonacciSeries(int limit) { \n    int first = 0, second = 1; \n    System.out.print(first + \" \" + second + \" \"); \n\n    for(int i = 2; i < limit; i++) { \n        int third = first + second; \n        System.out.print(third + \" \"); \n        first = second; \n        second = third; \n    } \n}\n\nprintFibonacciSeries(10); [/INST] \\n  </s>", "instruction": "Create a function to generate a Fibonacci series of 10 terms in Java.", "input": "", "output": "public static void printFibonacciSeries(int limit) { \n    int first = 0, second = 1; \n    System.out.print(first + \" \" + second + \" \"); \n\n    for(int i = 2; i < limit; i++) { \n        int third = first + second; \n        System.out.print(third + \" \"); \n        first = second; \n        second = third; \n    } \n}\n\nprintFibonacciSeries(10);"}
{"text": "<s>[INST] Construct a Java program for a simple calculator. The program should include methods such as add, subtract, multiply, and divide. here are the inputs import java.util.Scanner;\n\npublic class Calculator {\n\n public void add(int a, int b) {\n System.out.println(a + b);\n }\n\n public void subtract(int a, int b) {\n System.out.println(a - b);\n }\n\n public void multiply(int a, int b) {\n System.out.println(a * b);\n }\n\n public void divide(int a, int b) {\n System.out.println(a / b);\n }\n\n public static void main(String[] args) {\n Scanner scanner = new Scanner(System.in);\n \n System.out.print(\"Enter two numbers: \");\n int a = scanner.nextInt();\n int b = scanner.nextInt();\n \n Calculator calculator = new Calculator();\n System.out.println(\"Sum: \");\n calculator.add(a, b);\n \n System.out.println(\"Difference: \");\n calculator.subtract(a, b);\n \n System.out.println(\"Product: \");\n calculator.multiply(a, b);\n \n System.out.println(\"Quotient: \");\n calculator.divide(a, b);\n }\n} [/INST] \\n Not applicable </s>", "instruction": "Construct a Java program for a simple calculator. The program should include methods such as add, subtract, multiply, and divide.", "input": "Not applicable", "output": "import java.util.Scanner;\n\npublic class Calculator {\n\n public void add(int a, int b) {\n System.out.println(a + b);\n }\n\n public void subtract(int a, int b) {\n System.out.println(a - b);\n }\n\n public void multiply(int a, int b) {\n System.out.println(a * b);\n }\n\n public void divide(int a, int b) {\n System.out.println(a / b);\n }\n\n public static void main(String[] args) {\n Scanner scanner = new Scanner(System.in);\n \n System.out.print(\"Enter two numbers: \");\n int a = scanner.nextInt();\n int b = scanner.nextInt();\n \n Calculator calculator = new Calculator();\n System.out.println(\"Sum: \");\n calculator.add(a, b);\n \n System.out.println(\"Difference: \");\n calculator.subtract(a, b);\n \n System.out.println(\"Product: \");\n calculator.multiply(a, b);\n \n System.out.println(\"Quotient: \");\n calculator.divide(a, b);\n }\n}"}
{"text": "<s>[INST] Create a program to print out the top 3 most frequent words in a given text. here are the inputs def wordFrequency(text):\n    word_dict = {}\n    words = text.split(\" \") \n    for word in words:\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    \n    sorted_dict = sorted(word_dict.items(), key=lambda x: x[1], reverse = True) \n    top_three = sorted_dict[:3]\n    for item in top_three:\n        print(item) [/INST] \\n Text = \u201cMy name is William and I love to learn\u201d </s>", "instruction": "Create a program to print out the top 3 most frequent words in a given text.", "input": "Text = \u201cMy name is William and I love to learn\u201d", "output": "def wordFrequency(text):\n    word_dict = {}\n    words = text.split(\" \") \n    for word in words:\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    \n    sorted_dict = sorted(word_dict.items(), key=lambda x: x[1], reverse = True) \n    top_three = sorted_dict[:3]\n    for item in top_three:\n        print(item)"}
{"text": "<s>[INST] Generate a query in SQL to delete rows from a table with \u2018name\u2019 equal to \u2018Jim\u2019 here are the inputs DELETE FROM TableName \nWHERE name='Jim' [/INST] \\n  </s>", "instruction": "Generate a query in SQL to delete rows from a table with \u2018name\u2019 equal to \u2018Jim\u2019", "input": "", "output": "DELETE FROM TableName \nWHERE name='Jim'"}
{"text": "<s>[INST] Generate a React component in JavaScript which displays a simple blog post. The blog post should include a title, author name, and body text. here are the inputs const BlogPost = ({ title, author, body }) => {\n  return (\n    <div>\n      <h2>{title}</h2>\n      <h3>by {author}</h3>\n      <p>{body}</p>\n    </div>\n  );\n};\n\nexport default BlogPost; [/INST] \\n  </s>", "instruction": "Generate a React component in JavaScript which displays a simple blog post. The blog post should include a title, author name, and body text.", "input": "", "output": "const BlogPost = ({ title, author, body }) => {\n  return (\n    <div>\n      <h2>{title}</h2>\n      <h3>by {author}</h3>\n      <p>{body}</p>\n    </div>\n  );\n};\n\nexport default BlogPost;"}
{"text": "<s>[INST] Create a Rust program to calculate a Fibonacci sequence for a given length. here are the inputs fn fibonacci(n: u32) -> u32 {\n    if n == 0 {\n        return 0;\n    } else if n == 1 {\n        return 1;\n    } else {\n        return fibonacci(n-1) + fibonacci(n-2)\n    }\n}\n\nfn main() {\n    let n = 10;\n    println!(\"Fibonacci Sequence for n={}:\",n);\n    for i in 0..n {\n        println!(\"{}: {}\", i, fibonacci(i));\n    }\n} [/INST] \\n Sequence length: 10 </s>", "instruction": "Create a Rust program to calculate a Fibonacci sequence for a given length.", "input": "Sequence length: 10", "output": "fn fibonacci(n: u32) -> u32 {\n    if n == 0 {\n        return 0;\n    } else if n == 1 {\n        return 1;\n    } else {\n        return fibonacci(n-1) + fibonacci(n-2)\n    }\n}\n\nfn main() {\n    let n = 10;\n    println!(\"Fibonacci Sequence for n={}:\",n);\n    for i in 0..n {\n        println!(\"{}: {}\", i, fibonacci(i));\n    }\n}"}
{"text": "<s>[INST] Design a web application to store user data. here are the inputs The web application should include features such as registration, login, account setting, and data storage. The registration page should allow a user to enter their name, email address, and create a password. The login page should allow the user to login using their email and password. The account setting page should allow the user to edit their personal profile, change their password, and delete their account. The data storage page should allow the user to store and manage their data. The web application should also be highly secure and encrypted. [/INST] \\n  </s>", "instruction": "Design a web application to store user data.", "input": "", "output": "The web application should include features such as registration, login, account setting, and data storage. The registration page should allow a user to enter their name, email address, and create a password. The login page should allow the user to login using their email and password. The account setting page should allow the user to edit their personal profile, change their password, and delete their account. The data storage page should allow the user to store and manage their data. The web application should also be highly secure and encrypted."}
{"text": "<s>[INST] Create a function that removes any repeated words in a sentence. here are the inputs def remove_repeated_words(sentence):\n    my_list = sentence.split()\n    result = \"\"\n    for word in my_list:\n        if word not in result.split():\n            result += word + \" \"\n    return result.strip() [/INST] \\n \"This sentence contains contains some repeated words words.\" </s>", "instruction": "Create a function that removes any repeated words in a sentence.", "input": "\"This sentence contains contains some repeated words words.\"", "output": "def remove_repeated_words(sentence):\n    my_list = sentence.split()\n    result = \"\"\n    for word in my_list:\n        if word not in result.split():\n            result += word + \" \"\n    return result.strip()"}
{"text": "<s>[INST] Create a Node.js microservice that exposes an API endpoint for searching a movie database. The API endpoint should accept a query parameter specifying a movie title and return a list of all matching movies. here are the inputs const express = require('express');\nconst router = express.Router();\nconst movieService = require('../service/movieService.js');\n\n// endpoint to search for a movie by title\nrouter.get('/', async function(req, res) {\n try {\n const searchTerm = req.query.title;\n const movies = await movieService.search(searchTerm);\n res.json(movies);\n } catch (err) {\n res.status(500).json({ error: err });\n }\n});\n\nmodule.exports = router; [/INST] \\n Matrix </s>", "instruction": "Create a Node.js microservice that exposes an API endpoint for searching a movie database. The API endpoint should accept a query parameter specifying a movie title and return a list of all matching movies.", "input": "Matrix", "output": "const express = require('express');\nconst router = express.Router();\nconst movieService = require('../service/movieService.js');\n\n// endpoint to search for a movie by title\nrouter.get('/', async function(req, res) {\n try {\n const searchTerm = req.query.title;\n const movies = await movieService.search(searchTerm);\n res.json(movies);\n } catch (err) {\n res.status(500).json({ error: err });\n }\n});\n\nmodule.exports = router;"}
{"text": "<s>[INST] Create a PHP class that securely stores data such as passwords and sensitive information. here are the inputs <?php\nclass SecureData {\n    private $data;\n    \n    public function __construct($data) {\n        $this->data = $data;\n    }\n    \n    public function encrypt() {\n        // Implementation of encryption algorithm\n    }\n\n    public function decrypt() {\n        // Implementation of decryption algorithm\n    }\n\n}\n\n$myData = [\n    'password' => 'mySecretPassword',\n    'accountNumber' => '1234567890'\n];\n\n$secureData = new SecureData($myData);\n$secureData->encrypt();\n\n/// Store $secureData [/INST] \\n Not applicable </s>", "instruction": "Create a PHP class that securely stores data such as passwords and sensitive information.", "input": "Not applicable", "output": "<?php\nclass SecureData {\n    private $data;\n    \n    public function __construct($data) {\n        $this->data = $data;\n    }\n    \n    public function encrypt() {\n        // Implementation of encryption algorithm\n    }\n\n    public function decrypt() {\n        // Implementation of decryption algorithm\n    }\n\n}\n\n$myData = [\n    'password' => 'mySecretPassword',\n    'accountNumber' => '1234567890'\n];\n\n$secureData = new SecureData($myData);\n$secureData->encrypt();\n\n/// Store $secureData"}
{"text": "<s>[INST] Generate a web page that displays the below table here are the inputs <html>\n    <head>\n        <title></title>\n    </head>\n    <body>\n        <table>\n            <tr>\n                <th>Name</th>\n                <th>Age</th>\n                <th>Occupation</th>\n            </tr>\n            <tr>\n                <td>John</td>\n                <td>21</td>\n                <td>Programmer</td>\n            </tr>\n            <tr> \n                <td>Jane</td>\n                <td>24</td>\n                <td>Lawyer</td>\n            </tr>\n            <tr> \n                <td>James</td>\n                <td>26</td>\n                <td>Engineer</td>\n            </tr>\n        </table>\n    </body>\n</html> [/INST] \\n Name\tAge\tOccupation\nJohn\t21\tProgrammer\nJane\t24\tLawyer\nJames\t26\tEngineer </s>", "instruction": "Generate a web page that displays the below table", "input": "Name\tAge\tOccupation\nJohn\t21\tProgrammer\nJane\t24\tLawyer\nJames\t26\tEngineer", "output": "<html>\n    <head>\n        <title></title>\n    </head>\n    <body>\n        <table>\n            <tr>\n                <th>Name</th>\n                <th>Age</th>\n                <th>Occupation</th>\n            </tr>\n            <tr>\n                <td>John</td>\n                <td>21</td>\n                <td>Programmer</td>\n            </tr>\n            <tr> \n                <td>Jane</td>\n                <td>24</td>\n                <td>Lawyer</td>\n            </tr>\n            <tr> \n                <td>James</td>\n                <td>26</td>\n                <td>Engineer</td>\n            </tr>\n        </table>\n    </body>\n</html>"}
{"text": "<s>[INST] Construct a JavaScript application that reads and parses an HTML page and displays a tree visualization of the page structure. here are the inputs const htmlparser = require(\"htmlparser\");\nconst domutils = require(\"domutils\");\n\nlet parsed = htmlparser.parse(htmlString);\nlet tree = domutils.getOuterHTMLTree(parsed);\n\n// Print tree\nfunction printTree(tree) {\n for (let child of tree.children) {\n console.log(\"Tag:\", child.name);\n console.log(\"Attributes:\", child.attribs);\n console.log(\"Text:\", child.data);\n printTree(child);\n }\n}\n\nprintTree(tree); [/INST] \\n Example HTML page:\n<html>\n <head>\n <title>My Test Page</title>\n </head>\n <body>\n <h1>Welcome</h1>\n <p>This is a test page.</p>\n <h2>First Section</h2>\n <p>Some text.</p>\n <h2>Second Section</h2>\n <p>More text.</p>\n </body>\n</html> </s>", "instruction": "Construct a JavaScript application that reads and parses an HTML page and displays a tree visualization of the page structure.", "input": "Example HTML page:\n<html>\n <head>\n <title>My Test Page</title>\n </head>\n <body>\n <h1>Welcome</h1>\n <p>This is a test page.</p>\n <h2>First Section</h2>\n <p>Some text.</p>\n <h2>Second Section</h2>\n <p>More text.</p>\n </body>\n</html>", "output": "const htmlparser = require(\"htmlparser\");\nconst domutils = require(\"domutils\");\n\nlet parsed = htmlparser.parse(htmlString);\nlet tree = domutils.getOuterHTMLTree(parsed);\n\n// Print tree\nfunction printTree(tree) {\n for (let child of tree.children) {\n console.log(\"Tag:\", child.name);\n console.log(\"Attributes:\", child.attribs);\n console.log(\"Text:\", child.data);\n printTree(child);\n }\n}\n\nprintTree(tree);"}
{"text": "<s>[INST] Develop a class in Java to store a sales employee's data including name, address, and salary. here are the inputs public class SalesEmployee {\n private String name;\n private String address;\n private double salary;\n\n public SalesEmployee(String name, String address, double salary) {\n this.name = name;\n this.address = address;\n this.salary = salary;\n }\n\n public String getName() {\n return name;\n }\n\n public void setName(String name) {\n this.name = name;\n }\n\n public String getAddress() {\n return address;\n }\n\n public void setAddress(String address) {\n this.address = address;\n }\n\n public double getSalary() {\n return salary;\n }\n\n public void setSalary(double salary) {\n this.salary = salary;\n }\n} [/INST] \\n Not applicable </s>", "instruction": "Develop a class in Java to store a sales employee's data including name, address, and salary.", "input": "Not applicable", "output": "public class SalesEmployee {\n private String name;\n private String address;\n private double salary;\n\n public SalesEmployee(String name, String address, double salary) {\n this.name = name;\n this.address = address;\n this.salary = salary;\n }\n\n public String getName() {\n return name;\n }\n\n public void setName(String name) {\n this.name = name;\n }\n\n public String getAddress() {\n return address;\n }\n\n public void setAddress(String address) {\n this.address = address;\n }\n\n public double getSalary() {\n return salary;\n }\n\n public void setSalary(double salary) {\n this.salary = salary;\n }\n}"}
{"text": "<s>[INST] Generate a list of 30 random integers between 0 and 1000 here are the inputs import random \nrandom_list = random.sample(range(0, 1000), 30)\nprint(random_list) [/INST] \\n  </s>", "instruction": "Generate a list of 30 random integers between 0 and 1000", "input": "", "output": "import random \nrandom_list = random.sample(range(0, 1000), 30)\nprint(random_list)"}
{"text": "<s>[INST] Build a PHP function that takes an array as an argument and returns a sorted array. here are the inputs <?php\n\nfunction sortArray($arr) {\n    sort($arr);\n    return $arr;\n}\n\n$arr = [2, 5, 1, 9, 0];\necho implode(',', sortArray($arr)); // Output: 0,1,2,5,9\n?> [/INST] \\n Array: [2, 5, 1, 9, 0] </s>", "instruction": "Build a PHP function that takes an array as an argument and returns a sorted array.", "input": "Array: [2, 5, 1, 9, 0]", "output": "<?php\n\nfunction sortArray($arr) {\n    sort($arr);\n    return $arr;\n}\n\n$arr = [2, 5, 1, 9, 0];\necho implode(',', sortArray($arr)); // Output: 0,1,2,5,9\n?>"}
{"text": "<s>[INST] Create a Ruby method that prints out the numbers from 0 to 50 (inclusive). here are the inputs def print_numbers\n  (0..50).each do |i|\n    puts i\n  end\nend\n\nprint_numbers [/INST] \\n  </s>", "instruction": "Create a Ruby method that prints out the numbers from 0 to 50 (inclusive).", "input": "", "output": "def print_numbers\n  (0..50).each do |i|\n    puts i\n  end\nend\n\nprint_numbers"}
{"text": "<s>[INST] Create a React.js component that takes the following input: here are the inputs import React from 'react'\n\nconst PersonList = ({data}) => (\n <div>\n {data.map(person => (\n <p key={person.name}>\n {person.name} is {person.age} years old\n </p>\n ))}\n </div>\n);\n\nexport default PersonList; [/INST] \\n An array of objects: \n[\n {name: 'Foo', age: 10}, \n {name: 'Bar', age: 11},\n {name: 'Baz', age: 12}\n] </s>", "instruction": "Create a React.js component that takes the following input:", "input": "An array of objects: \n[\n {name: 'Foo', age: 10}, \n {name: 'Bar', age: 11},\n {name: 'Baz', age: 12}\n]", "output": "import React from 'react'\n\nconst PersonList = ({data}) => (\n <div>\n {data.map(person => (\n <p key={person.name}>\n {person.name} is {person.age} years old\n </p>\n ))}\n </div>\n);\n\nexport default PersonList;"}
{"text": "<s>[INST] Develop a program to find the least common multiple of given numbers. here are the inputs // C++ program to find LCM of two given numbers\n#include<bits/stdc++.h> \nusing namespace std; \n\nint findLCM(int n1, int n2) \n{ \n\t// maximum number between n1 and n2 is stored in max\n\tint max = (n1 > n2) ? n1 : n2; \n\n\tint i = max; \n\t\n\t// Always true \n\twhile(1) \n\t{ \n\t\tif( i % n1 == 0 && i % n2 == 0 ) \n\t\t{ \n\t\t\treturn i; \n\t\t} \n\t\ti += max; \n\t} \n} \n\n// Driver program \nint main() \n{ \n\tint n1 = 2, n2 = 3; \n\tcout<<\"LCM of \"<<n1<<\" and \"<<n2<<\" is \"<<findLCM(n1, n2); \n\treturn 0; \n} [/INST] \\n Number 1 = 2, Number 2 = 3 </s>", "instruction": "Develop a program to find the least common multiple of given numbers.", "input": "Number 1 = 2, Number 2 = 3", "output": "// C++ program to find LCM of two given numbers\n#include<bits/stdc++.h> \nusing namespace std; \n\nint findLCM(int n1, int n2) \n{ \n\t// maximum number between n1 and n2 is stored in max\n\tint max = (n1 > n2) ? n1 : n2; \n\n\tint i = max; \n\t\n\t// Always true \n\twhile(1) \n\t{ \n\t\tif( i % n1 == 0 && i % n2 == 0 ) \n\t\t{ \n\t\t\treturn i; \n\t\t} \n\t\ti += max; \n\t} \n} \n\n// Driver program \nint main() \n{ \n\tint n1 = 2, n2 = 3; \n\tcout<<\"LCM of \"<<n1<<\" and \"<<n2<<\" is \"<<findLCM(n1, n2); \n\treturn 0; \n}"}
{"text": "<s>[INST] Create a Java program that generates random integers between 0 and 100 and stores them in an array. here are the inputs // Java code to generate random integers and store them in an array\nimport java.util.Random;\n\npublic class RandomIntegers {\n\n public static void main(String[] args) {\n // Create a Random object \n Random rand = new Random(); \n\n // Create an array of integers\n int[] arr = new int[10]; \n   \n // Use random() method \n // to generate random integers \n for (int i = 0; i < 10; i++) { \n arr[i] = rand.nextInt(101); \n } \n\n for (int i = 0; i < 10; i++) { \n System.out.println(arr[i]); \n } \n } \n} [/INST] \\n Not applicable </s>", "instruction": "Create a Java program that generates random integers between 0 and 100 and stores them in an array.", "input": "Not applicable", "output": "// Java code to generate random integers and store them in an array\nimport java.util.Random;\n\npublic class RandomIntegers {\n\n public static void main(String[] args) {\n // Create a Random object \n Random rand = new Random(); \n\n // Create an array of integers\n int[] arr = new int[10]; \n   \n // Use random() method \n // to generate random integers \n for (int i = 0; i < 10; i++) { \n arr[i] = rand.nextInt(101); \n } \n\n for (int i = 0; i < 10; i++) { \n System.out.println(arr[i]); \n } \n } \n}"}
{"text": "<s>[INST] Generate a program that prints out the sequence of numbers from a given number to 1. here are the inputs def generate_sequence(num):\n    # Iterate from given number to 1\n    for i in range(num, 0, -1):\n        print(i, end=\" \")\n\nif __name__ == '__main__':\n    generate_sequence(5) [/INST] \\n 5 </s>", "instruction": "Generate a program that prints out the sequence of numbers from a given number to 1.", "input": "5", "output": "def generate_sequence(num):\n    # Iterate from given number to 1\n    for i in range(num, 0, -1):\n        print(i, end=\" \")\n\nif __name__ == '__main__':\n    generate_sequence(5)"}
{"text": "<s>[INST] Write a Python program to create a dictionary where the keys are numbers between 1 and 15 (both included) and the values are square of keys. here are the inputs d = {}\n\nfor i in range(1, 16):\n    d[i] = i**2\n\nprint(d) [/INST] \\n  </s>", "instruction": "Write a Python program to create a dictionary where the keys are numbers between 1 and 15 (both included) and the values are square of keys.", "input": "", "output": "d = {}\n\nfor i in range(1, 16):\n    d[i] = i**2\n\nprint(d)"}
{"text": "<s>[INST] Create a program that takes in a list of names and outputs a list of the names sorted alphabetically. here are the inputs ['Adam', 'Jessica', 'John', 'Olivia', 'Paul'] [/INST] \\n ['John', 'Adam', 'Paul', 'Jessica', 'Olivia'] </s>", "instruction": "Create a program that takes in a list of names and outputs a list of the names sorted alphabetically.", "input": "['John', 'Adam', 'Paul', 'Jessica', 'Olivia']", "output": "['Adam', 'Jessica', 'John', 'Olivia', 'Paul']"}
{"text": "<s>[INST] Design a MySQL database for a school that stores student, teacher and class information. here are the inputs CREATE DATABASE school;\n\nUSE school;\n\nCREATE TABLE students (\nid INTEGER AUTO_INCREMENT PRIMARY KEY, \nname VARCHAR(255),\ngender VARCHAR(255),\n);\n\nCREATE TABLE teachers (\nid INTEGER AUTO_INCREMENT PRIMARY KEY, \nname VARCHAR(255),\nspecialization VARCHAR(255),\n);\n\n\nCREATE TABLE classes (\nid INTEGER AUTO_INCREMENT PRIMARY KEY,\nsubject VARCHAR(255),\nteacher_id INTEGER, \nFOREIGN KEY (teacher_id) REFERENCES teachers(id)\n);\n\nCREATE TABLE student_class (\nstudent_id INTEGER, \nclass_id INTEGER,\nFOREIGN KEY (student_id) REFERENCES students(id),\nFOREIGN KEY (class_id) REFERENCES classes(id)\n); [/INST] \\n  </s>", "instruction": "Design a MySQL database for a school that stores student, teacher and class information.", "input": "", "output": "CREATE DATABASE school;\n\nUSE school;\n\nCREATE TABLE students (\nid INTEGER AUTO_INCREMENT PRIMARY KEY, \nname VARCHAR(255),\ngender VARCHAR(255),\n);\n\nCREATE TABLE teachers (\nid INTEGER AUTO_INCREMENT PRIMARY KEY, \nname VARCHAR(255),\nspecialization VARCHAR(255),\n);\n\n\nCREATE TABLE classes (\nid INTEGER AUTO_INCREMENT PRIMARY KEY,\nsubject VARCHAR(255),\nteacher_id INTEGER, \nFOREIGN KEY (teacher_id) REFERENCES teachers(id)\n);\n\nCREATE TABLE student_class (\nstudent_id INTEGER, \nclass_id INTEGER,\nFOREIGN KEY (student_id) REFERENCES students(id),\nFOREIGN KEY (class_id) REFERENCES classes(id)\n);"}
{"text": "<s>[INST] Create a JavaScript program to calculate the total cost of an order given the cost for each item. here are the inputs function calculateTotalCost(costs) {\n    totalCost = 0;\n    for (let i in costs) {\n        totalCost += costs[i];\n    }\n    return totalCost;\n} [/INST] \\n costs = [2.96, 3.90, 4.50, 5.10] </s>", "instruction": "Create a JavaScript program to calculate the total cost of an order given the cost for each item.", "input": "costs = [2.96, 3.90, 4.50, 5.10]", "output": "function calculateTotalCost(costs) {\n    totalCost = 0;\n    for (let i in costs) {\n        totalCost += costs[i];\n    }\n    return totalCost;\n}"}
{"text": "<s>[INST] Using the provided input, write a JavaScript program to find the most recurring letter in a string. here are the inputs function findMaxOccurence(str) {\n    let count = {};\n\n    for(let ch of str){\n        if(count[ch] == undefined)\n            count[ch] = 1\n        else\n            count[ch]++\n    }\n\n    let result = { ch: '', max: 0 };\n    for(let ch in count) {\n        if(count[ch]>result.max){\n            result.ch = ch;\n            result.max = count[ch];\n        }\n    }\n    return result.ch;\n}\n\nconsole.log(findMaxOccurence(\"Hello World\")); //prints 'l' [/INST] \\n \"Hello World\" </s>", "instruction": "Using the provided input, write a JavaScript program to find the most recurring letter in a string.", "input": "\"Hello World\"", "output": "function findMaxOccurence(str) {\n    let count = {};\n\n    for(let ch of str){\n        if(count[ch] == undefined)\n            count[ch] = 1\n        else\n            count[ch]++\n    }\n\n    let result = { ch: '', max: 0 };\n    for(let ch in count) {\n        if(count[ch]>result.max){\n            result.ch = ch;\n            result.max = count[ch];\n        }\n    }\n    return result.ch;\n}\n\nconsole.log(findMaxOccurence(\"Hello World\")); //prints 'l'"}
{"text": "<s>[INST] Optimize a given program such that its running time is reduced. here are the inputs def is_prime(n):\n    \n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n\n    if n%2 == 0 or n%3 == 0:\n        return False\n    \n    i = 5\n    while i*i <= n:\n        if n%i == 0 or n%(i+2) == 0:\n            return False\n        i += 6\n    \n    return True [/INST] \\n def is_prime(n):\n    if n <= 1:\n        return False\n    for x in range(2, n):\n        if n % x == 0:\n            return False\n    return True </s>", "instruction": "Optimize a given program such that its running time is reduced.", "input": "def is_prime(n):\n    if n <= 1:\n        return False\n    for x in range(2, n):\n        if n % x == 0:\n            return False\n    return True", "output": "def is_prime(n):\n    \n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n\n    if n%2 == 0 or n%3 == 0:\n        return False\n    \n    i = 5\n    while i*i <= n:\n        if n%i == 0 or n%(i+2) == 0:\n            return False\n        i += 6\n    \n    return True"}
{"text": "<s>[INST] Optimize the following code to compute the mean of a list of numbers. here are the inputs def compute_mean(list_nums):\n    return sum(list_nums) / len(list_nums) \n\nif __name__ == '__main__':\n    list_nums = [1, 2, 3, 4, 5]\n    print(compute_mean(list_nums)) [/INST] \\n def compute_mean(list_nums):\n    mean = 0\n    for num in list_nums:\n        mean = mean + num\n    mean = mean / len(list_nums)\n    return mean\n\nlist_nums = [1, 2, 3, 4, 5] </s>", "instruction": "Optimize the following code to compute the mean of a list of numbers.", "input": "def compute_mean(list_nums):\n    mean = 0\n    for num in list_nums:\n        mean = mean + num\n    mean = mean / len(list_nums)\n    return mean\n\nlist_nums = [1, 2, 3, 4, 5]", "output": "def compute_mean(list_nums):\n    return sum(list_nums) / len(list_nums) \n\nif __name__ == '__main__':\n    list_nums = [1, 2, 3, 4, 5]\n    print(compute_mean(list_nums))"}
{"text": "<s>[INST] Create a program that checks whether one string is a sub-string of another. here are the inputs def is_substring(str1, str2):\n    return (str2 in str1)\n\nstr1 = \"Hello world\"\nstr2 = \"world\"\n\nresult = is_substring(str1, str2)\n\nif result:\n    print (\"Yes, '\", str2, \"' is a substring of \", str1)\nelse:\n    print (\"No, '\", str2, \"' is not a substring of \", str1) [/INST] \\n str1 = \"Hello world\"\nstr2 = \"world\" </s>", "instruction": "Create a program that checks whether one string is a sub-string of another.", "input": "str1 = \"Hello world\"\nstr2 = \"world\"", "output": "def is_substring(str1, str2):\n    return (str2 in str1)\n\nstr1 = \"Hello world\"\nstr2 = \"world\"\n\nresult = is_substring(str1, str2)\n\nif result:\n    print (\"Yes, '\", str2, \"' is a substring of \", str1)\nelse:\n    print (\"No, '\", str2, \"' is not a substring of \", str1)"}
{"text": "<s>[INST] Generate a program to encrypt a given text with ROT13 cipher. here are the inputs def rot13(string):\n    output = \"\"\n    for char in string:\n        if char == \" \":\n            output += char\n            continue\n        ascii_code = ord(char)\n        if ascii_code >= 97 and ascii_code <= 122:\n            if ascii_code <= 109:\n                ascii_code += 13\n            else:\n                ascii_code -= 13\n        else:\n            if ascii_code <= 77:\n                ascii_code += 13\n            else:\n                ascii_code -= 13\n        output += chr(ascii_code)\n    return output [/INST] \\n string = \"Hello World\" </s>", "instruction": "Generate a program to encrypt a given text with ROT13 cipher.", "input": "string = \"Hello World\"", "output": "def rot13(string):\n    output = \"\"\n    for char in string:\n        if char == \" \":\n            output += char\n            continue\n        ascii_code = ord(char)\n        if ascii_code >= 97 and ascii_code <= 122:\n            if ascii_code <= 109:\n                ascii_code += 13\n            else:\n                ascii_code -= 13\n        else:\n            if ascii_code <= 77:\n                ascii_code += 13\n            else:\n                ascii_code -= 13\n        output += chr(ascii_code)\n    return output"}
{"text": "<s>[INST] Write a Python program to calculate the sum of all even numbers less than or equal to n. here are the inputs def sum_of_even_numbers(n):\n result = 0\n for i in range(2, n+1, 2):\n result += i\n return result [/INST] \\n  </s>", "instruction": "Write a Python program to calculate the sum of all even numbers less than or equal to n.", "input": "", "output": "def sum_of_even_numbers(n):\n result = 0\n for i in range(2, n+1, 2):\n result += i\n return result"}
{"text": "<s>[INST] Write a PHP program that implements a simple membership system. here are the inputs <?php\n\nclass Membership {\n    private $members;\n \n    public function __construct() {\n        $this->members = [];\n    }\n \n    public function addMember($member) {\n        array_push($this->members, $member);\n    }\n \n    public function removeMember($member) {\n        if (($key = array_search($member, $this->members)) !== false) {\n            unset($this->members[$key]);\n        }\n    }\n \n    public function getMembers() {\n        return $this->members;\n    }\n} [/INST] \\n Not applicable </s>", "instruction": "Write a PHP program that implements a simple membership system.", "input": "Not applicable", "output": "<?php\n\nclass Membership {\n    private $members;\n \n    public function __construct() {\n        $this->members = [];\n    }\n \n    public function addMember($member) {\n        array_push($this->members, $member);\n    }\n \n    public function removeMember($member) {\n        if (($key = array_search($member, $this->members)) !== false) {\n            unset($this->members[$key]);\n        }\n    }\n \n    public function getMembers() {\n        return $this->members;\n    }\n}"}
{"text": "<s>[INST] Create a Matlab script that takes an array of numbers as input and finds the smallest of the numbers. here are the inputs a = [34, 5, 11, 89, 15];\nminimum = min(a);       \ndisp(minimum); [/INST] \\n [34, 5, 11, 89, 15] </s>", "instruction": "Create a Matlab script that takes an array of numbers as input and finds the smallest of the numbers.", "input": "[34, 5, 11, 89, 15]", "output": "a = [34, 5, 11, 89, 15];\nminimum = min(a);       \ndisp(minimum);"}
{"text": "<s>[INST] Find the most common value in a given list. here are the inputs def most_common_value(lst):\n    freq_dict = {}\n\n    # Iterate over the list and store the frequencies in a dictionary\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    # Sort the dictionary by values and return the key of the most frequent item\n    return sorted(freq_dict, key=freq_dict.get, reverse=True)[0] [/INST] \\n [1, 1, 2, 2, 3, 4] </s>", "instruction": "Find the most common value in a given list.", "input": "[1, 1, 2, 2, 3, 4]", "output": "def most_common_value(lst):\n    freq_dict = {}\n\n    # Iterate over the list and store the frequencies in a dictionary\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    # Sort the dictionary by values and return the key of the most frequent item\n    return sorted(freq_dict, key=freq_dict.get, reverse=True)[0]"}
{"text": "<s>[INST] Create a MongoDB query for finding all documents in a collection where the field \"age\" is between 40 and 60 here are the inputs db.collection.find(\n{\n  age: {\n   $gt: 40,\n   $lt: 60\n  }\n}\n) [/INST] \\n Not applicable </s>", "instruction": "Create a MongoDB query for finding all documents in a collection where the field \"age\" is between 40 and 60", "input": "Not applicable", "output": "db.collection.find(\n{\n  age: {\n   $gt: 40,\n   $lt: 60\n  }\n}\n)"}
{"text": "<s>[INST] Write an algorithm for calculating the maximum sum of a subarray of a given array. here are the inputs def max_sum_array(arr):\n  max_so_far=arr[0]\n  curr_max=arr[0]\n\n  for i in range(1, len(arr)):\n    curr_max= max(arr[i], curr_max + arr[i])\n    max_so_far= max(max_so_far, curr_max)\n  \n  return max_so_far\n\n#Input array\narr = [-2, 2, 5, -11, 6] \n\n#Maximum sum of subarray\nprint(max_sum_array(arr)) [/INST] \\n [-2, 2, 5, -11, 6] </s>", "instruction": "Write an algorithm for calculating the maximum sum of a subarray of a given array.", "input": "[-2, 2, 5, -11, 6]", "output": "def max_sum_array(arr):\n  max_so_far=arr[0]\n  curr_max=arr[0]\n\n  for i in range(1, len(arr)):\n    curr_max= max(arr[i], curr_max + arr[i])\n    max_so_far= max(max_so_far, curr_max)\n  \n  return max_so_far\n\n#Input array\narr = [-2, 2, 5, -11, 6] \n\n#Maximum sum of subarray\nprint(max_sum_array(arr))"}
{"text": "<s>[INST] Create a basic Android application that takes a user input and shows the user the number of occurences of each character in the input. here are the inputs import android.os.Bundle;\nimport android.support.v7.app.AppCompatActivity;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport java.util.HashMap;\nimport android.view.View;\nimport android.widget.TextView;\npublic class MainActivity extends AppCompatActivity {\n    private Button submitButton;\n    private EditText textInput;\n    private TextView outputText;\n \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n \n    submitButton = findViewById(R.id.submit_button);\n    textInput = findViewById(R.id.text_input);\n    outputText = findViewById(R.id.output_text);\n \n    submitButton.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View view) {\n            String input = textInput.getText().toString();\n            HashMap<Character, Integer> charMap = new HashMap<>();\n            for(int i=0; i<input.length(); i++) {\n                if(charMap.containsKey(input.charAt(i)))\n                    charMap.put(input.charAt(i), charMap.get(input.charAt(i)) + 1);\n                else\n                    charMap.put(input.charAt(i), 1);\n            }\n \n            String output = \"\";\n            for (Character c : charMap.keySet()) {\n                output += c + \": \" + charMap.get(c);\n                output += \"\\n\";\n            }\n            outputText.setText(output);\n        }\n    });\n \n    }\n} [/INST] \\n Not applicable </s>", "instruction": "Create a basic Android application that takes a user input and shows the user the number of occurences of each character in the input.", "input": "Not applicable", "output": "import android.os.Bundle;\nimport android.support.v7.app.AppCompatActivity;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport java.util.HashMap;\nimport android.view.View;\nimport android.widget.TextView;\npublic class MainActivity extends AppCompatActivity {\n    private Button submitButton;\n    private EditText textInput;\n    private TextView outputText;\n \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n \n    submitButton = findViewById(R.id.submit_button);\n    textInput = findViewById(R.id.text_input);\n    outputText = findViewById(R.id.output_text);\n \n    submitButton.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View view) {\n            String input = textInput.getText().toString();\n            HashMap<Character, Integer> charMap = new HashMap<>();\n            for(int i=0; i<input.length(); i++) {\n                if(charMap.containsKey(input.charAt(i)))\n                    charMap.put(input.charAt(i), charMap.get(input.charAt(i)) + 1);\n                else\n                    charMap.put(input.charAt(i), 1);\n            }\n \n            String output = \"\";\n            for (Character c : charMap.keySet()) {\n                output += c + \": \" + charMap.get(c);\n                output += \"\\n\";\n            }\n            outputText.setText(output);\n        }\n    });\n \n    }\n}"}
{"text": "<s>[INST] Create a Python script to calculate the Fibonacci numbers up to a given number. here are the inputs def Fibonacci(n): \n\tif n==0: \n\t\treturn 0\n\tif n==1: \n\t\treturn 1\n\telse: \n\t\treturn Fibonacci(n-1)+Fibonacci(n-2) [/INST] \\n  </s>", "instruction": "Create a Python script to calculate the Fibonacci numbers up to a given number.", "input": "", "output": "def Fibonacci(n): \n\tif n==0: \n\t\treturn 0\n\tif n==1: \n\t\treturn 1\n\telse: \n\t\treturn Fibonacci(n-1)+Fibonacci(n-2)"}
{"text": "<s>[INST] Create a program to compare the similarities between two supplied strings. here are the inputs \"\"\"\nCompare the similarities between two strings\n\"\"\"\n\ndef compare_strings(str1, str2):\n    # Split strings into a list of words\n    str1_list = str1.split()\n    str2_list = str2.split()\n\n    # Create an empty set for common words\n    common_words = set()\n\n    # Iterate over the words in either string\n    for word1 in str1_list:\n        for word2 in str2_list:\n            if word1 == word2:\n                common_words.add(word1)\n\n    # Calculate the number of words in common\n    num_common_words = len(common_words)\n\n    # Calculate the total number of words\n    total_words = len(str1_list) + len(str2_list)\n\n    # Calculate the similarity as a percentage\n    similarity = (num_common_words/total_words)*100\n\n    return similarity\n    \nif __name__ == '__main__':\n    str1 = \"I love eating Pizza\"\n    str2 = \"I enjoy eating pasta\"\n    similarity = compare_strings(str1,str2)\n    print(similarity) [/INST] \\n str1= \"I love eating Pizza\"\nstr2= \"I enjoy eating pasta\" </s>", "instruction": "Create a program to compare the similarities between two supplied strings.", "input": "str1= \"I love eating Pizza\"\nstr2= \"I enjoy eating pasta\"", "output": "\"\"\"\nCompare the similarities between two strings\n\"\"\"\n\ndef compare_strings(str1, str2):\n    # Split strings into a list of words\n    str1_list = str1.split()\n    str2_list = str2.split()\n\n    # Create an empty set for common words\n    common_words = set()\n\n    # Iterate over the words in either string\n    for word1 in str1_list:\n        for word2 in str2_list:\n            if word1 == word2:\n                common_words.add(word1)\n\n    # Calculate the number of words in common\n    num_common_words = len(common_words)\n\n    # Calculate the total number of words\n    total_words = len(str1_list) + len(str2_list)\n\n    # Calculate the similarity as a percentage\n    similarity = (num_common_words/total_words)*100\n\n    return similarity\n    \nif __name__ == '__main__':\n    str1 = \"I love eating Pizza\"\n    str2 = \"I enjoy eating pasta\"\n    similarity = compare_strings(str1,str2)\n    print(similarity)"}
{"text": "<s>[INST] Create a function in Node JS that takes an array of objects and counts the number of elements with a certain property, such as the number of elements with a certain amount of money. here are the inputs let countElementsWithMoney = (arr,money) => {\n let counter = 0;\n arr.forEach( e => {\n if (e.money == money){\n counter += 1;\n }\n });\n return counter;\n}\n\ncountElementsWithMoney(arr, 10); // 3 [/INST] \\n let arr = [\n {name: 'John', money: 10},\n {name: 'Mary', money: 20},\n {name: 'Bob', money: 10},\n {name: 'Susan', money: 10},\n {name: 'Adam', money: 30}\n] </s>", "instruction": "Create a function in Node JS that takes an array of objects and counts the number of elements with a certain property, such as the number of elements with a certain amount of money.", "input": "let arr = [\n {name: 'John', money: 10},\n {name: 'Mary', money: 20},\n {name: 'Bob', money: 10},\n {name: 'Susan', money: 10},\n {name: 'Adam', money: 30}\n]", "output": "let countElementsWithMoney = (arr,money) => {\n let counter = 0;\n arr.forEach( e => {\n if (e.money == money){\n counter += 1;\n }\n });\n return counter;\n}\n\ncountElementsWithMoney(arr, 10); // 3"}
{"text": "<s>[INST] Create a decision tree that classifies emails into \u2018spam\u2019 and \u2018not spam\u2019 from the following dataset. here are the inputs ----------\n  |  Root    | \n   ----------\n        |   \n -----------------\n | Contains \"Discount\" |\n -----------------\n        |\n     ----------\n    | Yes: Spam |\n     ----------\n        |\n  -----------------\n | Contains \"iPhone\" |\n  -----------------\n        |\n     ----------\n    | Yes: Spam |\n     ----------\n        |\n -----------------\n | Contains \"friend\" |\n -----------------\n        |\n     ----------\n    | No: Not Spam |\n     ---------- [/INST] \\n [\n    {\n        \u2018subject\u2019: \u2018Get discount on your next purchase!\u2019,\n        \u2018label\u2019: \u2018spam\u2019\n    },\n    {\n        \u2018subject\u2019: \u2018Hello from your best friend!\u2019,\n        \u2018label\u2019: \u2018not spam\u2019\n    },\n    {\n        \u2018subject\u2019: \u2018Get the latest iPhone today!\u2019,\n        \u2018label\u2019: \u2018spam\u2019\n    }\n] </s>", "instruction": "Create a decision tree that classifies emails into \u2018spam\u2019 and \u2018not spam\u2019 from the following dataset.", "input": "[\n    {\n        \u2018subject\u2019: \u2018Get discount on your next purchase!\u2019,\n        \u2018label\u2019: \u2018spam\u2019\n    },\n    {\n        \u2018subject\u2019: \u2018Hello from your best friend!\u2019,\n        \u2018label\u2019: \u2018not spam\u2019\n    },\n    {\n        \u2018subject\u2019: \u2018Get the latest iPhone today!\u2019,\n        \u2018label\u2019: \u2018spam\u2019\n    }\n]", "output": "----------\n  |  Root    | \n   ----------\n        |   \n -----------------\n | Contains \"Discount\" |\n -----------------\n        |\n     ----------\n    | Yes: Spam |\n     ----------\n        |\n  -----------------\n | Contains \"iPhone\" |\n  -----------------\n        |\n     ----------\n    | Yes: Spam |\n     ----------\n        |\n -----------------\n | Contains \"friend\" |\n -----------------\n        |\n     ----------\n    | No: Not Spam |\n     ----------"}
{"text": "<s>[INST] Create a syntax tree for the following expression. here are the inputs +\n      /  \\\n     4    *\n         / \\\n        5   6 [/INST] \\n 4 + 5 * 6 </s>", "instruction": "Create a syntax tree for the following expression.", "input": "4 + 5 * 6", "output": "+\n      /  \\\n     4    *\n         / \\\n        5   6"}
{"text": "<s>[INST] Write a Python program to calculate the total cost of a shopping cart. The program should consider the item prices, quantity, shipping cost, and any applicable taxes. here are the inputs items = [\n {\"name\": \"widget\", \"price\": 10, \"quantity\": 5 },\n {\"name\": \"thingy\", \"price\": 7, \"quantity\": 3 },\n {\"name\": \"doodad\", \"price\": 5, \"quantity\": 2 },\n]\n\ntaxRate = 0.095\nshippingCost = 7.50\n\ntotalCost = 0\n\nfor item in items:\n totalCost += item['price'] * item['quantity']\n\ntotalCost += totalCost * taxRate\ntotalCost += shippingCost\n\nprint('Total cost:', totalCost) [/INST] \\n [ \n {\"name\": \"widget\", \"price\": 10, \"quantity\": 5 },\n {\"name\": \"thingy\", \"price\": 7, \"quantity\": 3 },\n {\"name\": \"doodad\", \"price\": 5, \"quantity\": 2 },\n]\nShipping cost: 7.50\nTax rate: 9.5% </s>", "instruction": "Write a Python program to calculate the total cost of a shopping cart. The program should consider the item prices, quantity, shipping cost, and any applicable taxes.", "input": "[ \n {\"name\": \"widget\", \"price\": 10, \"quantity\": 5 },\n {\"name\": \"thingy\", \"price\": 7, \"quantity\": 3 },\n {\"name\": \"doodad\", \"price\": 5, \"quantity\": 2 },\n]\nShipping cost: 7.50\nTax rate: 9.5%", "output": "items = [\n {\"name\": \"widget\", \"price\": 10, \"quantity\": 5 },\n {\"name\": \"thingy\", \"price\": 7, \"quantity\": 3 },\n {\"name\": \"doodad\", \"price\": 5, \"quantity\": 2 },\n]\n\ntaxRate = 0.095\nshippingCost = 7.50\n\ntotalCost = 0\n\nfor item in items:\n totalCost += item['price'] * item['quantity']\n\ntotalCost += totalCost * taxRate\ntotalCost += shippingCost\n\nprint('Total cost:', totalCost)"}
{"text": "<s>[INST] Generate a BFS algorithm to traverse a given tree here are the inputs def BFS(tree):\n    # Create a list to hold the nodes visited\n    visited = []\n    # Create a queue\n    queue = []\n    # Enqueue the root node\n    queue.append(tree.root)\n\n    # Loop until the queue is empty\n    while queue:\n        # Dequeue the item\n        node = queue.pop(0)\n        # If node is not already visited, mark it visited and enqueue its children\n        if node not in visited:\n            visited.append(node)\n            if node.children:\n                for child in node.children:\n                    queue.append(child)\n    # Return the visited list\n    return visited [/INST] \\n  </s>", "instruction": "Generate a BFS algorithm to traverse a given tree", "input": "", "output": "def BFS(tree):\n    # Create a list to hold the nodes visited\n    visited = []\n    # Create a queue\n    queue = []\n    # Enqueue the root node\n    queue.append(tree.root)\n\n    # Loop until the queue is empty\n    while queue:\n        # Dequeue the item\n        node = queue.pop(0)\n        # If node is not already visited, mark it visited and enqueue its children\n        if node not in visited:\n            visited.append(node)\n            if node.children:\n                for child in node.children:\n                    queue.append(child)\n    # Return the visited list\n    return visited"}
{"text": "<s>[INST] Generate a SQL query to summarize the salary data of employees. here are the inputs SELECT AVG(Salary) as Average_Salary, MIN(Salary) as Minimum_Salary, MAX(Salary) as Maximum_Salary FROM salary_data; [/INST] \\n Table Name: salary_data\n\n|Employee_ID | Salary |\n|----------- |-------|\n|001 | 2000   |\n|002 | 5000   |\n|003 | 2500   |\n|004 | 6000   | </s>", "instruction": "Generate a SQL query to summarize the salary data of employees.", "input": "Table Name: salary_data\n\n|Employee_ID | Salary |\n|----------- |-------|\n|001 | 2000   |\n|002 | 5000   |\n|003 | 2500   |\n|004 | 6000   |", "output": "SELECT AVG(Salary) as Average_Salary, MIN(Salary) as Minimum_Salary, MAX(Salary) as Maximum_Salary FROM salary_data;"}
{"text": "<s>[INST] In Python, create a function to find the maximum value within a nested dictionary. here are the inputs def findMaxValue(dict):\n    max_val = None\n    for key, value in dict.items():\n        if isinstance(value, dict):\n            max_val = max(findMaxValue(value), max_val)\n        else:\n            max_val = max(value, max_val)\n    return max_val\n\nprint(findMaxValue(sample_dict)) [/INST] \\n sample_dict = {\n    \"key1\": {\n        \"value1\": 10,\n        \"value2\": 20\n    },\n    \"key2\": {\n        \"value3\": 40\n    },\n} </s>", "instruction": "In Python, create a function to find the maximum value within a nested dictionary.", "input": "sample_dict = {\n    \"key1\": {\n        \"value1\": 10,\n        \"value2\": 20\n    },\n    \"key2\": {\n        \"value3\": 40\n    },\n}", "output": "def findMaxValue(dict):\n    max_val = None\n    for key, value in dict.items():\n        if isinstance(value, dict):\n            max_val = max(findMaxValue(value), max_val)\n        else:\n            max_val = max(value, max_val)\n    return max_val\n\nprint(findMaxValue(sample_dict))"}
{"text": "<s>[INST] Create a class in Java representing an items in a to-do list, with fields id, name, and priority. here are the inputs public class ToDoItem {\n    private int id;\n    private String name; \n    private int priority; \n\n    public ToDoItem(int id, String name, int priority) {\n        this.id = id;\n        this.name = name;\n        this.priority = priority;\n    }\n\n    // Getters and Setters\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) { \n        this.id = id; \n    } \n\n    public String getName() { \n        return name; \n    } \n\n    public void setName(String name) { \n        this.name = name; \n    } \n\n    public int getPriority() { \n        return priority; \n    } \n\n    public void setPriority(int priority) { \n        this.priority = priority; \n    } \n\n} [/INST] \\n  </s>", "instruction": "Create a class in Java representing an items in a to-do list, with fields id, name, and priority.", "input": "", "output": "public class ToDoItem {\n    private int id;\n    private String name; \n    private int priority; \n\n    public ToDoItem(int id, String name, int priority) {\n        this.id = id;\n        this.name = name;\n        this.priority = priority;\n    }\n\n    // Getters and Setters\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) { \n        this.id = id; \n    } \n\n    public String getName() { \n        return name; \n    } \n\n    public void setName(String name) { \n        this.name = name; \n    } \n\n    public int getPriority() { \n        return priority; \n    } \n\n    public void setPriority(int priority) { \n        this.priority = priority; \n    } \n\n}"}
{"text": "<s>[INST] Create a C++ program to search for a certain value in an array. here are the inputs #include <iostream> \nusing namespace std; \n\n// Function to search for a value in an array \nint search (int arr[], int n, int x) { \n\tfor (int i = 0; i < n; i++) { \n\t\t// Return the index of the element if the element is found \n\t\tif (arr[i] == x) \n\t\t\treturn i; \n\t} \n\t\n\t// return -1 if the element is not found \n\treturn -1; \n} \n\n// driver code \nint main() { \n\t// Array to be searched \n\tint arr[] = {2, 3, 4, 10, 40}; \n\t\n\t// Element to be searched \n\tint x = 10; \n\t\n\tint n = sizeof(arr) / sizeof(arr[0]); \n\tint result = search(arr, n, x); \n\t\n\t(result == -1) ? cout << \"Element is not present in array\"\n\t\t\t\t: cout << \"Element is present at index \\n\" << result;\n\treturn 0;\n} [/INST] \\n  </s>", "instruction": "Create a C++ program to search for a certain value in an array.", "input": "", "output": "#include <iostream> \nusing namespace std; \n\n// Function to search for a value in an array \nint search (int arr[], int n, int x) { \n\tfor (int i = 0; i < n; i++) { \n\t\t// Return the index of the element if the element is found \n\t\tif (arr[i] == x) \n\t\t\treturn i; \n\t} \n\t\n\t// return -1 if the element is not found \n\treturn -1; \n} \n\n// driver code \nint main() { \n\t// Array to be searched \n\tint arr[] = {2, 3, 4, 10, 40}; \n\t\n\t// Element to be searched \n\tint x = 10; \n\t\n\tint n = sizeof(arr) / sizeof(arr[0]); \n\tint result = search(arr, n, x); \n\t\n\t(result == -1) ? cout << \"Element is not present in array\"\n\t\t\t\t: cout << \"Element is present at index \\n\" << result;\n\treturn 0;\n}"}
{"text": "<s>[INST] Write a function in Python that returns an object of the following time and date: Sunday March 7 5:30 PM. here are the inputs from datetime import datetime\n\ndef get_date_time():\n    dt = datetime(year=2021, month=3, day=7, hour=17, minute=30)\n    return dt\n\ndate_time = get_date_time()\nprint(date_time) # will output 2021-03-07 17:30:00 [/INST] \\n  </s>", "instruction": "Write a function in Python that returns an object of the following time and date: Sunday March 7 5:30 PM.", "input": "", "output": "from datetime import datetime\n\ndef get_date_time():\n    dt = datetime(year=2021, month=3, day=7, hour=17, minute=30)\n    return dt\n\ndate_time = get_date_time()\nprint(date_time) # will output 2021-03-07 17:30:00"}
{"text": "<s>[INST] Generate a Python program to perform matrix multiplication on two given matrices. here are the inputs def matrix_multiplication(A, B):  \n    rows_A = len(A)  \n    cols_A = len(A[0])  \n    rows_B = len(B)  \n    cols_B = len(B[0])  \n    result = [[0 for i in range(cols_B)] for j in range(rows_A)]  \n    for i in range(rows_A): \n        for j in range(cols_B): \n            for k in range(cols_A): \n                result[i][j] += A[i][k] * B[k][j] \n    return result [/INST] \\n  </s>", "instruction": "Generate a Python program to perform matrix multiplication on two given matrices.", "input": "", "output": "def matrix_multiplication(A, B):  \n    rows_A = len(A)  \n    cols_A = len(A[0])  \n    rows_B = len(B)  \n    cols_B = len(B[0])  \n    result = [[0 for i in range(cols_B)] for j in range(rows_A)]  \n    for i in range(rows_A): \n        for j in range(cols_B): \n            for k in range(cols_A): \n                result[i][j] += A[i][k] * B[k][j] \n    return result"}
{"text": "<s>[INST] Generate a program in C++ to find the longest word in a string. here are the inputs #include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstring longest_word(string str) {\n    string longest_word;\n    string current_word;\n\n    str.push_back(' ');\n\n    for (int i = 0; i < str.length(); i++) {\n        if (isspace(str[i])) {\n            if (current_word.length() > longest_word.length()) {\n                longest_word = current_word;\n            }\n            current_word.clear();\n        } else {\n            current_word.push_back(str[i]);\n        }\n    }\n    return longest_word;\n}\n\nint main() {\n    string str = \"What is the longest word in this sentence?\";\n    cout << longest_word(str);\n    return 0;\n} [/INST] \\n \"What is the longest word in this sentence?\" </s>", "instruction": "Generate a program in C++ to find the longest word in a string.", "input": "\"What is the longest word in this sentence?\"", "output": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstring longest_word(string str) {\n    string longest_word;\n    string current_word;\n\n    str.push_back(' ');\n\n    for (int i = 0; i < str.length(); i++) {\n        if (isspace(str[i])) {\n            if (current_word.length() > longest_word.length()) {\n                longest_word = current_word;\n            }\n            current_word.clear();\n        } else {\n            current_word.push_back(str[i]);\n        }\n    }\n    return longest_word;\n}\n\nint main() {\n    string str = \"What is the longest word in this sentence?\";\n    cout << longest_word(str);\n    return 0;\n}"}
{"text": "<s>[INST] Generate an array of 5 integers in C++ with the following conditions: the elements should be unique and even. here are the inputs int main() {\n    int arr[5] = {};\n    int count = 0; \n\n    for (int i = 0; i < 5; i++) {\n        int num = 2 * (rand() % 5 + 1);\n        bool flag = false;\n        for (int j = 0; j < 5; j++) {\n            if (arr[j] == num) {\n                flag = true; \n                break; \n            }\n        }\n        if (flag == false) {\n            arr[count++] = num;\n        }\n    }\n   \n    for (int i = 0; i < 5; i++) {\n        cout << arr[i] << \" \";\n    }\n    cout << endl;\n   \n   return 0;\n} [/INST] \\n  </s>", "instruction": "Generate an array of 5 integers in C++ with the following conditions: the elements should be unique and even.", "input": "", "output": "int main() {\n    int arr[5] = {};\n    int count = 0; \n\n    for (int i = 0; i < 5; i++) {\n        int num = 2 * (rand() % 5 + 1);\n        bool flag = false;\n        for (int j = 0; j < 5; j++) {\n            if (arr[j] == num) {\n                flag = true; \n                break; \n            }\n        }\n        if (flag == false) {\n            arr[count++] = num;\n        }\n    }\n   \n    for (int i = 0; i < 5; i++) {\n        cout << arr[i] << \" \";\n    }\n    cout << endl;\n   \n   return 0;\n}"}
{"text": "<s>[INST] Construct a program to recursively traverse a tree data structure. here are the inputs def traverse_tree(node):\n    if node == None:\n        return\n\n    # traverse left subtree\n    traverse_tree(node.left)\n    \n    # visit the node\n    print(node.val)\n\n    # traverse right subtree\n    traverse_tree(node.right) [/INST] \\n  </s>", "instruction": "Construct a program to recursively traverse a tree data structure.", "input": "", "output": "def traverse_tree(node):\n    if node == None:\n        return\n\n    # traverse left subtree\n    traverse_tree(node.left)\n    \n    # visit the node\n    print(node.val)\n\n    # traverse right subtree\n    traverse_tree(node.right)"}
{"text": "<s>[INST] Write a Python script to read an array from the user and then determine the mean and median of the array. here are the inputs def mean_median(arr): \n      arr_sum = 0 \n      for i in range(len(arr)): \n            arr_sum += arr[i] \n      \n      mean = arr_sum/len(arr) \n    \n      arr = sorted(arr) \n      if len(arr) % 2 != 0: \n            median = arr[floor(len(arr)/2)] \n      else: \n            median = (arr[len(arr)//2] + arr[len(arr)//2 - 1]) / 2\n      \n      return mean, median\n\nmean, median = mean_median(arr) \nprint(\"Mean =\", mean) \nprint(\"Median =\", median) [/INST] \\n arr = [10, 15, 20, 25, 30, 35] </s>", "instruction": "Write a Python script to read an array from the user and then determine the mean and median of the array.", "input": "arr = [10, 15, 20, 25, 30, 35]", "output": "def mean_median(arr): \n      arr_sum = 0 \n      for i in range(len(arr)): \n            arr_sum += arr[i] \n      \n      mean = arr_sum/len(arr) \n    \n      arr = sorted(arr) \n      if len(arr) % 2 != 0: \n            median = arr[floor(len(arr)/2)] \n      else: \n            median = (arr[len(arr)//2] + arr[len(arr)//2 - 1]) / 2\n      \n      return mean, median\n\nmean, median = mean_median(arr) \nprint(\"Mean =\", mean) \nprint(\"Median =\", median)"}
{"text": "<s>[INST] Create an algorithm in Python to check whether an array has even or odd number of elements. here are the inputs def is_array_even(arr): \n  if len(arr)%2 == 0:\n    return True\n  else:\n    return False [/INST] \\n [1, 2, 3, 4] </s>", "instruction": "Create an algorithm in Python to check whether an array has even or odd number of elements.", "input": "[1, 2, 3, 4]", "output": "def is_array_even(arr): \n  if len(arr)%2 == 0:\n    return True\n  else:\n    return False"}
{"text": "<s>[INST] Optimize a given piece of existing code. here are the inputs def get_data(nums):\n return [x ** 2 for x in nums if x ** 2 % 2 == 0] [/INST] \\n def get_data(nums):\n result = []\n for x in nums:\n y = x * x\n if y % 2 == 0:\n result.append(y)\n return result </s>", "instruction": "Optimize a given piece of existing code.", "input": "def get_data(nums):\n result = []\n for x in nums:\n y = x * x\n if y % 2 == 0:\n result.append(y)\n return result", "output": "def get_data(nums):\n return [x ** 2 for x in nums if x ** 2 % 2 == 0]"}
{"text": "<s>[INST] Design an HTML page with a form field to take input and create an element in the page based on the provided input. here are the inputs <html>\n  <head>\n    <title> Create Form Element </title>\n  </head>\n  <body>\n    <form onsubmit=\"createElement()\">\n      <input type=\"text\" placeholder=\"Enter Element Type\" id=\"elementType\">\n      <button type=\"submit\">Create Element</button>\n    </form>\n    <script>\n      function createElement() {\n        var type = document.getElementById(\"elementType\").value;\n        var element = document.createElement(type);\n        document.body.appendChild(element);\n      }\n    </script>\n  </body>\n</html> [/INST] \\n  </s>", "instruction": "Design an HTML page with a form field to take input and create an element in the page based on the provided input.", "input": "", "output": "<html>\n  <head>\n    <title> Create Form Element </title>\n  </head>\n  <body>\n    <form onsubmit=\"createElement()\">\n      <input type=\"text\" placeholder=\"Enter Element Type\" id=\"elementType\">\n      <button type=\"submit\">Create Element</button>\n    </form>\n    <script>\n      function createElement() {\n        var type = document.getElementById(\"elementType\").value;\n        var element = document.createElement(type);\n        document.body.appendChild(element);\n      }\n    </script>\n  </body>\n</html>"}
{"text": "<s>[INST] Create a database table to store student information such as name, age, gender and grade. here are the inputs CREATE TABLE student (\n  name VARCHAR(50) NOT NULL,\n  age INT NOT NULL,\n  gender VARCHAR(1) NOT NULL,\n  grade INT NOT NULL\n); [/INST] \\n  </s>", "instruction": "Create a database table to store student information such as name, age, gender and grade.", "input": "", "output": "CREATE TABLE student (\n  name VARCHAR(50) NOT NULL,\n  age INT NOT NULL,\n  gender VARCHAR(1) NOT NULL,\n  grade INT NOT NULL\n);"}
{"text": "<s>[INST] Edit this JavaScript code to print out every day from a given start date to an end date. here are the inputs for (let i = start_date; i<=end_date; i++){\n  let date = new Date(i * 24 * 60 * 60 * 1000);\n  console.log(date.toString());\n} [/INST] \\n start_date = 15609\nend_date = 15615 </s>", "instruction": "Edit this JavaScript code to print out every day from a given start date to an end date.", "input": "start_date = 15609\nend_date = 15615", "output": "for (let i = start_date; i<=end_date; i++){\n  let date = new Date(i * 24 * 60 * 60 * 1000);\n  console.log(date.toString());\n}"}
{"text": "<s>[INST] Implement a Python function to calculate the Gini coefficient of a given dataset. here are the inputs def gini(x):\n    \"\"\"Calculate Gini Coefficient of a given dataset.\"\"\"\n    # calculate the frequency of each item in x\n    x_value_counts = x.value_counts().sort_index() \n\n    # calculate the cumulative sum of x_value_counts\n    x_cum_sum = x_value_counts.cumsum()\n\n    # calculate the Lorenz values\n    n = len(x)\n    lorenz = x_cum_sum / n\n    lorenz = np.insert(lorenz, 0, 0) # add 0 to the beginning of array\n\n    # calculate the Gini Coefficient\n    width = lorenz[:-1] - lorenz[1:]\n    gini_coef = (1 / n) * sum(width * (lorenz[1:] + lorenz[:-1]))\n\n    return gini_coef\n\nif __name__ == '__main__':\n    x = np.array([2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,21])\n    gini_coef = gini(x)\n    print(gini_coef) # should print 0.605 [/INST] \\n [2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,21] </s>", "instruction": "Implement a Python function to calculate the Gini coefficient of a given dataset.", "input": "[2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,21]", "output": "def gini(x):\n    \"\"\"Calculate Gini Coefficient of a given dataset.\"\"\"\n    # calculate the frequency of each item in x\n    x_value_counts = x.value_counts().sort_index() \n\n    # calculate the cumulative sum of x_value_counts\n    x_cum_sum = x_value_counts.cumsum()\n\n    # calculate the Lorenz values\n    n = len(x)\n    lorenz = x_cum_sum / n\n    lorenz = np.insert(lorenz, 0, 0) # add 0 to the beginning of array\n\n    # calculate the Gini Coefficient\n    width = lorenz[:-1] - lorenz[1:]\n    gini_coef = (1 / n) * sum(width * (lorenz[1:] + lorenz[:-1]))\n\n    return gini_coef\n\nif __name__ == '__main__':\n    x = np.array([2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,21])\n    gini_coef = gini(x)\n    print(gini_coef) # should print 0.605"}
{"text": "<s>[INST] Design a Ruby algorithm to calculate the frequency of each element in an array. here are the inputs def count_frequency(arr)\n    count_hash = Hash.new(0)\n\n    arr.each do |num|\n        count_hash[num] += 1\n    end\n\n    count_hash\nend\n\narr = [1, 1, 2, 3, 5, 8, 13] \nputs count_frequency(arr) [/INST] \\n [1, 1, 2, 3, 5, 8, 13] </s>", "instruction": "Design a Ruby algorithm to calculate the frequency of each element in an array.", "input": "[1, 1, 2, 3, 5, 8, 13]", "output": "def count_frequency(arr)\n    count_hash = Hash.new(0)\n\n    arr.each do |num|\n        count_hash[num] += 1\n    end\n\n    count_hash\nend\n\narr = [1, 1, 2, 3, 5, 8, 13] \nputs count_frequency(arr)"}
{"text": "<s>[INST] Develop a Java applet that draws a spiral. here are the inputs import java.awt.*;\nimport javax.swing.JApplet;\n\npublic class SpiralApplet extends JApplet {\n\n    public void paint(Graphics canvas) {\n        int width = getWidth();\n        int height = getHeight();\n\n        int x = width/2;\n        int y = height/2;\n        int size = 200;\n        int angle = 0;\n        int thickness = 5;\n        int mult = 1;\n\n        for (int i = 0; i < 500; i++) {\n            // draw a line\n            canvas.drawLine(x, y, x + (int)(Math.cos(Math.toRadians(angle)) * size), \n                                y + (int)(Math.sin(Math.toRadians(angle)) * size));\n            // update the size and angle\n            size -= thickness * mult;\n            angle += 5 * mult;\n            mult *= -1;\n        }\n    }\n\n} [/INST] \\n  </s>", "instruction": "Develop a Java applet that draws a spiral.", "input": "", "output": "import java.awt.*;\nimport javax.swing.JApplet;\n\npublic class SpiralApplet extends JApplet {\n\n    public void paint(Graphics canvas) {\n        int width = getWidth();\n        int height = getHeight();\n\n        int x = width/2;\n        int y = height/2;\n        int size = 200;\n        int angle = 0;\n        int thickness = 5;\n        int mult = 1;\n\n        for (int i = 0; i < 500; i++) {\n            // draw a line\n            canvas.drawLine(x, y, x + (int)(Math.cos(Math.toRadians(angle)) * size), \n                                y + (int)(Math.sin(Math.toRadians(angle)) * size));\n            // update the size and angle\n            size -= thickness * mult;\n            angle += 5 * mult;\n            mult *= -1;\n        }\n    }\n\n}"}
{"text": "<s>[INST] Create a Java program to check if a character is an uppercase letter or not. here are the inputs public class CountUppercase {\n    public static boolean isUppercase(char ch) {\n        return (ch >= 'A' && ch <= 'Z');\n    }\n \n    public static void main(String[] args) {\n        char ch = 'C';\n        if (isUppercase(ch))\n            System.out.println(ch + \" is an uppercase letter.\");\n        else\n            System.out.println(ch + \" is not an uppercase letter.\");\n    }\n} [/INST] \\n  </s>", "instruction": "Create a Java program to check if a character is an uppercase letter or not.", "input": "", "output": "public class CountUppercase {\n    public static boolean isUppercase(char ch) {\n        return (ch >= 'A' && ch <= 'Z');\n    }\n \n    public static void main(String[] args) {\n        char ch = 'C';\n        if (isUppercase(ch))\n            System.out.println(ch + \" is an uppercase letter.\");\n        else\n            System.out.println(ch + \" is not an uppercase letter.\");\n    }\n}"}
{"text": "<s>[INST] You need to detect the type of the following expression and name it. here are the inputs The type of the expression is arithmetic operation and the expression is addition with multiplication. [/INST] \\n 3 * 7 + 8 </s>", "instruction": "You need to detect the type of the following expression and name it.", "input": "3 * 7 + 8", "output": "The type of the expression is arithmetic operation and the expression is addition with multiplication."}
{"text": "<s>[INST] Generate a neural network model with TensorFlow and Python for classifying hand-written digits from the MNIST dataset. here are the inputs import tensorflow as tf\n\n# Import MNIST data\nfrom tensorflow.examples.tutorials.mnist import input_data\nmnist = input_data.read_data_sets(\"/tmp/data\", one_hot=True)\n\n# Parameters\nlearning_rate = 0.001\ntraining_epochs = 15\nbatch_size = 100\ndisplay_step = 1\n\n# Network Parameters\nn_hidden_1 = 256 # 1st layer number of neurons\nn_hidden_2 = 256 # 2nd layer number of neurons\nn_input = 784 # MNIST data input (img shape: 28*28)\nn_classes = 10 # MNIST total classes (0-9 digits)\n\n# tf Graph input\nX = tf.placeholder(\"float\", [None, n_input])\nY = tf.placeholder(\"float\", [None, n_classes])\n\n# Store layers weight & bias\nweights = {\n    'h1': tf.Variable(tf.random_normal([n_input, n_hidden_1])),\n    'h2': tf.Variable(tf.random_normal([n_hidden_1, n_hidden_2])),\n    'out': tf.Variable(tf.random_normal([n_hidden_2, n_classes]))\n}\nbiases = {\n    'b1': tf.Variable(tf.random_normal([n_hidden_1])),\n    'b2': tf.Variable(tf.random_normal([n_hidden_2])),\n    'out': tf.Variable(tf.random_normal([n_classes]))\n}\n\n\n# Create model\ndef multilayer_perceptron(x):\n    # Hidden fully connected layer with 256 neurons\n    layer_1 = tf.add(tf.matmul(x, weights['h1']), biases['b1'])\n    # Hidden fully connected layer with 256 neurons\n    layer_2 = tf.add(tf.matmul(layer_1, weights['h2']), biases['b2'])\n    # Output fully connected layer with a neuron for each class\n    out_layer = tf.matmul(layer_2, weights['out']) + biases['out']\n    return out_layer\n\n# Construct model\nlogits = multilayer_perceptron(X)\n\n# Define loss and optimizer\nloss_op = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(\n    logits=logits, labels=Y))\noptimizer = tf.train.AdamOptimizer(learning_rate=learning_rate)\ntrain_op = optimizer.minimize(loss_op)\n\n# Initializing the variables\ninit = tf.global_variables_initializer()\n\n# Train model\nmodel = tf.Session()\nmodel.run(init)\n\n# Training cycle\nfor epoch in range(training_epochs):\n    avg_cost = 0.\n    total_batch = int(mnist.train.num_examples/batch_size)\n    # Loop over all batches\n    for i in range(total_batch):\n        batch_x, batch_y = mnist.train.next_batch(batch_size)\n        # Run optimization op (backprop) and cost op (to get loss value)\n        _, c = model.run([train_op, loss_op], feed_dict={X: batch_x,\n                                                        Y: batch_y})\n        # Compute average loss\n        avg_cost += c / total_batch\n    # Display logs per epoch step\n    if epoch % display_step == 0:\n        print(\"Epoch:\", '%04d' % (epoch+1), \"cost=\", \\\n            \"{:.9f}\".format(avg_cost))\nprint(\"Optimization Finished!\")\n\n# Test model\npred = tf.nn.softmax(logits)  # Apply softmax to logits\ncorrect_prediction = tf.equal(tf.argmax(pred, 1), tf.argmax(Y, 1))\n# Calculate accuracy\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, \"float\"))\nprint(\"Accuracy:\", accuracy.eval({X: mnist.test.images, Y: mnist.test.labels}, model)) [/INST] \\n Not applicable </s>", "instruction": "Generate a neural network model with TensorFlow and Python for classifying hand-written digits from the MNIST dataset.", "input": "Not applicable", "output": "import tensorflow as tf\n\n# Import MNIST data\nfrom tensorflow.examples.tutorials.mnist import input_data\nmnist = input_data.read_data_sets(\"/tmp/data\", one_hot=True)\n\n# Parameters\nlearning_rate = 0.001\ntraining_epochs = 15\nbatch_size = 100\ndisplay_step = 1\n\n# Network Parameters\nn_hidden_1 = 256 # 1st layer number of neurons\nn_hidden_2 = 256 # 2nd layer number of neurons\nn_input = 784 # MNIST data input (img shape: 28*28)\nn_classes = 10 # MNIST total classes (0-9 digits)\n\n# tf Graph input\nX = tf.placeholder(\"float\", [None, n_input])\nY = tf.placeholder(\"float\", [None, n_classes])\n\n# Store layers weight & bias\nweights = {\n    'h1': tf.Variable(tf.random_normal([n_input, n_hidden_1])),\n    'h2': tf.Variable(tf.random_normal([n_hidden_1, n_hidden_2])),\n    'out': tf.Variable(tf.random_normal([n_hidden_2, n_classes]))\n}\nbiases = {\n    'b1': tf.Variable(tf.random_normal([n_hidden_1])),\n    'b2': tf.Variable(tf.random_normal([n_hidden_2])),\n    'out': tf.Variable(tf.random_normal([n_classes]))\n}\n\n\n# Create model\ndef multilayer_perceptron(x):\n    # Hidden fully connected layer with 256 neurons\n    layer_1 = tf.add(tf.matmul(x, weights['h1']), biases['b1'])\n    # Hidden fully connected layer with 256 neurons\n    layer_2 = tf.add(tf.matmul(layer_1, weights['h2']), biases['b2'])\n    # Output fully connected layer with a neuron for each class\n    out_layer = tf.matmul(layer_2, weights['out']) + biases['out']\n    return out_layer\n\n# Construct model\nlogits = multilayer_perceptron(X)\n\n# Define loss and optimizer\nloss_op = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(\n    logits=logits, labels=Y))\noptimizer = tf.train.AdamOptimizer(learning_rate=learning_rate)\ntrain_op = optimizer.minimize(loss_op)\n\n# Initializing the variables\ninit = tf.global_variables_initializer()\n\n# Train model\nmodel = tf.Session()\nmodel.run(init)\n\n# Training cycle\nfor epoch in range(training_epochs):\n    avg_cost = 0.\n    total_batch = int(mnist.train.num_examples/batch_size)\n    # Loop over all batches\n    for i in range(total_batch):\n        batch_x, batch_y = mnist.train.next_batch(batch_size)\n        # Run optimization op (backprop) and cost op (to get loss value)\n        _, c = model.run([train_op, loss_op], feed_dict={X: batch_x,\n                                                        Y: batch_y})\n        # Compute average loss\n        avg_cost += c / total_batch\n    # Display logs per epoch step\n    if epoch % display_step == 0:\n        print(\"Epoch:\", '%04d' % (epoch+1), \"cost=\", \\\n            \"{:.9f}\".format(avg_cost))\nprint(\"Optimization Finished!\")\n\n# Test model\npred = tf.nn.softmax(logits)  # Apply softmax to logits\ncorrect_prediction = tf.equal(tf.argmax(pred, 1), tf.argmax(Y, 1))\n# Calculate accuracy\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, \"float\"))\nprint(\"Accuracy:\", accuracy.eval({X: mnist.test.images, Y: mnist.test.labels}, model))"}
{"text": "<s>[INST] Create a HTML form with form elements for a user to enter their name, phone number, and email address. here are the inputs <form action=\"\">\n  <label>Name:</label>\n  <input type=\"text\" name=\"name\">\n  <label>Phone:</label>\n  <input type=\"text\" name=\"phone\">\n  <label>Email:</label>\n  <input type=\"text\" name=\"email\">\n  <button type=\"submit\">Submit</button>\n</form> [/INST] \\n Not applicable. </s>", "instruction": "Create a HTML form with form elements for a user to enter their name, phone number, and email address.", "input": "Not applicable.", "output": "<form action=\"\">\n  <label>Name:</label>\n  <input type=\"text\" name=\"name\">\n  <label>Phone:</label>\n  <input type=\"text\" name=\"phone\">\n  <label>Email:</label>\n  <input type=\"text\" name=\"email\">\n  <button type=\"submit\">Submit</button>\n</form>"}
{"text": "<s>[INST] Write a function to generate a prime number sequence using Python. here are the inputs def generate_prime_numbers(n): \n        primes = [True for i in range(n+ 1)] \n        p = 2\n        while (p * p <= n): \n            if (primes[p] == True): \n                for i in range(p * p, n + 1, p): \n                    primes[i] = False\n            p += 1\n        primes[0] = False\n        primes[1] = False\n        for p in range(n + 1): \n            if primes[p]: \n                print(p) [/INST] \\n  </s>", "instruction": "Write a function to generate a prime number sequence using Python.", "input": "", "output": "def generate_prime_numbers(n): \n        primes = [True for i in range(n+ 1)] \n        p = 2\n        while (p * p <= n): \n            if (primes[p] == True): \n                for i in range(p * p, n + 1, p): \n                    primes[i] = False\n            p += 1\n        primes[0] = False\n        primes[1] = False\n        for p in range(n + 1): \n            if primes[p]: \n                print(p)"}
{"text": "<s>[INST] Construct a regular expression which matches only two-digit numbers (\"99\") here are the inputs ^[0-9]{2}$ [/INST] \\n  </s>", "instruction": "Construct a regular expression which matches only two-digit numbers (\"99\")", "input": "", "output": "^[0-9]{2}$"}
{"text": "<s>[INST] Find the maximum value of the function f(x,y) = 4y^3 -3x^4 +x^7 here are the inputs def f(x,y):\n    return (4 * (y**3)) - (3 * (x**4)) + (x**7)\n\ndef find_max(x,y):\n    best_val = f(x,y)\n    best_x = x\n    best_y = y\n\n    for i in range(-10,11):\n        for j in range(-10,11):\n            curr_val = f(i,j)\n            if curr_val > best_val:\n              best_val = curr_val\n              best_x = i\n              best_y = j\n    return (best_x, best_y, best_val)\n\nprint(\"Max value is {} at ({}, {}).\".format(*find_max(-10,10))) [/INST] \\n  </s>", "instruction": "Find the maximum value of the function f(x,y) = 4y^3 -3x^4 +x^7", "input": "", "output": "def f(x,y):\n    return (4 * (y**3)) - (3 * (x**4)) + (x**7)\n\ndef find_max(x,y):\n    best_val = f(x,y)\n    best_x = x\n    best_y = y\n\n    for i in range(-10,11):\n        for j in range(-10,11):\n            curr_val = f(i,j)\n            if curr_val > best_val:\n              best_val = curr_val\n              best_x = i\n              best_y = j\n    return (best_x, best_y, best_val)\n\nprint(\"Max value is {} at ({}, {}).\".format(*find_max(-10,10)))"}
{"text": "<s>[INST] Write a Python program that removes duplicates from a list. here are the inputs def remove_duplicates(my_list):\n return list(dict.fromkeys(my_list))\n\nmy_list = [1, 2, 3, 4, 3, 2, 1]\n\nprint(remove_duplicates(my_list)) # output [1, 2, 3, 4] [/INST] \\n Input List: [1, 2, 3, 4, 3, 2, 1] </s>", "instruction": "Write a Python program that removes duplicates from a list.", "input": "Input List: [1, 2, 3, 4, 3, 2, 1]", "output": "def remove_duplicates(my_list):\n return list(dict.fromkeys(my_list))\n\nmy_list = [1, 2, 3, 4, 3, 2, 1]\n\nprint(remove_duplicates(my_list)) # output [1, 2, 3, 4]"}
{"text": "<s>[INST] Generate a Python script to sort the given list of words. here are the inputs # function to sort the given list of words\ndef sort_words(words):\n    # sort the list of words in alphabetical order\n    words.sort()\n\n    # print the sorted list of words\n    print(words)\n\n# driver code\nwords = ['bubble', 'selection', 'quicksort', 'insertion']\nsort_words(words)\n\n# output\n['bubble', 'insertion', 'quicksort', 'selection'] [/INST] \\n ['bubble', 'selection', 'quicksort', 'insertion'] </s>", "instruction": "Generate a Python script to sort the given list of words.", "input": "['bubble', 'selection', 'quicksort', 'insertion']", "output": "# function to sort the given list of words\ndef sort_words(words):\n    # sort the list of words in alphabetical order\n    words.sort()\n\n    # print the sorted list of words\n    print(words)\n\n# driver code\nwords = ['bubble', 'selection', 'quicksort', 'insertion']\nsort_words(words)\n\n# output\n['bubble', 'insertion', 'quicksort', 'selection']"}
{"text": "<s>[INST] Develop a JavaScript function that takes a positive integer as input and prints out its binary equivalent. here are the inputs function convertToBinary(num) {\n  binary = \"\";\n  while (num > 0) {\n    binary = (num % 2) + binary;\n    num = Math.floor(num / 2);\n  }\n  return binary;\n}\n\nconst result = convertToBinary(42);\nconsole.log(result); [/INST] \\n Number : 42 </s>", "instruction": "Develop a JavaScript function that takes a positive integer as input and prints out its binary equivalent.", "input": "Number : 42", "output": "function convertToBinary(num) {\n  binary = \"\";\n  while (num > 0) {\n    binary = (num % 2) + binary;\n    num = Math.floor(num / 2);\n  }\n  return binary;\n}\n\nconst result = convertToBinary(42);\nconsole.log(result);"}
{"text": "<s>[INST] Write a for loop to iterate through a list of strings and print the number of characters of each string. here are the inputs # Iterate through the list\nfor string in string_list:\n    # Get the length of the string\n    print(\"Length of string '{}': {}\".format(string, len(string))) [/INST] \\n string_list = ['abc', 'def', 'ghi', 'jkl'] </s>", "instruction": "Write a for loop to iterate through a list of strings and print the number of characters of each string.", "input": "string_list = ['abc', 'def', 'ghi', 'jkl']", "output": "# Iterate through the list\nfor string in string_list:\n    # Get the length of the string\n    print(\"Length of string '{}': {}\".format(string, len(string)))"}
{"text": "<s>[INST] Create a whole React application for a movie ticket booking site. The application should include a user login and logout system, a \"my account\" page, a list of movies page, a page with the movie details, and a checkout page. here are the inputs import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { LoginPage } from './Pages/LoginPage';\nimport { MovieListPage } from './Pages/MovieListPage';\nimport { MovieDetailsPage } from './Pages/MovieDetailsPage';\nimport { CheckoutPage } from './Pages/CheckoutPage';\nimport { AccountPage } from './Pages/AccountPage';\n\nfunction App() {\n return (\n  <Router>\n   <Switch>\n    <Route exact path='/login' component={LoginPage} />\n    <Route exact path='/movies' component={MovieListPage} />\n    <Route exact path='/movies/:id' component={MovieDetailsPage} />\n    <Route exact path='/checkout' component={CheckoutPage} />\n    <Route exact path='/account' component={AccountPage} />\n   </Switch>\n  </Router>\n );\n}\n\nexport default App; [/INST] \\n Not applicable </s>", "instruction": "Create a whole React application for a movie ticket booking site. The application should include a user login and logout system, a \"my account\" page, a list of movies page, a page with the movie details, and a checkout page.", "input": "Not applicable", "output": "import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { LoginPage } from './Pages/LoginPage';\nimport { MovieListPage } from './Pages/MovieListPage';\nimport { MovieDetailsPage } from './Pages/MovieDetailsPage';\nimport { CheckoutPage } from './Pages/CheckoutPage';\nimport { AccountPage } from './Pages/AccountPage';\n\nfunction App() {\n return (\n  <Router>\n   <Switch>\n    <Route exact path='/login' component={LoginPage} />\n    <Route exact path='/movies' component={MovieListPage} />\n    <Route exact path='/movies/:id' component={MovieDetailsPage} />\n    <Route exact path='/checkout' component={CheckoutPage} />\n    <Route exact path='/account' component={AccountPage} />\n   </Switch>\n  </Router>\n );\n}\n\nexport default App;"}
{"text": "<s>[INST] Can you write a function to count the number of positive elements in an integer array? here are the inputs def countPositiveIntegers(arr):\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count\n\npositive_integers_count = countPositiveIntegers([-1, 0, 2, 4, -3])\nprint(\"Number of Positive Integers:\",positive_integers_count)\n# Number of Positive Integers: 3 [/INST] \\n Array: [-1, 0, 2, 4, -3] </s>", "instruction": "Can you write a function to count the number of positive elements in an integer array?", "input": "Array: [-1, 0, 2, 4, -3]", "output": "def countPositiveIntegers(arr):\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count\n\npositive_integers_count = countPositiveIntegers([-1, 0, 2, 4, -3])\nprint(\"Number of Positive Integers:\",positive_integers_count)\n# Number of Positive Integers: 3"}
{"text": "<s>[INST] Generate an anagram of a given word. here are the inputs \"repmtouc\" [/INST] \\n Word: computer </s>", "instruction": "Generate an anagram of a given word.", "input": "Word: computer", "output": "\"repmtouc\""}
{"text": "<s>[INST] Generate a REST API using Node.js and Express that enables a user to create, read, update, and delete items from a given database table. here are the inputs import { Router } from 'express'\n\nconst router = Router()\n\nrouter.get('/items', (req, res) => {\n const items = db.\n  select('*')\n  .from('items')\n \n res.json(items)\n})\n\nrouter.get('/items/:id', (req, res) => {\n const item = db.\n  select('*')\n  .from('items')\n  .where('id', req.params.id)\n \n res.json(item)\n})\n\nrouter.post('/items', (req, res) => {\n const itemData = req.body\n \n const createdItem = db('items')\n  .insert(itemData)\n  .returning('*')\n \n res.json(createdItem)\n})\n\nrouter.patch('/items/:id', (req, res) => {\n const itemData = req.body\n const updatedItem = db('items')\n  .where('id', req.params.id)\n  .update(itemData)\n   .returning('*')\n\n res.json(updatedItem)\n})\n\nrouter.delete('/items/:id', (req, res) => {\n const deletedItem = db('items')\n  .where('id', req.params.id)\n  .delete()\n  .returning('*')\n  \n  res.json(deletedItem)\n  \n})\n\nexport default router [/INST] \\n Not applicable </s>", "instruction": "Generate a REST API using Node.js and Express that enables a user to create, read, update, and delete items from a given database table.", "input": "Not applicable", "output": "import { Router } from 'express'\n\nconst router = Router()\n\nrouter.get('/items', (req, res) => {\n const items = db.\n  select('*')\n  .from('items')\n \n res.json(items)\n})\n\nrouter.get('/items/:id', (req, res) => {\n const item = db.\n  select('*')\n  .from('items')\n  .where('id', req.params.id)\n \n res.json(item)\n})\n\nrouter.post('/items', (req, res) => {\n const itemData = req.body\n \n const createdItem = db('items')\n  .insert(itemData)\n  .returning('*')\n \n res.json(createdItem)\n})\n\nrouter.patch('/items/:id', (req, res) => {\n const itemData = req.body\n const updatedItem = db('items')\n  .where('id', req.params.id)\n  .update(itemData)\n   .returning('*')\n\n res.json(updatedItem)\n})\n\nrouter.delete('/items/:id', (req, res) => {\n const deletedItem = db('items')\n  .where('id', req.params.id)\n  .delete()\n  .returning('*')\n  \n  res.json(deletedItem)\n  \n})\n\nexport default router"}
{"text": "<s>[INST] Create an Express.js route handler that returns a JSON object. here are the inputs const express = require('express');\nconst app = express();\n\napp.get('/books', (req, res) => {\n  const books = {\n    title: 'Harry Potter',\n    author: 'J.K. Rowling'\n  };\n  res.json(books);\n}); [/INST] \\n  </s>", "instruction": "Create an Express.js route handler that returns a JSON object.", "input": "", "output": "const express = require('express');\nconst app = express();\n\napp.get('/books', (req, res) => {\n  const books = {\n    title: 'Harry Potter',\n    author: 'J.K. Rowling'\n  };\n  res.json(books);\n});"}
{"text": "<s>[INST] Generate a C program to output the first seven prime numbers here are the inputs #include <stdio.h>\n \nint main() \n{\n  int curPrime = 2;\n  printf(\"%d \", curPrime); // Print the first prime number\n  for (int count = 1; count < 7; ) \n  {\n    int isPrime = 1;\n    for (int div = 2; div <= curPrime/2; div++) \n    {\n      if (curPrime % div == 0) \n      {\n        isPrime = 0;\n        break;\n      }\n    }\n    if (isPrime == 1) \n    {\n      printf(\"%d \", curPrime);\n      count++; // Increment the count\n    }\n    curPrime++;\n  }\n  return 0;\n} [/INST] \\n  </s>", "instruction": "Generate a C program to output the first seven prime numbers", "input": "", "output": "#include <stdio.h>\n \nint main() \n{\n  int curPrime = 2;\n  printf(\"%d \", curPrime); // Print the first prime number\n  for (int count = 1; count < 7; ) \n  {\n    int isPrime = 1;\n    for (int div = 2; div <= curPrime/2; div++) \n    {\n      if (curPrime % div == 0) \n      {\n        isPrime = 0;\n        break;\n      }\n    }\n    if (isPrime == 1) \n    {\n      printf(\"%d \", curPrime);\n      count++; // Increment the count\n    }\n    curPrime++;\n  }\n  return 0;\n}"}
{"text": "<s>[INST] Create a web service in Java to register a new user. here are the inputs public void registerUser(String username, String password) {\n    try {\n        String sql = \"INSERT INTO users (username, password) VALUES (?, ?)\";\n        PreparedStatement statement = connection.prepareStatement(sql);\n        statement.setString(1, username);\n        statement.setString(2, password);\n        statement.executeUpdate();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n} [/INST] \\n  </s>", "instruction": "Create a web service in Java to register a new user.", "input": "", "output": "public void registerUser(String username, String password) {\n    try {\n        String sql = \"INSERT INTO users (username, password) VALUES (?, ?)\";\n        PreparedStatement statement = connection.prepareStatement(sql);\n        statement.setString(1, username);\n        statement.setString(2, password);\n        statement.executeUpdate();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}"}
{"text": "<s>[INST] Train a decision tree model on the provided data to classify crops into different varieties. here are the inputs import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Read dataset into pandas dataframe\ndf = pd.read_csv('data.csv')\n\n# Seperate features from labels\nX = df.iloc[:, :-1].values\ny = df.iloc[:, -1].values\n\n# Split dataset into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\n\n# Create decision tree classifier\ndt_clf = DecisionTreeClassifier()\ndt_clf.fit(X_train, y_train)\n\n# Predict labels for test set\ny_pred = dt_clf.predict(X_test)\n\n# Measure accuracy of model\nacc = dt_clf.score(X_test, y_test)\nprint('Accuracy of Decision Tree model: ', acc) [/INST] \\n The data set contains 5000 records of crop observations, each with 10 features:\n\n- PH\n- Nitrogen \n- Potassium \n- Sulphur \n- Magnesium \n- Calcium \n- Boron \n- Iron \n- Manganese \n- Zinc\n\nThe label for each record is classified into one of 4 crop varieties:\n- Wheat\n- Maize\n- Cotton\n- Rice </s>", "instruction": "Train a decision tree model on the provided data to classify crops into different varieties.", "input": "The data set contains 5000 records of crop observations, each with 10 features:\n\n- PH\n- Nitrogen \n- Potassium \n- Sulphur \n- Magnesium \n- Calcium \n- Boron \n- Iron \n- Manganese \n- Zinc\n\nThe label for each record is classified into one of 4 crop varieties:\n- Wheat\n- Maize\n- Cotton\n- Rice", "output": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Read dataset into pandas dataframe\ndf = pd.read_csv('data.csv')\n\n# Seperate features from labels\nX = df.iloc[:, :-1].values\ny = df.iloc[:, -1].values\n\n# Split dataset into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\n\n# Create decision tree classifier\ndt_clf = DecisionTreeClassifier()\ndt_clf.fit(X_train, y_train)\n\n# Predict labels for test set\ny_pred = dt_clf.predict(X_test)\n\n# Measure accuracy of model\nacc = dt_clf.score(X_test, y_test)\nprint('Accuracy of Decision Tree model: ', acc)"}
{"text": "<s>[INST] Create a program which will receive two numbers and return a boolean value indicating if one of the two is a multiple of another. here are the inputs def is_multiple(num1, num2):\n    if num1 % num2 == 0:\n        return True\n    if num2 % num1 == 0:\n        return True\n    return False [/INST] \\n num1 = 9\nnum2 = 3 </s>", "instruction": "Create a program which will receive two numbers and return a boolean value indicating if one of the two is a multiple of another.", "input": "num1 = 9\nnum2 = 3", "output": "def is_multiple(num1, num2):\n    if num1 % num2 == 0:\n        return True\n    if num2 % num1 == 0:\n        return True\n    return False"}
{"text": "<s>[INST] Generate a function in Java to return the nth fibonacci number. here are the inputs public static int fibonacci(int n)\n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    int f = 0;\n    int a = 0;\n    int b = 1;\n    for (int i = 2; i <= n; i++)\n    {\n        f = a + b;\n        a = b;\n        b = f;\n    }\n    return f;\n} [/INST] \\n  </s>", "instruction": "Generate a function in Java to return the nth fibonacci number.", "input": "", "output": "public static int fibonacci(int n)\n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    int f = 0;\n    int a = 0;\n    int b = 1;\n    for (int i = 2; i <= n; i++)\n    {\n        f = a + b;\n        a = b;\n        b = f;\n    }\n    return f;\n}"}
{"text": "<s>[INST] Write a script to build a Decision Tree with given input here are the inputs def build_decision_tree(data):\n    labels = data[0]\n    tree = {labels[0]:{}} \n    for i, row in enumerate(data[1:]):\n        current_node = tree[labels[0]]\n        for j, column in enumerate(row):\n            if column not in current_node:\n                if j + 1 != len(row):\n                    current_node[column] = {}\n                    current_node = current_node[column]\n                else:\n                    current_node[column] = row[-1]\n    \n    return tree [/INST] \\n  </s>", "instruction": "Write a script to build a Decision Tree with given input", "input": "", "output": "def build_decision_tree(data):\n    labels = data[0]\n    tree = {labels[0]:{}} \n    for i, row in enumerate(data[1:]):\n        current_node = tree[labels[0]]\n        for j, column in enumerate(row):\n            if column not in current_node:\n                if j + 1 != len(row):\n                    current_node[column] = {}\n                    current_node = current_node[column]\n                else:\n                    current_node[column] = row[-1]\n    \n    return tree"}
{"text": "<s>[INST] Manually optimize a given assembly code to make it faster. here are the inputs ; Optimized Assembly Code \n        MOV AX, 0 \n        MOV CX, 20 \n        SHL AX, 1 ;Optimization \n\nLoop1:\n        CMP AX, CX \n        JG  Loop2 \n        ADD AX, AX ; Optimization\n        LOOP Loop1 \n\nLoop2:\n        RET [/INST] \\n ; Given Assembly Code \n        MOV AX, 0 \n        MOV CX, 20 \n        JMP Loop1 \n\nLoop1:\n        CMP AX, CX \n        JG  Loop2 \n        MOV DX, AX\n        XOR AX, AX\n        ADD AX, DX \n        LOOP Loop1 \n\nLoop2:\n        RET </s>", "instruction": "Manually optimize a given assembly code to make it faster.", "input": "; Given Assembly Code \n        MOV AX, 0 \n        MOV CX, 20 \n        JMP Loop1 \n\nLoop1:\n        CMP AX, CX \n        JG  Loop2 \n        MOV DX, AX\n        XOR AX, AX\n        ADD AX, DX \n        LOOP Loop1 \n\nLoop2:\n        RET", "output": "; Optimized Assembly Code \n        MOV AX, 0 \n        MOV CX, 20 \n        SHL AX, 1 ;Optimization \n\nLoop1:\n        CMP AX, CX \n        JG  Loop2 \n        ADD AX, AX ; Optimization\n        LOOP Loop1 \n\nLoop2:\n        RET"}
{"text": "<s>[INST] Generate a function for calculating the average of a list of numbers in Python. here are the inputs def avg_list(lst):\n sum = 0\n count = 0\n for i in lst:\n  sum += i\n  count += 1\n avg = sum / count\n return avg [/INST] \\n Not applicable </s>", "instruction": "Generate a function for calculating the average of a list of numbers in Python.", "input": "Not applicable", "output": "def avg_list(lst):\n sum = 0\n count = 0\n for i in lst:\n  sum += i\n  count += 1\n avg = sum / count\n return avg"}
{"text": "<s>[INST] Generate a Python program that compares two binary trees to check if they are similar. here are the inputs class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef are_similar(root1, root2):\n    if root1 is None and root2 is None:\n        return True\n    if (root1 and root2) is None or (root1 or root2) is None:\n        return False\n    if root1.val != root2.val:\n        return False\n    else:\n        return are_similar(root1.left, root2.left) and are_similar(root1.right, root2.right) [/INST] \\n  </s>", "instruction": "Generate a Python program that compares two binary trees to check if they are similar.", "input": "", "output": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef are_similar(root1, root2):\n    if root1 is None and root2 is None:\n        return True\n    if (root1 and root2) is None or (root1 or root2) is None:\n        return False\n    if root1.val != root2.val:\n        return False\n    else:\n        return are_similar(root1.left, root2.left) and are_similar(root1.right, root2.right)"}
{"text": "<s>[INST] Can you create a program that classifies a given set of numbers into three categories? The categories are \"low\", \"medium\", and \"high\", based on their values. here are the inputs def classifyData(data):\n    low = []\n    medium = []\n    high = []\n\n    for value in data:\n        if value < 5:\n            low.append(value)\n        elif value >= 5 and value <= 8:\n            medium.append(value)\n        else:\n            high.append(value)\n\n    return [low, medium, high] [/INST] \\n data = [1, 2, 7, 8, 9, 10, 11]; </s>", "instruction": "Can you create a program that classifies a given set of numbers into three categories? The categories are \"low\", \"medium\", and \"high\", based on their values.", "input": "data = [1, 2, 7, 8, 9, 10, 11];", "output": "def classifyData(data):\n    low = []\n    medium = []\n    high = []\n\n    for value in data:\n        if value < 5:\n            low.append(value)\n        elif value >= 5 and value <= 8:\n            medium.append(value)\n        else:\n            high.append(value)\n\n    return [low, medium, high]"}
{"text": "<s>[INST] Create an HTML page that contains two text boxes and a button. When the button is clicked, the two text boxes should swap the text they contain. here are the inputs <html>\n<head>\n <title>Textbox Swap</title>\n <script>\n function swap() {\n let placeholder = document.getElementById('textbox1').value;\n document.getElementById('textbox1').value = document.getElementById('textbox2').value;\n document.getElementById('textbox2').value = placeholder;\n }\n </script>\n</head>\n<body>\n <input type=\"text\" id=\"textbox1\" value=\"Input1\">\n <input type=\"text\" id=\"textbox2\" value=\"Input2\">\n <button onclick=\"swap()\">Swap</button>\n</body>\n</html> [/INST] \\n Not applicable </s>", "instruction": "Create an HTML page that contains two text boxes and a button. When the button is clicked, the two text boxes should swap the text they contain.", "input": "Not applicable", "output": "<html>\n<head>\n <title>Textbox Swap</title>\n <script>\n function swap() {\n let placeholder = document.getElementById('textbox1').value;\n document.getElementById('textbox1').value = document.getElementById('textbox2').value;\n document.getElementById('textbox2').value = placeholder;\n }\n </script>\n</head>\n<body>\n <input type=\"text\" id=\"textbox1\" value=\"Input1\">\n <input type=\"text\" id=\"textbox2\" value=\"Input2\">\n <button onclick=\"swap()\">Swap</button>\n</body>\n</html>"}
{"text": "<s>[INST] Write a SQL query to find all the orders made by customers from the US. here are the inputs SELECT order_id, customer_name\nFROM orders\nWHERE country = 'US' [/INST] \\n Table name: \u2018orders\u2019\nColumns: \u2018order_id\u2019, \u2018customer_name\u2019, \u2018country\u2019 </s>", "instruction": "Write a SQL query to find all the orders made by customers from the US.", "input": "Table name: \u2018orders\u2019\nColumns: \u2018order_id\u2019, \u2018customer_name\u2019, \u2018country\u2019", "output": "SELECT order_id, customer_name\nFROM orders\nWHERE country = 'US'"}
{"text": "<s>[INST] Write a code in JavaScript to toggle the visibility of a div. here are the inputs <script>\n  function toggleDivVisibility() {\n    let myDiv = document.getElementById(\"myDiv\");\n    if (myDiv.style.display == \"none\")\n      myDiv.style.display = \"block\";\n    else\n      myDiv.style.display = \"none\";\n  }\n</script> [/INST] \\n <div id=\"myDiv\" style=\"display:none;\"> </s>", "instruction": "Write a code in JavaScript to toggle the visibility of a div.", "input": "<div id=\"myDiv\" style=\"display:none;\">", "output": "<script>\n  function toggleDivVisibility() {\n    let myDiv = document.getElementById(\"myDiv\");\n    if (myDiv.style.display == \"none\")\n      myDiv.style.display = \"block\";\n    else\n      myDiv.style.display = \"none\";\n  }\n</script>"}
{"text": "<s>[INST] Write a SQL query to select all the employees with a salary higher than $50,000. here are the inputs SELECT * \nFROM Employees \nWHERE salary > 50000; [/INST] \\n Not applicable </s>", "instruction": "Write a SQL query to select all the employees with a salary higher than $50,000.", "input": "Not applicable", "output": "SELECT * \nFROM Employees \nWHERE salary > 50000;"}
{"text": "<s>[INST] Create an algorithm for finding a palindrome in a given string. here are the inputs def isPalindrome(inputString): \n\tleft, right = 0, len(inputString) - 1\n\n    while right >= left:\n        if not inputString[left] == inputString[right]:\n            return False\n        left += 1\n        right -= 1\n    return True [/INST] \\n  </s>", "instruction": "Create an algorithm for finding a palindrome in a given string.", "input": "", "output": "def isPalindrome(inputString): \n\tleft, right = 0, len(inputString) - 1\n\n    while right >= left:\n        if not inputString[left] == inputString[right]:\n            return False\n        left += 1\n        right -= 1\n    return True"}
{"text": "<s>[INST] How would you create a program in C# to print the first 10 Fibonacci numbers? here are the inputs public class Program\n{\n    public static void Main()\n    {\n        // create a list to store the Fibonacci numbers\n        List<int> fibonacci = new List<int>();\n\n        // first two Fibonacci numbers are 0 and 1\n        fibonacci.Add(0);\n        fibonacci.Add(1);\n\n        // calculate the next Fibonacci number and add to the list\n        for (int i = 2; i < 10; i++)\n        {\n            int val = fibonacci[i - 1] + fibonacci[i - 2];\n            fibonacci.Add(val);\n        }\n\n        // print the first 10 Fibonacci numbers\n        for(int i = 0; i < 10; i++)\n        {\n            Console.WriteLine(fibonacci[i]);\n        }\n\n        Console.ReadKey();\n    }\n} [/INST] \\n  </s>", "instruction": "How would you create a program in C# to print the first 10 Fibonacci numbers?", "input": "", "output": "public class Program\n{\n    public static void Main()\n    {\n        // create a list to store the Fibonacci numbers\n        List<int> fibonacci = new List<int>();\n\n        // first two Fibonacci numbers are 0 and 1\n        fibonacci.Add(0);\n        fibonacci.Add(1);\n\n        // calculate the next Fibonacci number and add to the list\n        for (int i = 2; i < 10; i++)\n        {\n            int val = fibonacci[i - 1] + fibonacci[i - 2];\n            fibonacci.Add(val);\n        }\n\n        // print the first 10 Fibonacci numbers\n        for(int i = 0; i < 10; i++)\n        {\n            Console.WriteLine(fibonacci[i]);\n        }\n\n        Console.ReadKey();\n    }\n}"}
{"text": "<s>[INST] Create a program for solving a quadratic equation in Python. here are the inputs import math\n  \ndef solveQuadratic(a, b, c): \n    discriminant = (b**2) - (4*a*c);\n    \n    # If discriminant is negative there are no real roots.\n    if (discriminant < 0): \n        return {\n            \"status\": false,\n            \"roots\": []\n        }\n    # If discriminant is zero, there is only one real roots.\n    elif (discriminant == 0):\n        x = -b/(2*a)\n        return {\n            \"status\": true,\n            \"roots\": [x]\n        }\n    # Otherwise there are 2 real roots \n    else:\n        x1 = (-b + math.sqrt(discriminant)) / (2*a); \n        x2 = (-b - math.sqrt(discriminant)) / (2*a); \n        return {\n            \"status\": true,\n            \"roots\": [x1, x2]\n        }\n\na = 1\nb = 3\nc = -4\n\nprint(solveQuadratic(a, b, c)) #{'status': True, 'roots': [-4.0, 1.0]} [/INST] \\n Equation: x2 + 3x - 4 = 0 </s>", "instruction": "Create a program for solving a quadratic equation in Python.", "input": "Equation: x2 + 3x - 4 = 0", "output": "import math\n  \ndef solveQuadratic(a, b, c): \n    discriminant = (b**2) - (4*a*c);\n    \n    # If discriminant is negative there are no real roots.\n    if (discriminant < 0): \n        return {\n            \"status\": false,\n            \"roots\": []\n        }\n    # If discriminant is zero, there is only one real roots.\n    elif (discriminant == 0):\n        x = -b/(2*a)\n        return {\n            \"status\": true,\n            \"roots\": [x]\n        }\n    # Otherwise there are 2 real roots \n    else:\n        x1 = (-b + math.sqrt(discriminant)) / (2*a); \n        x2 = (-b - math.sqrt(discriminant)) / (2*a); \n        return {\n            \"status\": true,\n            \"roots\": [x1, x2]\n        }\n\na = 1\nb = 3\nc = -4\n\nprint(solveQuadratic(a, b, c)) #{'status': True, 'roots': [-4.0, 1.0]}"}
{"text": "<s>[INST] Design a data structure for a priority queue to maintain tasks based on their priority. The priority queue should support operations to insert an element, remove the highest priority element, and change the priority of an existing element. here are the inputs \"\"\"\nA PriorityQueue class to maintain tasks based on their priority.\n\nThis PriorityQueue class implements a max-heap to maintain the ordering of tasks by their priority.\n\nThe priority queue supports the following operations:\n\n- insert(priority, data): Inserts a new task with the given priority and data, and updates the max-heap structure accordingly.\n\n- pop(): Removes and returns the task with the highest priority in the queue.\n\n-change_priority(new_priority, data): Changes the priority of the task with matching data to the given new_priority.\n\"\"\"\n\nclass PriorityQueueNode:\n\tdef __init__(self, priority, data):\n\t\tself.priority = priority\n\t\tself.data = data\n\n\tdef __lt__(self, other):\n\t\treturn self.priority < other.priority\n\nclass PriorityQueue:\n\tdef __init__(self):\n\t\tself.heap = []\n\n\tdef __len__(self):\n\t\treturn len(self.heap)\n\n\tdef insert(self, priority, data):\n\t\tnode = PriorityQueueNode(priority, data)\n\t\tself.heap.append(node)\n\t\tself._heapify_up(len(self.heap) - 1)\n\n\tdef pop(self):\n\t\tif len(self.heap) == 0:\n\t\t\treturn None\n\n\t\troot = self.heap[0]\n\t\tlast_node = self.heap.pop()\n\n\t\tif len(self.heap) > 0:\n\t\t\tself.heap[0] = last_node\n\t\t\tself._heapify_down(0)\n\n\t\treturn root\n\n\tdef change_priority(self, priority, data):\n\t\tfor i, node in enumerate(self.heap):\n\t\t\tif node.data == data:\n\t\t\t\tself.heap[i].priority = priority\n\t\t\t\tself._heapify_up(i)\n\t\t\t\tself._heapify_down(i)\n\t\t\t\tbreak\n\n\tdef _heapify_up(self, index):\n\t\tif index == 0:\n\t\t\treturn\n\n\t\tparent_index = (index - 1) // 2\n\n\t\tif self.heap[parent_index] < self.heap[index]:\n\t\t\tself.heap[parent_index], self.heap[index] = self.heap[index], self.heap[parent_index]\n\t\t\tself._heapify_up(parent_index)\n\n\tdef _heapify_down(self, index):\n\t\tleft_index = 2 * index + 1\n\t\tright_index = 2 * index + 2\n\t\tlargest_index = index\n\n\t\tif left_index < len(self.heap) and self.heap[left_index] > self.heap[largest_index]:\n\t\t\tlargest_index = left_index\n\n\t\tif right_index < len(self.heap) and self.heap[right_index] > self.heap[largest_index]:\n\t\t\tlargest_index = right_index\n\n\t\tif largest_index != index:\n\t\t\tself.heap[largest_index], self.heap[index] = self.heap[index], self.heap[largest_index]\n\t\t\tself._heapify_down(largest_index) [/INST] \\n Not applicable </s>", "instruction": "Design a data structure for a priority queue to maintain tasks based on their priority. The priority queue should support operations to insert an element, remove the highest priority element, and change the priority of an existing element.", "input": "Not applicable", "output": "\"\"\"\nA PriorityQueue class to maintain tasks based on their priority.\n\nThis PriorityQueue class implements a max-heap to maintain the ordering of tasks by their priority.\n\nThe priority queue supports the following operations:\n\n- insert(priority, data): Inserts a new task with the given priority and data, and updates the max-heap structure accordingly.\n\n- pop(): Removes and returns the task with the highest priority in the queue.\n\n-change_priority(new_priority, data): Changes the priority of the task with matching data to the given new_priority.\n\"\"\"\n\nclass PriorityQueueNode:\n\tdef __init__(self, priority, data):\n\t\tself.priority = priority\n\t\tself.data = data\n\n\tdef __lt__(self, other):\n\t\treturn self.priority < other.priority\n\nclass PriorityQueue:\n\tdef __init__(self):\n\t\tself.heap = []\n\n\tdef __len__(self):\n\t\treturn len(self.heap)\n\n\tdef insert(self, priority, data):\n\t\tnode = PriorityQueueNode(priority, data)\n\t\tself.heap.append(node)\n\t\tself._heapify_up(len(self.heap) - 1)\n\n\tdef pop(self):\n\t\tif len(self.heap) == 0:\n\t\t\treturn None\n\n\t\troot = self.heap[0]\n\t\tlast_node = self.heap.pop()\n\n\t\tif len(self.heap) > 0:\n\t\t\tself.heap[0] = last_node\n\t\t\tself._heapify_down(0)\n\n\t\treturn root\n\n\tdef change_priority(self, priority, data):\n\t\tfor i, node in enumerate(self.heap):\n\t\t\tif node.data == data:\n\t\t\t\tself.heap[i].priority = priority\n\t\t\t\tself._heapify_up(i)\n\t\t\t\tself._heapify_down(i)\n\t\t\t\tbreak\n\n\tdef _heapify_up(self, index):\n\t\tif index == 0:\n\t\t\treturn\n\n\t\tparent_index = (index - 1) // 2\n\n\t\tif self.heap[parent_index] < self.heap[index]:\n\t\t\tself.heap[parent_index], self.heap[index] = self.heap[index], self.heap[parent_index]\n\t\t\tself._heapify_up(parent_index)\n\n\tdef _heapify_down(self, index):\n\t\tleft_index = 2 * index + 1\n\t\tright_index = 2 * index + 2\n\t\tlargest_index = index\n\n\t\tif left_index < len(self.heap) and self.heap[left_index] > self.heap[largest_index]:\n\t\t\tlargest_index = left_index\n\n\t\tif right_index < len(self.heap) and self.heap[right_index] > self.heap[largest_index]:\n\t\t\tlargest_index = right_index\n\n\t\tif largest_index != index:\n\t\t\tself.heap[largest_index], self.heap[index] = self.heap[index], self.heap[largest_index]\n\t\t\tself._heapify_down(largest_index)"}
{"text": "<s>[INST] Create a HTML page using CSS to scroll text continuously from left to right. here are the inputs <html>\n<head>\n<style>\n/*The CSS for continuous scrolling*/\n.scrolling-text {\n    width: 200px;\n    overflow: hidden;\n    white-space: nowrap;\n    box-sizing: border-box;\n    background-color:#00FFFF;\n    color: #000;\n    animation: scrolling-text 10s linear infinite;\n}\n/* Animation for the scrolling text */\n@keyframes scrolling-text {\n    0% { text-indent: 10px; }\n    100% { text-indent: -80px; }\n }\n</style>\n</head>\n\n<div class=\"scrolling-text\"> This is an example of scrolling text. </div>\n</html> [/INST] \\n Not applicable </s>", "instruction": "Create a HTML page using CSS to scroll text continuously from left to right.", "input": "Not applicable", "output": "<html>\n<head>\n<style>\n/*The CSS for continuous scrolling*/\n.scrolling-text {\n    width: 200px;\n    overflow: hidden;\n    white-space: nowrap;\n    box-sizing: border-box;\n    background-color:#00FFFF;\n    color: #000;\n    animation: scrolling-text 10s linear infinite;\n}\n/* Animation for the scrolling text */\n@keyframes scrolling-text {\n    0% { text-indent: 10px; }\n    100% { text-indent: -80px; }\n }\n</style>\n</head>\n\n<div class=\"scrolling-text\"> This is an example of scrolling text. </div>\n</html>"}
{"text": "<s>[INST] Create a Neural Network for classifying cats and dogs using TensorFlow. here are the inputs import tensorflow as tf\nfrom tensorflow.keras.layers import Flatten, Dense\n\nmodel = tf.keras.models.Sequential()\n\nmodel.add(Flatten(input_shape=(224,224,3)))\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(2, activation='softmax'))\n\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(x_train, y_train, epochs=10) [/INST] \\n Not applicable </s>", "instruction": "Create a Neural Network for classifying cats and dogs using TensorFlow.", "input": "Not applicable", "output": "import tensorflow as tf\nfrom tensorflow.keras.layers import Flatten, Dense\n\nmodel = tf.keras.models.Sequential()\n\nmodel.add(Flatten(input_shape=(224,224,3)))\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(2, activation='softmax'))\n\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(x_train, y_train, epochs=10)"}
{"text": "<s>[INST] Construct a Python code for adding two matrices. here are the inputs def add_matrix(matrix1, matrix2):\n    if len(matrix1) != len(matrix2):\n        return 'Matrices not compatible'\n    if len(matrix1[0]) != len(matrix2[0]):\n        return 'Matrices not compatible'\n    \n    rows = len(matrix1)\n    cols = len(matrix1[0])\n    result = [[sum(row) for row in zip(*size)] for size in zip(matrix1, matrix2)]\n    \n    return result [/INST] \\n  </s>", "instruction": "Construct a Python code for adding two matrices.", "input": "", "output": "def add_matrix(matrix1, matrix2):\n    if len(matrix1) != len(matrix2):\n        return 'Matrices not compatible'\n    if len(matrix1[0]) != len(matrix2[0]):\n        return 'Matrices not compatible'\n    \n    rows = len(matrix1)\n    cols = len(matrix1[0])\n    result = [[sum(row) for row in zip(*size)] for size in zip(matrix1, matrix2)]\n    \n    return result"}
{"text": "<s>[INST] Create an HTML page with jQuery that allows a user to submit an item to a shopping list. The page should include an input field and a button to submit the item. here are the inputs <!DOCTYPE html>\n<html>\n<head>\n <title>Shopping list</title>\n <script src=\"https://code.jquery.com/jquery-3.4.1.min.js\"></script>\n <style>\n body {\n font-family: sans-serif;\n }\n </style>\n</head>\n<body>\n <input type=\"text\" id=\"item\" placeholder=\"Enter an item\" />\n <button id=\"submit\">Submit</button>\n\n <div id=\"list\">\n </div>\n\n <script>\n $(document).ready(function () {\n // Create an array to store list items\n let list = [];\n\n // Add item to array when submit button is clicked\n $(\"#submit\").click(function () {\n let item = $(\"#item\").val();\n list.push(item);\n\n // Reset input field\n $(\"#item\").val(\"\");\n });\n\n // Update list when item is added\n $(\"#submit\").click(function () {\n let listHtml = \"\";\n for (let item of list) {\n listHtml += `<li>${item}</li>`;\n }\n $(\"#list\").html(listHtml);\n });\n });\n </script>\n</body>\n</html> [/INST] \\n Not applicable </s>", "instruction": "Create an HTML page with jQuery that allows a user to submit an item to a shopping list. The page should include an input field and a button to submit the item.", "input": "Not applicable", "output": "<!DOCTYPE html>\n<html>\n<head>\n <title>Shopping list</title>\n <script src=\"https://code.jquery.com/jquery-3.4.1.min.js\"></script>\n <style>\n body {\n font-family: sans-serif;\n }\n </style>\n</head>\n<body>\n <input type=\"text\" id=\"item\" placeholder=\"Enter an item\" />\n <button id=\"submit\">Submit</button>\n\n <div id=\"list\">\n </div>\n\n <script>\n $(document).ready(function () {\n // Create an array to store list items\n let list = [];\n\n // Add item to array when submit button is clicked\n $(\"#submit\").click(function () {\n let item = $(\"#item\").val();\n list.push(item);\n\n // Reset input field\n $(\"#item\").val(\"\");\n });\n\n // Update list when item is added\n $(\"#submit\").click(function () {\n let listHtml = \"\";\n for (let item of list) {\n listHtml += `<li>${item}</li>`;\n }\n $(\"#list\").html(listHtml);\n });\n });\n </script>\n</body>\n</html>"}
{"text": "<s>[INST] Create an algorithm for optimizing a dataset by replacing missing values with the median of the dataset. here are the inputs // Function to replace missing with median\ndouble replaceMissingWithMedian(double[] arr, int n)\n{\n // Create a temporary array\n double temp[n];\n \n // Copy all valid values from arr[] to temp[]\n int j = 0;\n for (int i=0; i < n; i++)\n {\n\t if (arr[i] != 'null')\n\t\t temp[j++] = arr[i];\n }\n \n // Sort the temp array\n sort(temp, j);\n \n // Find the median\n // If number of elements is odd,\n // return the middle element\n if (j%2 == 1)\n\t return (temp[j/2]);\n \n // If number of elements is even,\n // return mean of middle two elements\n return (temp[(j-1)/2] + temp[j/2])/2.0;\n}\n \n// Replace missing with median\nfor (int i=0; i<n; i++)\n if (arr[i] == 'null')\n\t arr[i] = replaceMissingWithMedian(arr, n); [/INST] \\n [null, 4, 6, 2, 9, 10, 9, 3, 1,null] </s>", "instruction": "Create an algorithm for optimizing a dataset by replacing missing values with the median of the dataset.", "input": "[null, 4, 6, 2, 9, 10, 9, 3, 1,null]", "output": "// Function to replace missing with median\ndouble replaceMissingWithMedian(double[] arr, int n)\n{\n // Create a temporary array\n double temp[n];\n \n // Copy all valid values from arr[] to temp[]\n int j = 0;\n for (int i=0; i < n; i++)\n {\n\t if (arr[i] != 'null')\n\t\t temp[j++] = arr[i];\n }\n \n // Sort the temp array\n sort(temp, j);\n \n // Find the median\n // If number of elements is odd,\n // return the middle element\n if (j%2 == 1)\n\t return (temp[j/2]);\n \n // If number of elements is even,\n // return mean of middle two elements\n return (temp[(j-1)/2] + temp[j/2])/2.0;\n}\n \n// Replace missing with median\nfor (int i=0; i<n; i++)\n if (arr[i] == 'null')\n\t arr[i] = replaceMissingWithMedian(arr, n);"}
{"text": "<s>[INST] Generate random numbers between two given numbers using Blum-Blum-Shub algorithm. here are the inputs def BlumBlumShub(m, n):\n    bits = []\n    x = 2\n\n    for i in range(m,n+1):\n        x = (x**2) % i\n        b = int(x % 2)\n        bits.append(b)\n    return bits [/INST] \\n  </s>", "instruction": "Generate random numbers between two given numbers using Blum-Blum-Shub algorithm.", "input": "", "output": "def BlumBlumShub(m, n):\n    bits = []\n    x = 2\n\n    for i in range(m,n+1):\n        x = (x**2) % i\n        b = int(x % 2)\n        bits.append(b)\n    return bits"}
{"text": "<s>[INST] Sort the given array of integers based on the parity of the elements. here are the inputs def paritySort(array):\n    even = []\n    odd = []\n    for i in array:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    sortedArray = sorted(even) + sorted(odd)\n    return sortedArray [/INST] \\n Array = [1, 5, 2, 6] </s>", "instruction": "Sort the given array of integers based on the parity of the elements.", "input": "Array = [1, 5, 2, 6]", "output": "def paritySort(array):\n    even = []\n    odd = []\n    for i in array:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    sortedArray = sorted(even) + sorted(odd)\n    return sortedArray"}
{"text": "<s>[INST] Create an algorithm in Java that calculates the sum of the first n odd numbers. here are the inputs public class SumOddNumbers {\n \n public static void main(String[] args) {\n \n int n = 7;\n int sum = 0;\n \n for (int i = 1; i <= n; i++) {\n if (i % 2 != 0)\n sum += i;\n }\n \n System.out.println(\"The sum of the first \" + n + \" odd numbers is \" + sum);\n }\n} [/INST] \\n 7 </s>", "instruction": "Create an algorithm in Java that calculates the sum of the first n odd numbers.", "input": "7", "output": "public class SumOddNumbers {\n \n public static void main(String[] args) {\n \n int n = 7;\n int sum = 0;\n \n for (int i = 1; i <= n; i++) {\n if (i % 2 != 0)\n sum += i;\n }\n \n System.out.println(\"The sum of the first \" + n + \" odd numbers is \" + sum);\n }\n}"}
{"text": "<s>[INST] Design a program in JavaScript which will return an array containing the union of two given arrays. here are the inputs function unionArrays (arr1, arr2) {\n  let result = [];\n  let set = new Set(arr1);\n  \n  for (let i = 0; i < arr2.length; i++) {\n    if (!set.has(arr2[i])) {\n      result.push(arr2[i]);\n    }\n  }\n  \n  return result.concat(arr1);\n} [/INST] \\n [1, 2, 3], [4, 3, 5] </s>", "instruction": "Design a program in JavaScript which will return an array containing the union of two given arrays.", "input": "[1, 2, 3], [4, 3, 5]", "output": "function unionArrays (arr1, arr2) {\n  let result = [];\n  let set = new Set(arr1);\n  \n  for (let i = 0; i < arr2.length; i++) {\n    if (!set.has(arr2[i])) {\n      result.push(arr2[i]);\n    }\n  }\n  \n  return result.concat(arr1);\n}"}
{"text": "<s>[INST] Optimize the following program by using a better data structure. here are the inputs # A function to check if x is present in arr \ndef improvedFunc(arr, target):\n # Create a set from the given array \n seen = set(arr) \n  \n # Check if the target is present in the set \n if (target in seen): \n return True\n else: \n return False [/INST] \\n # A function to check if x is present in arr \ndef improveFunc(arr, target): \n  \n# Step 1: Sort the array \narr.sort() \n  \nfor i in range (0, len(arr)): \n  \n    # Step 2: Check if the target is smaller than \n    # the smallest element in the array \n    if(target <= arr[0]): \n        return False\n  \n    # Step 3: Check if the target is greater than \n    # or equal to the greatest element \n    elif(target > arr[len(arr)-1]): \n        return False\n  \n    elif(target > arr[i] and target < arr[i+1]): \n        return False\n  \n    # Step 4: Check if the target is equal to any \n    # of the elements in the array \n    elif (target == arr[i]): \n        return True\n  \n# Step 5: If none of the above conditions are True, \n# then the element is not present in the array \nreturn False </s>", "instruction": "Optimize the following program by using a better data structure.", "input": "# A function to check if x is present in arr \ndef improveFunc(arr, target): \n  \n# Step 1: Sort the array \narr.sort() \n  \nfor i in range (0, len(arr)): \n  \n    # Step 2: Check if the target is smaller than \n    # the smallest element in the array \n    if(target <= arr[0]): \n        return False\n  \n    # Step 3: Check if the target is greater than \n    # or equal to the greatest element \n    elif(target > arr[len(arr)-1]): \n        return False\n  \n    elif(target > arr[i] and target < arr[i+1]): \n        return False\n  \n    # Step 4: Check if the target is equal to any \n    # of the elements in the array \n    elif (target == arr[i]): \n        return True\n  \n# Step 5: If none of the above conditions are True, \n# then the element is not present in the array \nreturn False", "output": "# A function to check if x is present in arr \ndef improvedFunc(arr, target):\n # Create a set from the given array \n seen = set(arr) \n  \n # Check if the target is present in the set \n if (target in seen): \n return True\n else: \n return False"}
{"text": "<s>[INST] Generate a code for a sequence of numbers generated by the equation 3x - 5. here are the inputs def sequenceGen(x):\n    result = []\n    for i in x:\n        result.append( 3*i - 5)\n    return result\nx = [1, 2, 5, 8]\nprint(sequenceGen(x)) [/INST] \\n x = [1, 2, 5, 8] </s>", "instruction": "Generate a code for a sequence of numbers generated by the equation 3x - 5.", "input": "x = [1, 2, 5, 8]", "output": "def sequenceGen(x):\n    result = []\n    for i in x:\n        result.append( 3*i - 5)\n    return result\nx = [1, 2, 5, 8]\nprint(sequenceGen(x))"}
{"text": "<s>[INST] Create a program that can generate anagrams of a given string. here are the inputs def generate_anagrams(string):\n    # Get all permutations\n    permutations = list(itertools.permutations(string))\n    # Filter out duplicate permutations\n    anagrams = list(set([\"\".join(perm) for perm in permutations]))\n    return anagrams [/INST] \\n  </s>", "instruction": "Create a program that can generate anagrams of a given string.", "input": "", "output": "def generate_anagrams(string):\n    # Get all permutations\n    permutations = list(itertools.permutations(string))\n    # Filter out duplicate permutations\n    anagrams = list(set([\"\".join(perm) for perm in permutations]))\n    return anagrams"}
{"text": "<s>[INST] Create a bash script that takes a numerical argument and prints the sum of numbers from 1 to the given number. here are the inputs #!/bin/bash\n\nsum=0\n\nfor i in `seq 1 $1`\n    do\n        sum=`expr $sum + $i`\n    done\n\necho \"Sum of numbers from 1 to $1 is $sum\" [/INST] \\n  </s>", "instruction": "Create a bash script that takes a numerical argument and prints the sum of numbers from 1 to the given number.", "input": "", "output": "#!/bin/bash\n\nsum=0\n\nfor i in `seq 1 $1`\n    do\n        sum=`expr $sum + $i`\n    done\n\necho \"Sum of numbers from 1 to $1 is $sum\""}
{"text": "<s>[INST] Implement an algorithm in C++ to search an array of floats and find the value closest to a given target value. here are the inputs #include <iostream>\n#include <cmath>\n\nusing namespace std;\n\n// Function to find the closest value to the target\nfloat findClosest(float arr[], int n, float target)\n{\n    // Initialize closest value\n    float closest = arr[0];\n\n    // Start loop from 1\n    for (int i = 1; i < n; i++)\n    {\n        // Check if current value is closer than \n        // previous value\n        float diff = abs(target - arr[i]);\n        if (abs(target - closest) > diff)\n            closest = arr[i];\n    }\n \n    return closest;\n}\n\n// Driver program to test above function\nint main()\n{\n    float arr[] = { 1.2, 3.4, 5.6, 7.8};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    float target = 4.5;\n    cout << findClosest(arr, n, target);\n \n    return 0;\n} [/INST] \\n arr = [1.2, 3.4, 5.6, 7.8], target = 4.5 </s>", "instruction": "Implement an algorithm in C++ to search an array of floats and find the value closest to a given target value.", "input": "arr = [1.2, 3.4, 5.6, 7.8], target = 4.5", "output": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\n// Function to find the closest value to the target\nfloat findClosest(float arr[], int n, float target)\n{\n    // Initialize closest value\n    float closest = arr[0];\n\n    // Start loop from 1\n    for (int i = 1; i < n; i++)\n    {\n        // Check if current value is closer than \n        // previous value\n        float diff = abs(target - arr[i]);\n        if (abs(target - closest) > diff)\n            closest = arr[i];\n    }\n \n    return closest;\n}\n\n// Driver program to test above function\nint main()\n{\n    float arr[] = { 1.2, 3.4, 5.6, 7.8};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    float target = 4.5;\n    cout << findClosest(arr, n, target);\n \n    return 0;\n}"}
{"text": "<s>[INST] Explain the concept of inheritance in object-oriented programming. here are the inputs Inheritance is an important concept in object-oriented programming. It allows for the reuse of code and simplifies the organization of a program. It allows for one class (the child) to inherit all of the attributes and behaviors from another class (the parent), but also allows for the child class to extend or override the behavior as needed. This is a useful tool for creating robust, reusable code and libraries. Additionally, it helps to encapsulate code and restrict access to specific properties and methods. [/INST] \\n  </s>", "instruction": "Explain the concept of inheritance in object-oriented programming.", "input": "", "output": "Inheritance is an important concept in object-oriented programming. It allows for the reuse of code and simplifies the organization of a program. It allows for one class (the child) to inherit all of the attributes and behaviors from another class (the parent), but also allows for the child class to extend or override the behavior as needed. This is a useful tool for creating robust, reusable code and libraries. Additionally, it helps to encapsulate code and restrict access to specific properties and methods."}
{"text": "<s>[INST] Create a React Native application for tracking diet goals. The application should include a screen with a form for adding new diet goals and a list of existing diet goals. here are the inputs import React, { useState } from 'react';\nimport { View, Text, TextInput, Button } from 'react-native';\n\nconst DietTracker = () => {\n const [goalList, setGoalList] = useState([]);\n const [goalText, setGoalText] = useState('');\n\n const addGoal = () => {\n const newGoal = {\n goal: goalText\n };\n setGoalList([...goalList, newGoal]);\n setGoalText('');\n };\n\n return (\n <View>\n <TextInput\n value={goalText}\n onChangeText={setGoalText}\n placeholder=\"Add new diet goal\"\n />\n <Button title=\"Add Goal\" onPress={addGoal} />\n <View>\n {goalList.map(goal => (\n <Text>{goal.goal}</Text>\n ))}\n </View>\n </View>\n );\n};\n\nexport default DietTracker; [/INST] \\n Not applicable </s>", "instruction": "Create a React Native application for tracking diet goals. The application should include a screen with a form for adding new diet goals and a list of existing diet goals.", "input": "Not applicable", "output": "import React, { useState } from 'react';\nimport { View, Text, TextInput, Button } from 'react-native';\n\nconst DietTracker = () => {\n const [goalList, setGoalList] = useState([]);\n const [goalText, setGoalText] = useState('');\n\n const addGoal = () => {\n const newGoal = {\n goal: goalText\n };\n setGoalList([...goalList, newGoal]);\n setGoalText('');\n };\n\n return (\n <View>\n <TextInput\n value={goalText}\n onChangeText={setGoalText}\n placeholder=\"Add new diet goal\"\n />\n <Button title=\"Add Goal\" onPress={addGoal} />\n <View>\n {goalList.map(goal => (\n <Text>{goal.goal}</Text>\n ))}\n </View>\n </View>\n );\n};\n\nexport default DietTracker;"}
{"text": "<s>[INST] Develop a HTML page to list all employees from a given \"employees\" table. here are the inputs <html>\n\n<head>\n    <title>Employees List</title>\n</head>\n\n<body>\n    <h2>Employees List</h2>\n    <table>\n        <tr>\n            <th>ID</th>\n            <th>Name</th> \n            <th>Age</th>\n        </tr>\n        <?php\n             // Connect to the database\n            $host = 'localhost';\n            $user = 'root';\n            $password = '';\n\n            $db = mysqli_connect($host, $user, $password, 'employees');\n\n            // Perform query \n            $sql = \"SELECT * FROM employees\";\n\n            $result = $db->query($sql);\n\n            // Output query results to table\n            while($row = $result->fetch_assoc()) { ?>\n            <tr>\n                <td><?php echo $row['id']; ?></td>\n                <td><?php echo $row['name']; ?></td>\n                <td><?php echo $row['age']; ?></td>\n            </tr>\n             <?php } ?>\n    </table>\n</body>\n\n</html> [/INST] \\n  </s>", "instruction": "Develop a HTML page to list all employees from a given \"employees\" table.", "input": "", "output": "<html>\n\n<head>\n    <title>Employees List</title>\n</head>\n\n<body>\n    <h2>Employees List</h2>\n    <table>\n        <tr>\n            <th>ID</th>\n            <th>Name</th> \n            <th>Age</th>\n        </tr>\n        <?php\n             // Connect to the database\n            $host = 'localhost';\n            $user = 'root';\n            $password = '';\n\n            $db = mysqli_connect($host, $user, $password, 'employees');\n\n            // Perform query \n            $sql = \"SELECT * FROM employees\";\n\n            $result = $db->query($sql);\n\n            // Output query results to table\n            while($row = $result->fetch_assoc()) { ?>\n            <tr>\n                <td><?php echo $row['id']; ?></td>\n                <td><?php echo $row['name']; ?></td>\n                <td><?php echo $row['age']; ?></td>\n            </tr>\n             <?php } ?>\n    </table>\n</body>\n\n</html>"}
{"text": "<s>[INST] Construct a Bash script to check disk usage of multiple servers. here are the inputs for server in server1 server2 server3\ndo\n    df -h\ndone [/INST] \\n Server list: server1, server2, server3 </s>", "instruction": "Construct a Bash script to check disk usage of multiple servers.", "input": "Server list: server1, server2, server3", "output": "for server in server1 server2 server3\ndo\n    df -h\ndone"}
{"text": "<s>[INST] Generate a random permutation for a given list. here are the inputs import random\n \ndef random_permutation(list):\n    random.shuffle(list)\n    return list\n \nlist = [1, 2, 3, 4]\nprint(random_permutation(list)) [/INST] \\n list = [1, 2, 3, 4] </s>", "instruction": "Generate a random permutation for a given list.", "input": "list = [1, 2, 3, 4]", "output": "import random\n \ndef random_permutation(list):\n    random.shuffle(list)\n    return list\n \nlist = [1, 2, 3, 4]\nprint(random_permutation(list))"}
{"text": "<s>[INST] Create a SQL query to count the number of table rows in a given database. here are the inputs SELECT COUNT(*) FROM tablename; [/INST] \\n Not applicable </s>", "instruction": "Create a SQL query to count the number of table rows in a given database.", "input": "Not applicable", "output": "SELECT COUNT(*) FROM tablename;"}
{"text": "<s>[INST] Generate a MySQL query to select the maximum value in a given column. here are the inputs SELECT MAX(column_name) FROM table_name; [/INST] \\n  </s>", "instruction": "Generate a MySQL query to select the maximum value in a given column.", "input": "", "output": "SELECT MAX(column_name) FROM table_name;"}
{"text": "<s>[INST] Develop an algorithm for finding the longest consecutive sequence of 1s in an integer array. here are the inputs def longest_ones_sequence (arr):\n    curr_length = 0\n    max_length = 0\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            curr_length += 1\n            if curr_length > max_length:\n                max_length = curr_length\n        else:\n            curr_length = 0\n    return max_length [/INST] \\n [1, 0, 1, 1, 1, 0, 0, 1, 1, 1] </s>", "instruction": "Develop an algorithm for finding the longest consecutive sequence of 1s in an integer array.", "input": "[1, 0, 1, 1, 1, 0, 0, 1, 1, 1]", "output": "def longest_ones_sequence (arr):\n    curr_length = 0\n    max_length = 0\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            curr_length += 1\n            if curr_length > max_length:\n                max_length = curr_length\n        else:\n            curr_length = 0\n    return max_length"}
{"text": "<s>[INST] Create a basic React component which renders a search bar with a button. here are the inputs import React, { useState } from 'react'; \n\nconst SearchInput = () => {\nconst [search, setSearch] = useState('');\n\nconst handleChange = event => {\n setSearch(event.target.value);\n};\n\nconst handleSubmit = event => {\n event.preventDefault();\n // do something\n};\n\nreturn (\n <form onSubmit={handleSubmit}>\n <input type=\"text\" value={search} onChange={handleChange} />\n <button type=\"submit\">Search</button>\n </form>\n);\n};\n\nexport default SearchInput; [/INST] \\n Not applicable </s>", "instruction": "Create a basic React component which renders a search bar with a button.", "input": "Not applicable", "output": "import React, { useState } from 'react'; \n\nconst SearchInput = () => {\nconst [search, setSearch] = useState('');\n\nconst handleChange = event => {\n setSearch(event.target.value);\n};\n\nconst handleSubmit = event => {\n event.preventDefault();\n // do something\n};\n\nreturn (\n <form onSubmit={handleSubmit}>\n <input type=\"text\" value={search} onChange={handleChange} />\n <button type=\"submit\">Search</button>\n </form>\n);\n};\n\nexport default SearchInput;"}
{"text": "<s>[INST] Generate a Python program which takes a string as input and prints all of its substrings in order from longest to shortest length. here are the inputs def substring_in_order(string): \n    result = [] \n    n = len(string) \n    for l in range(n, 0, -1): \n        for i in range(n-l + 1): \n            result.append(string[i:i+l]) \n    return result \n\nstring = input(\"Enter the string: \") \nprint (\"All substrings in order from longest to shortest:\") \nprint (substring_in_order(string)) [/INST] \\n  </s>", "instruction": "Generate a Python program which takes a string as input and prints all of its substrings in order from longest to shortest length.", "input": "", "output": "def substring_in_order(string): \n    result = [] \n    n = len(string) \n    for l in range(n, 0, -1): \n        for i in range(n-l + 1): \n            result.append(string[i:i+l]) \n    return result \n\nstring = input(\"Enter the string: \") \nprint (\"All substrings in order from longest to shortest:\") \nprint (substring_in_order(string))"}
{"text": "<s>[INST] Create a JavaScript function for sorting a list of strings in alphabetical order. here are the inputs function sortStrings(strings) {\n  return strings.sort(function(a, b) {\n    return a.localeCompare(b);\n  });\n}\n\nlet strings = ['John', 'Jane', 'Bob'];\nlet sortedStrings = sortStrings(strings);\nconsole.log(sortedStrings); [/INST] \\n strings = ['John', 'Jane', 'Bob'] </s>", "instruction": "Create a JavaScript function for sorting a list of strings in alphabetical order.", "input": "strings = ['John', 'Jane', 'Bob']", "output": "function sortStrings(strings) {\n  return strings.sort(function(a, b) {\n    return a.localeCompare(b);\n  });\n}\n\nlet strings = ['John', 'Jane', 'Bob'];\nlet sortedStrings = sortStrings(strings);\nconsole.log(sortedStrings);"}
{"text": "<s>[INST] Generate a Python function which takes an array and a value and returns the index at which this value is present in the array. here are the inputs def find_index(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n\nprint(find_index(arr, x)) [/INST] \\n arr = [2, 5, 9, 15], x = 5 </s>", "instruction": "Generate a Python function which takes an array and a value and returns the index at which this value is present in the array.", "input": "arr = [2, 5, 9, 15], x = 5", "output": "def find_index(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n\nprint(find_index(arr, x))"}
{"text": "<s>[INST] Generate an algorithm to detect the language of a given string. here are the inputs def detect_language(str): \n    # Get the length of the string\n    n = len(str)\n    \n    # Initialize a dictionary to store the count of characters in the string\n    charsDict = {}\n    for i in range(n): \n        ch = str[i] \n        \n        # If the character is not present in the dictionary\n        # add it to the dictionary\n        if ch not in charsDict: \n            charsDict[ch] = 1\n        else:\n        # increment the count of the character\n        charsDict[ch] += 1\n  \n    # Find the most frequent \n    maxx = -1\n    maxChar = ''\n  \n    # Iterate through all characters in characters dictionary\n    for ch in charsDict: \n        if maxx < charsDict[ch]: \n            maxx = charsDict[ch] \n            maxChar = ch \n  \n    # The most frequent character is the first character of the language of the string\n    lang = chr(ord(maxChar) - ord('a') + ord('A'))\n    \n    # Return the language\n    return lang [/INST] \\n  </s>", "instruction": "Generate an algorithm to detect the language of a given string.", "input": "", "output": "def detect_language(str): \n    # Get the length of the string\n    n = len(str)\n    \n    # Initialize a dictionary to store the count of characters in the string\n    charsDict = {}\n    for i in range(n): \n        ch = str[i] \n        \n        # If the character is not present in the dictionary\n        # add it to the dictionary\n        if ch not in charsDict: \n            charsDict[ch] = 1\n        else:\n        # increment the count of the character\n        charsDict[ch] += 1\n  \n    # Find the most frequent \n    maxx = -1\n    maxChar = ''\n  \n    # Iterate through all characters in characters dictionary\n    for ch in charsDict: \n        if maxx < charsDict[ch]: \n            maxx = charsDict[ch] \n            maxChar = ch \n  \n    # The most frequent character is the first character of the language of the string\n    lang = chr(ord(maxChar) - ord('a') + ord('A'))\n    \n    # Return the language\n    return lang"}
{"text": "<s>[INST] Develop a Python program to find the common elements in two lists. here are the inputs common_elements = [] \n  \n# using loop \nfor i in [3, 9, 15, 21, 27]:  \n    for j in [21, 7, 13, 29, 31]:  \n        if i == j: \n            common_elements.append(i) \n  \n# printing common elements \nprint(common_elements) \n# Output: [21] [/INST] \\n List 1: [3, 9, 15, 21, 27]\nList 2: [21, 7, 13, 29, 31] </s>", "instruction": "Develop a Python program to find the common elements in two lists.", "input": "List 1: [3, 9, 15, 21, 27]\nList 2: [21, 7, 13, 29, 31]", "output": "common_elements = [] \n  \n# using loop \nfor i in [3, 9, 15, 21, 27]:  \n    for j in [21, 7, 13, 29, 31]:  \n        if i == j: \n            common_elements.append(i) \n  \n# printing common elements \nprint(common_elements) \n# Output: [21]"}
{"text": "<s>[INST] Write a Perl script to download the 100 most recent tweets by a given user. here are the inputs #!/usr/bin/perl\n\nuse strict;\nuse warnings;\nuse LWP::Simple;\nuse XML::Simple;\n\n# set the username\nmy $username = 'billgates';\n\n# get the users 100 most recent tweets\nmy $url = 'http://twitter.com/statuses/user_timeline/'.$username.'.xml?count=100';\n\nmy $xml = get($url);\nmy $data = XMLin($xml);\n\n# print the text of each tweet\nforeach my $tweet (@{$data->{'status'}}) {\n print \"$tweet->{'text'}\\n\";\n} [/INST] \\n twitter_username: billgates </s>", "instruction": "Write a Perl script to download the 100 most recent tweets by a given user.", "input": "twitter_username: billgates", "output": "#!/usr/bin/perl\n\nuse strict;\nuse warnings;\nuse LWP::Simple;\nuse XML::Simple;\n\n# set the username\nmy $username = 'billgates';\n\n# get the users 100 most recent tweets\nmy $url = 'http://twitter.com/statuses/user_timeline/'.$username.'.xml?count=100';\n\nmy $xml = get($url);\nmy $data = XMLin($xml);\n\n# print the text of each tweet\nforeach my $tweet (@{$data->{'status'}}) {\n print \"$tweet->{'text'}\\n\";\n}"}
{"text": "<s>[INST] Use Machine Learning to classify the following sentence into a positive or negative sentiment. here are the inputs import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentence = \"The food was disgusting and the service terrible.\"\nsid = SentimentIntensityAnalyzer()\nss = sid.polarity_scores(sentence)\nif ss['compound'] > 0.05 :\n  print(\"Positive Sentiment\")\nelif ss['compound'] < - 0.05 :\n  print(\"Negative Sentiment\")\nelse :\n  print(\"Neutral Sentiment\") [/INST] \\n The food was disgusting and the service terrible. </s>", "instruction": "Use Machine Learning to classify the following sentence into a positive or negative sentiment.", "input": "The food was disgusting and the service terrible.", "output": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentence = \"The food was disgusting and the service terrible.\"\nsid = SentimentIntensityAnalyzer()\nss = sid.polarity_scores(sentence)\nif ss['compound'] > 0.05 :\n  print(\"Positive Sentiment\")\nelif ss['compound'] < - 0.05 :\n  print(\"Negative Sentiment\")\nelse :\n  print(\"Neutral Sentiment\")"}
{"text": "<s>[INST] Create a program to evaluate a mathematical equation given as a string. here are the inputs def eval_expression(expr): \n    return eval(expr) \n\nexpr = \"1+2*5/2+4\"\nprint(eval_expression(expr)) [/INST] \\n \"1+2*5/2+4\" </s>", "instruction": "Create a program to evaluate a mathematical equation given as a string.", "input": "\"1+2*5/2+4\"", "output": "def eval_expression(expr): \n    return eval(expr) \n\nexpr = \"1+2*5/2+4\"\nprint(eval_expression(expr))"}
{"text": "<s>[INST] Write a PHP script that displays the value of a COOKIE for a specific key. here are the inputs <?php \n  if(isset($_COOKIE['key'])) { \n    echo \"Value of cookie with key 'key' is: \" . $_COOKIE['key']; \n  } \n?> [/INST] \\n  </s>", "instruction": "Write a PHP script that displays the value of a COOKIE for a specific key.", "input": "", "output": "<?php \n  if(isset($_COOKIE['key'])) { \n    echo \"Value of cookie with key 'key' is: \" . $_COOKIE['key']; \n  } \n?>"}
{"text": "<s>[INST] Use the provided dataset to build a model to predict the housing prices. here are the inputs from sklearn.linear_model import LinearRegression\nimport pandas as pd\n\n# Load data\nhousing = pd.read_csv(\"housing.csv\")\n\n# Separate labels from data\nX = housing.drop(\"house_prices\", axis=1)\ny = housing[\"house_prices\"]\n\n# Train the model\nmodel = LinearRegression()\nmodel.fit(X, y) [/INST] \\n  </s>", "instruction": "Use the provided dataset to build a model to predict the housing prices.", "input": "", "output": "from sklearn.linear_model import LinearRegression\nimport pandas as pd\n\n# Load data\nhousing = pd.read_csv(\"housing.csv\")\n\n# Separate labels from data\nX = housing.drop(\"house_prices\", axis=1)\ny = housing[\"house_prices\"]\n\n# Train the model\nmodel = LinearRegression()\nmodel.fit(X, y)"}
{"text": "<s>[INST] Build a neural network in TensorFlow which can be used to predict whether a customer will buy a product or not. here are the inputs import numpy as np \nimport tensorflow as tf \n\n# load data\ndata = np.loadtxt('customer_data.csv', delimiter=',')\nnum_data, num_features = data.shape\n\n# split data into training and testing sets\ntrain_X = data[:int(num_data * 0.7), :-1] \ntrain_Y = data[:int(num_data * 0.7), -1:]\n\ntest_X = data[int(num_data * 0.7):, :-1] \ntest_Y = data[int(num_data * 0.7):, -1:]\n\n# define parameters \nlearning_rate = 0.01 \nnum_epochs = 1000\n\nnum_input = train_X.shape[1]\nnum_classes = train_Y.shape[1]\nnum_hidden_1 = 5\n\n# define placehodlers \nX = tf.placeholder('float', [None, num_input]) \nY = tf.placeholder('float', [None, num_classes])\n\n# define weights \nweights = { \n    'h1': tf.Variable(tf.random_normal([num_input, num_hidden_1])), \n    'out': tf.Variable(tf.random_normal([num_hidden_1, num_classes])) \n} \nbiases = { \n    'b1': tf.Variable(tf.random_normal([num_hidden_1])), \n    'out': tf.Variable(tf.random_normal([num_classes])) \n}\n\n# define model\ndef neural_net(x): \n    layer_1 = tf.add(tf.matmul(x, weights['h1']), biases['b1']) \n    out_layer = tf.matmul(layer_1, weights['out']) + biases['out'] \n    return out_layer\n\n# define loss and optimizer\nlogits = neural_net(X) \nloss = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits = logits, labels = Y))\noptimizer = tf.train.AdamOptimizer(learning_rate = learning_rate).minimize(loss)\n\n# define accuracy\ny_pred = tf.round(tf.nn.sigmoid(logits))\naccuracy = tf.reduce_sum(tf.cast(tf.equal(y_pred, Y), tf.float32))\n\n# initialize the variables\ninit = tf.global_variables_initializer()\n\n# start training\nwith tf.Session() as sess:\n    sess.run(init)\n    for epoch in range(num_epochs):\n        sess.run(optimizer, feed_dict={X: train_X, Y: train_Y})\n        acc = sess.run(accuracy, feed_dict={X: train_X, Y: train_Y})\n        print(\"Epoch \" + str(epoch) + \", Accuaracy = \" + str(acc))\n    print(\"Optimization finished\")\n    print(\"Accuaracy on test set:\", \n        sess.run(accuracy, feed_dict={X: test_X, Y: test_Y})) [/INST] \\n  </s>", "instruction": "Build a neural network in TensorFlow which can be used to predict whether a customer will buy a product or not.", "input": "", "output": "import numpy as np \nimport tensorflow as tf \n\n# load data\ndata = np.loadtxt('customer_data.csv', delimiter=',')\nnum_data, num_features = data.shape\n\n# split data into training and testing sets\ntrain_X = data[:int(num_data * 0.7), :-1] \ntrain_Y = data[:int(num_data * 0.7), -1:]\n\ntest_X = data[int(num_data * 0.7):, :-1] \ntest_Y = data[int(num_data * 0.7):, -1:]\n\n# define parameters \nlearning_rate = 0.01 \nnum_epochs = 1000\n\nnum_input = train_X.shape[1]\nnum_classes = train_Y.shape[1]\nnum_hidden_1 = 5\n\n# define placehodlers \nX = tf.placeholder('float', [None, num_input]) \nY = tf.placeholder('float', [None, num_classes])\n\n# define weights \nweights = { \n    'h1': tf.Variable(tf.random_normal([num_input, num_hidden_1])), \n    'out': tf.Variable(tf.random_normal([num_hidden_1, num_classes])) \n} \nbiases = { \n    'b1': tf.Variable(tf.random_normal([num_hidden_1])), \n    'out': tf.Variable(tf.random_normal([num_classes])) \n}\n\n# define model\ndef neural_net(x): \n    layer_1 = tf.add(tf.matmul(x, weights['h1']), biases['b1']) \n    out_layer = tf.matmul(layer_1, weights['out']) + biases['out'] \n    return out_layer\n\n# define loss and optimizer\nlogits = neural_net(X) \nloss = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits = logits, labels = Y))\noptimizer = tf.train.AdamOptimizer(learning_rate = learning_rate).minimize(loss)\n\n# define accuracy\ny_pred = tf.round(tf.nn.sigmoid(logits))\naccuracy = tf.reduce_sum(tf.cast(tf.equal(y_pred, Y), tf.float32))\n\n# initialize the variables\ninit = tf.global_variables_initializer()\n\n# start training\nwith tf.Session() as sess:\n    sess.run(init)\n    for epoch in range(num_epochs):\n        sess.run(optimizer, feed_dict={X: train_X, Y: train_Y})\n        acc = sess.run(accuracy, feed_dict={X: train_X, Y: train_Y})\n        print(\"Epoch \" + str(epoch) + \", Accuaracy = \" + str(acc))\n    print(\"Optimization finished\")\n    print(\"Accuaracy on test set:\", \n        sess.run(accuracy, feed_dict={X: test_X, Y: test_Y}))"}
{"text": "<s>[INST] Create a Python program that takes in two strings and returns an integer indicating the number of common substrings between the two strings. here are the inputs def num_common_substrings(s1, s2):\n    count = 0\n    for i in range(len(s1)):\n        for j in range(len(s2)):\n            if s1[i] == s2[j]:\n                count += 1\n    return count\n\nresult = num_common_substrings(\"abcd\", \"bae\")\nprint(result) [/INST] \\n s1 = \"abcd\", s2 = \"bae\" </s>", "instruction": "Create a Python program that takes in two strings and returns an integer indicating the number of common substrings between the two strings.", "input": "s1 = \"abcd\", s2 = \"bae\"", "output": "def num_common_substrings(s1, s2):\n    count = 0\n    for i in range(len(s1)):\n        for j in range(len(s2)):\n            if s1[i] == s2[j]:\n                count += 1\n    return count\n\nresult = num_common_substrings(\"abcd\", \"bae\")\nprint(result)"}
{"text": "<s>[INST] Create an algorithm to optimize a given set of integer values. The algorithm should find the combination of values with the highest total sum. here are the inputs def optimize_values(values):\n  max_sum = 0\n  combinations = [] \n  for i in range(1, len(values)+1):\n    for comb in itertools.combinations(values, i):\n      if sum(list(comb)) > max_sum: \n        max_sum = sum(list(comb))\n        combinations.append(comb)\n\n  return combinations\n\nprint(optimize_values([2, 4, 6, 8]))\n# Output: [(2, 6, 8), (4, 6, 8)] [/INST] \\n Given integer values: [2, 4, 6, 8] </s>", "instruction": "Create an algorithm to optimize a given set of integer values. The algorithm should find the combination of values with the highest total sum.", "input": "Given integer values: [2, 4, 6, 8]", "output": "def optimize_values(values):\n  max_sum = 0\n  combinations = [] \n  for i in range(1, len(values)+1):\n    for comb in itertools.combinations(values, i):\n      if sum(list(comb)) > max_sum: \n        max_sum = sum(list(comb))\n        combinations.append(comb)\n\n  return combinations\n\nprint(optimize_values([2, 4, 6, 8]))\n# Output: [(2, 6, 8), (4, 6, 8)]"}
{"text": "<s>[INST] Design a SQL database to store information about different types of fruits. here are the inputs CREATE TABLE fruits ( \n    id INT AUTO_INCREMENT, \n    type VARCHAR(255) NOT NULL, \n    name VARCHAR(255) NOT NULL, \n    color VARCHAR(255) NOT NULL, \n    texture VARCHAR(255) NOT NULL, \n    price DECIMAL(10,2) NOT NULL, \n    PRIMARY KEY(id) \n); [/INST] \\n  </s>", "instruction": "Design a SQL database to store information about different types of fruits.", "input": "", "output": "CREATE TABLE fruits ( \n    id INT AUTO_INCREMENT, \n    type VARCHAR(255) NOT NULL, \n    name VARCHAR(255) NOT NULL, \n    color VARCHAR(255) NOT NULL, \n    texture VARCHAR(255) NOT NULL, \n    price DECIMAL(10,2) NOT NULL, \n    PRIMARY KEY(id) \n);"}
{"text": "<s>[INST] Develop a C++ code that prints the Fibonacci numbers in a given range. here are the inputs #include <iostream>\nusing namespace std;\n\nvoid Fib(int start, int end) \n{ \n    int first = 0; \n    int second = 1; \n    int next; \n\n    while (first <= end) \n    { \n        if (first >= start) \n            cout << first << \" \";\n        next = first + second; \n        first = second; \n        second = next; \n    }\n    cout << endl;\n} \n\nint main()\n{\n    Fib(1, 10); \n    return 0; \n} [/INST] \\n [1, 10] </s>", "instruction": "Develop a C++ code that prints the Fibonacci numbers in a given range.", "input": "[1, 10]", "output": "#include <iostream>\nusing namespace std;\n\nvoid Fib(int start, int end) \n{ \n    int first = 0; \n    int second = 1; \n    int next; \n\n    while (first <= end) \n    { \n        if (first >= start) \n            cout << first << \" \";\n        next = first + second; \n        first = second; \n        second = next; \n    }\n    cout << endl;\n} \n\nint main()\n{\n    Fib(1, 10); \n    return 0; \n}"}
{"text": "<s>[INST] Write a MongoDB query to find records with a specified field. here are the inputs db.users.find({\"age\": {$exists: true}}) [/INST] \\n Collection name: users\nSpecified field name: age </s>", "instruction": "Write a MongoDB query to find records with a specified field.", "input": "Collection name: users\nSpecified field name: age", "output": "db.users.find({\"age\": {$exists: true}})"}
{"text": "<s>[INST] Create an algorithm in R that identifies the vowels in a given string. here are the inputs vowels <- c('a', 'e', 'i', 'o', 'u')\n\nidentify_vowels <- function(string) {\n    vowels_in_string <- list()\n    for (ch in string) {\n        if (ch %in% vowels) {\n            vowels_in_string <- c(vowels_in_string, ch)\n        }\n    }\n    return (vowels_in_string)\n}\n\nidentify_vowels(string) # Output: e oo [/INST] \\n string = 'Hello world!' </s>", "instruction": "Create an algorithm in R that identifies the vowels in a given string.", "input": "string = 'Hello world!'", "output": "vowels <- c('a', 'e', 'i', 'o', 'u')\n\nidentify_vowels <- function(string) {\n    vowels_in_string <- list()\n    for (ch in string) {\n        if (ch %in% vowels) {\n            vowels_in_string <- c(vowels_in_string, ch)\n        }\n    }\n    return (vowels_in_string)\n}\n\nidentify_vowels(string) # Output: e oo"}
{"text": "<s>[INST] Write a function that requires a string input and returns an array of the individual words in the string. here are the inputs def words_arr(sentence):\n \n    # split the sentence into a list\n    words = sentence.split()\n \n    # return the words in an array\n    arr = []\n    for word in words:\n        arr.append(word)\n \n    return arr\n \nprint(words_arr(\"The quick brown fox\")) [/INST] \\n The quick brown fox </s>", "instruction": "Write a function that requires a string input and returns an array of the individual words in the string.", "input": "The quick brown fox", "output": "def words_arr(sentence):\n \n    # split the sentence into a list\n    words = sentence.split()\n \n    # return the words in an array\n    arr = []\n    for word in words:\n        arr.append(word)\n \n    return arr\n \nprint(words_arr(\"The quick brown fox\"))"}
{"text": "<s>[INST] Design a program in JavaScript for searching a large collection of documents for relevant results. here are the inputs const searchDocuments = (documents, query) => {   \n  // Initiliaze a empty array of matches  \n  const matches = [];    \n  // Iterate through each document in the collection   \n  documents.forEach(document => {   \n  // Split the document using whitespace    \n  const words = document.split(' ');    \n  // Iterate through words in the document  \n  words.forEach(word => {      \n      // Check for a match in each word       \n      if (word.toLowerCase().includes(query.toLowerCase())) {            \n        // If a match is found, add to matches array         \n        matches.push(document);       \n      }    \n  });   \n  });   \n  // Return the array of matches   \n  return matches; \n}; [/INST] \\n Not applicable </s>", "instruction": "Design a program in JavaScript for searching a large collection of documents for relevant results.", "input": "Not applicable", "output": "const searchDocuments = (documents, query) => {   \n  // Initiliaze a empty array of matches  \n  const matches = [];    \n  // Iterate through each document in the collection   \n  documents.forEach(document => {   \n  // Split the document using whitespace    \n  const words = document.split(' ');    \n  // Iterate through words in the document  \n  words.forEach(word => {      \n      // Check for a match in each word       \n      if (word.toLowerCase().includes(query.toLowerCase())) {            \n        // If a match is found, add to matches array         \n        matches.push(document);       \n      }    \n  });   \n  });   \n  // Return the array of matches   \n  return matches; \n};"}
{"text": "<s>[INST] Develop a dynamic C program that reads ten numbers and prints their average. here are the inputs #include <stdio.h> \n#include <stdlib.h> \nint main() \n{ \n  int number_size = 10; \n  int arr[number_size]; \n  int sum = 0;  \n  printf(\"Enter 10 numbers: \"); \n  for (int i = 0; i < number_size; i++) { \n    scanf(\"%d\", &arr[i]); \n    sum += arr[i]; \n  } \n  float average=1.0*sum/number_size; \n  printf(\"Average of the numbers is: %f\",average); \n  return 0; \n} [/INST] \\n  </s>", "instruction": "Develop a dynamic C program that reads ten numbers and prints their average.", "input": "", "output": "#include <stdio.h> \n#include <stdlib.h> \nint main() \n{ \n  int number_size = 10; \n  int arr[number_size]; \n  int sum = 0;  \n  printf(\"Enter 10 numbers: \"); \n  for (int i = 0; i < number_size; i++) { \n    scanf(\"%d\", &arr[i]); \n    sum += arr[i]; \n  } \n  float average=1.0*sum/number_size; \n  printf(\"Average of the numbers is: %f\",average); \n  return 0; \n}"}
{"text": "<s>[INST] Design a function to print a matrix with dimensions of m x n. here are the inputs def print_matrix(m, n):\n    for i in range(m):\n        for j in range(n):\n            print(i, j) [/INST] \\n m = 4, n = 5 </s>", "instruction": "Design a function to print a matrix with dimensions of m x n.", "input": "m = 4, n = 5", "output": "def print_matrix(m, n):\n    for i in range(m):\n        for j in range(n):\n            print(i, j)"}
{"text": "<s>[INST] Write a C++ function to calculate e to the power of x. here are the inputs #include <iostream> \n#include <cmath> \n  \ndouble power(int x) \n{ \n    double res = 1.0;  \n    while (x > 0) \n    { \n        res = res * exp(1); \n        x--; \n    } \n    return res; \n} \n\nint main() \n{ \n    int x = 10; \n    printf(\"e to the power of %d is %lf\", x, power(x)); \n    return 0; \n} [/INST] \\n  </s>", "instruction": "Write a C++ function to calculate e to the power of x.", "input": "", "output": "#include <iostream> \n#include <cmath> \n  \ndouble power(int x) \n{ \n    double res = 1.0;  \n    while (x > 0) \n    { \n        res = res * exp(1); \n        x--; \n    } \n    return res; \n} \n\nint main() \n{ \n    int x = 10; \n    printf(\"e to the power of %d is %lf\", x, power(x)); \n    return 0; \n}"}
{"text": "<s>[INST] Write a sorting routine in Java to sort an array of integers. here are the inputs public static int[] sortArray(int[] array){\n    for(int i = 0; i < array.length; i++){\n        int minIndex = i;\n        for(int j = i+1; j < array.length; j++){\n            if(array[j] < array[minIndex]){\n                minIndex = j;\n            }\n        }\n        int temp = array[minIndex];\n        array[minIndex] = array[i];\n        array[i] = temp;\n    }\n    return array;\n} [/INST] \\n [4, 5, 1, 8, 9] </s>", "instruction": "Write a sorting routine in Java to sort an array of integers.", "input": "[4, 5, 1, 8, 9]", "output": "public static int[] sortArray(int[] array){\n    for(int i = 0; i < array.length; i++){\n        int minIndex = i;\n        for(int j = i+1; j < array.length; j++){\n            if(array[j] < array[minIndex]){\n                minIndex = j;\n            }\n        }\n        int temp = array[minIndex];\n        array[minIndex] = array[i];\n        array[i] = temp;\n    }\n    return array;\n}"}
{"text": "<s>[INST] Generate a Python program to convert a string to its lowercase version. here are the inputs def str_to_lower(string):\n    new_string = \"\"\n\n    for char in string:\n        new_string += char.lower()\n\n    return new_string [/INST] \\n  </s>", "instruction": "Generate a Python program to convert a string to its lowercase version.", "input": "", "output": "def str_to_lower(string):\n    new_string = \"\"\n\n    for char in string:\n        new_string += char.lower()\n\n    return new_string"}
{"text": "<s>[INST] Construct a query to retrieve the id, name, and age of all users. here are the inputs SELECT id, name, age FROM users; [/INST] \\n  </s>", "instruction": "Construct a query to retrieve the id, name, and age of all users.", "input": "", "output": "SELECT id, name, age FROM users;"}
{"text": "<s>[INST] Create a function to find the shortest route from one point to another in a given matrix. here are the inputs def find_shortest_route(matrix, start, end):\n    queue = collections.deque([[start]])\n    visited = set()\n\n    while queue:\n        path = queue.popleft()\n        node = path[-1]\n\n        if node == end: \n            return path\n\n        for next_node in matrix[node]:\n            if next_node not in visited:\n                queue.append(path + [next_node])\n                visited.add(next_node)\n\n    return [] [/INST] \\n  </s>", "instruction": "Create a function to find the shortest route from one point to another in a given matrix.", "input": "", "output": "def find_shortest_route(matrix, start, end):\n    queue = collections.deque([[start]])\n    visited = set()\n\n    while queue:\n        path = queue.popleft()\n        node = path[-1]\n\n        if node == end: \n            return path\n\n        for next_node in matrix[node]:\n            if next_node not in visited:\n                queue.append(path + [next_node])\n                visited.add(next_node)\n\n    return []"}
{"text": "<s>[INST] Create a TensorFlow model to classify the given document based on its sentiment. here are the inputs model = tf.keras.models.Sequential([\ntf.keras.layers.Embedding(input_dim=vocab_size, output_dim=embedding_dim, input_length=max_length),\ntf.keras.layers.Flatten(),\ntf.keras.layers.Dense(24, activation='relu'),\ntf.keras.layers.Dropout(0.5),\ntf.keras.layers.Dense(1, activation='sigmoid')\n]) [/INST] \\n \"This is a terrible movie, do not watch it!\" </s>", "instruction": "Create a TensorFlow model to classify the given document based on its sentiment.", "input": "\"This is a terrible movie, do not watch it!\"", "output": "model = tf.keras.models.Sequential([\ntf.keras.layers.Embedding(input_dim=vocab_size, output_dim=embedding_dim, input_length=max_length),\ntf.keras.layers.Flatten(),\ntf.keras.layers.Dense(24, activation='relu'),\ntf.keras.layers.Dropout(0.5),\ntf.keras.layers.Dense(1, activation='sigmoid')\n])"}
{"text": "<s>[INST] Create a Ruby code to predict the next word while writing a sentence. here are the inputs require 'treetop'\n\n# Define a custom grammar\ngrammar = Treetop.load('predict_next_grammar')\n\n# Parse the text\ntext_parser = grammar.parse('This is a sentence')\n\n# Access the parsed structure\nparsed_data = text_parser.next_word\n\n# Get the predicted word\npredicted_word = parsed_data.prediction\n\nputs \"The predicted next word for the sentence is '#{predicted_word}'!\" [/INST] \\n  </s>", "instruction": "Create a Ruby code to predict the next word while writing a sentence.", "input": "", "output": "require 'treetop'\n\n# Define a custom grammar\ngrammar = Treetop.load('predict_next_grammar')\n\n# Parse the text\ntext_parser = grammar.parse('This is a sentence')\n\n# Access the parsed structure\nparsed_data = text_parser.next_word\n\n# Get the predicted word\npredicted_word = parsed_data.prediction\n\nputs \"The predicted next word for the sentence is '#{predicted_word}'!\""}
{"text": "<s>[INST] Create a React application with a form and a list. The form should allow the user to enter a grocery list item. The list should display all the items the user has entered. here are the inputs import React, { useState } from 'react';\nimport { View, Text, TextInput, Button, FlatList } from 'react-native';\n\nconst App = () => {\n const [items, setItems] = useState(['Apples', 'Bananas']);\n const [text, setText] = useState('');\n\n const onChangeText = textValue => setText(textValue);\n\n const onPress = () => {\n setItems([...items, text]);\n setText('');\n };\n\n return (\n <View style={{ padding: 40 }}>\n <TextInput\n onChangeText={onChangeText}\n value={text}\n />\n <Button title='Add' onPress={onPress} />\n <FlatList\n data={items}\n renderItem={({ item }) => <Text>{item}</Text>}\n keyExtractor={(_, index) => index.toString()}\n />\n </View>\n );\n};\n\nexport default App; [/INST] \\n Not applicable </s>", "instruction": "Create a React application with a form and a list. The form should allow the user to enter a grocery list item. The list should display all the items the user has entered.", "input": "Not applicable", "output": "import React, { useState } from 'react';\nimport { View, Text, TextInput, Button, FlatList } from 'react-native';\n\nconst App = () => {\n const [items, setItems] = useState(['Apples', 'Bananas']);\n const [text, setText] = useState('');\n\n const onChangeText = textValue => setText(textValue);\n\n const onPress = () => {\n setItems([...items, text]);\n setText('');\n };\n\n return (\n <View style={{ padding: 40 }}>\n <TextInput\n onChangeText={onChangeText}\n value={text}\n />\n <Button title='Add' onPress={onPress} />\n <FlatList\n data={items}\n renderItem={({ item }) => <Text>{item}</Text>}\n keyExtractor={(_, index) => index.toString()}\n />\n </View>\n );\n};\n\nexport default App;"}
{"text": "<s>[INST] Create a C++ program to calculate Fibonacci numbers. The program should take an integer as an input and print out the first n Fibonacci numbers of the given integer. here are the inputs #include<iostream>\n\nint fibonacci(int n) {\n if (n == 0)\n return 0;\n else if (n == 1)\n return 1;\n else \n return (fibonacci(n-1) + fibonacci(n-2));\n}\n\nint main() {\n int n;\n std::cout << \"Enter the number of elements: \";\n std::cin >> n;\n\n std::cout << \"Fibonacci series: \";\n for (int i = 0; i < n; i++)\n std::cout << fibonacci(i) << \" \";\n std::cout << std::endl;\n\n return 0;\n} [/INST] \\n 7 </s>", "instruction": "Create a C++ program to calculate Fibonacci numbers. The program should take an integer as an input and print out the first n Fibonacci numbers of the given integer.", "input": "7", "output": "#include<iostream>\n\nint fibonacci(int n) {\n if (n == 0)\n return 0;\n else if (n == 1)\n return 1;\n else \n return (fibonacci(n-1) + fibonacci(n-2));\n}\n\nint main() {\n int n;\n std::cout << \"Enter the number of elements: \";\n std::cin >> n;\n\n std::cout << \"Fibonacci series: \";\n for (int i = 0; i < n; i++)\n std::cout << fibonacci(i) << \" \";\n std::cout << std::endl;\n\n return 0;\n}"}
{"text": "<s>[INST] Create a function to summarize a text given a threshold character length. here are the inputs def summarizer(text, char_threshold):\n    words = text.split(' ')\n\n    summary = \"\"\n    char_count = 0 \n\n    for word in words:\n        char_count += len(word)\n        summary += word + \" \"\n\n        if char_count > char_threshold:\n            break\n    \n    return summary\n\nif __name__ == '__main__':\n    text = \"This is some arbitrary text that we should summarize. This text is longer than the threshold character length as we will see.\"\n    char_threshold = 20\n    print(summarizer(text, char_threshold)) [/INST] \\n \"This is some arbitrary text that we should summarize. This text is longer than the threshold character length as we will see.\"\nThreshold Length: 20 </s>", "instruction": "Create a function to summarize a text given a threshold character length.", "input": "\"This is some arbitrary text that we should summarize. This text is longer than the threshold character length as we will see.\"\nThreshold Length: 20", "output": "def summarizer(text, char_threshold):\n    words = text.split(' ')\n\n    summary = \"\"\n    char_count = 0 \n\n    for word in words:\n        char_count += len(word)\n        summary += word + \" \"\n\n        if char_count > char_threshold:\n            break\n    \n    return summary\n\nif __name__ == '__main__':\n    text = \"This is some arbitrary text that we should summarize. This text is longer than the threshold character length as we will see.\"\n    char_threshold = 20\n    print(summarizer(text, char_threshold))"}
{"text": "<s>[INST] Construct a function to search for a given string in a sentence and return the position of the first occurrence. here are the inputs def search_string(sentence, string):\n    '''This function searches for the string in the given sentence and returns its position.'''\n\n    # Split the sentence\n    string_split = sentence.split(' ')\n\n    # Search for the string\n    for i, word in enumerate(string_split):\n        if word == string:\n            return i\n    return -1\n\nprint(search_string(sentence, string)) # Output: 4 [/INST] \\n sentence = 'This is a sample sentence'\nstring = 'sample' </s>", "instruction": "Construct a function to search for a given string in a sentence and return the position of the first occurrence.", "input": "sentence = 'This is a sample sentence'\nstring = 'sample'", "output": "def search_string(sentence, string):\n    '''This function searches for the string in the given sentence and returns its position.'''\n\n    # Split the sentence\n    string_split = sentence.split(' ')\n\n    # Search for the string\n    for i, word in enumerate(string_split):\n        if word == string:\n            return i\n    return -1\n\nprint(search_string(sentence, string)) # Output: 4"}
{"text": "<s>[INST] Can you generate a function in Python that shuffles a given list? here are the inputs import random\n\ndef shuffle_list(list): \n    # Initialize the random number generator\n    random.seed()\n\n    # Shuffle the list\n    random.shuffle(list) \n\n    # Return the list\n    return list [/INST] \\n  </s>", "instruction": "Can you generate a function in Python that shuffles a given list?", "input": "", "output": "import random\n\ndef shuffle_list(list): \n    # Initialize the random number generator\n    random.seed()\n\n    # Shuffle the list\n    random.shuffle(list) \n\n    # Return the list\n    return list"}
{"text": "<s>[INST] Write a C++ program to find out the average of five numbers. here are the inputs #include <iostream>\nusing namespace std;\n\nint main()\n{\n    int arr[] = {2, 3, 4, 5, 6};\n    double sum = 0;\n \n    for (int i = 0; i < 5; i++)\n    {\n        sum += arr[i];\n    }\n \n    double avg = sum / 5;\n \n    cout << \"Average = \" << avg;\n \n    return 0;\n} [/INST] \\n [2, 3, 4, 5, 6] </s>", "instruction": "Write a C++ program to find out the average of five numbers.", "input": "[2, 3, 4, 5, 6]", "output": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int arr[] = {2, 3, 4, 5, 6};\n    double sum = 0;\n \n    for (int i = 0; i < 5; i++)\n    {\n        sum += arr[i];\n    }\n \n    double avg = sum / 5;\n \n    cout << \"Average = \" << avg;\n \n    return 0;\n}"}
{"text": "<s>[INST] Write a Java program to sort an array of objects by their age in ascending order. here are the inputs import java.util.Arrays;\n\npublic class SortByAge {\n public static void sortByAge(Object[] list) {\n Arrays.sort(list, (a, b) -> (int)a.get(\"age\") - (int)b.get(\"age\"));\n }\n} [/INST] \\n [\n {\u201cname\u201d: \u201cJohn\u201d, \u201cage\u201d: 20},\n {\u201cname\u201d: \u201cJane\u201d, \u201cage\u201d: 40},\n {\u201cname\u201d: \u201cMary\u201d, \u201cage\u201d: 30 },\n {\u201cname\u201d: \u201cMike\u201d, \u201cage\u201d: 50 },\n] </s>", "instruction": "Write a Java program to sort an array of objects by their age in ascending order.", "input": "[\n {\u201cname\u201d: \u201cJohn\u201d, \u201cage\u201d: 20},\n {\u201cname\u201d: \u201cJane\u201d, \u201cage\u201d: 40},\n {\u201cname\u201d: \u201cMary\u201d, \u201cage\u201d: 30 },\n {\u201cname\u201d: \u201cMike\u201d, \u201cage\u201d: 50 },\n]", "output": "import java.util.Arrays;\n\npublic class SortByAge {\n public static void sortByAge(Object[] list) {\n Arrays.sort(list, (a, b) -> (int)a.get(\"age\") - (int)b.get(\"age\"));\n }\n}"}
{"text": "<s>[INST] Construct an algorithm in C which solves the problem of finding the largest number in a given array. here are the inputs #include <stdio.h>\n \nint findMax(int arr[], int n)\n{\n\tint i, max = arr[0];\n\t\n\tfor(i = 1; i < n; i++)\n\t{\n\t\tif(arr[i] > max)\n\t\t\tmax = arr[i];\n\t}\n\t\n\treturn max;\n}\n\nint main()\n{\n\tint arr[] = {9, 10, 15, 20, 3};\n\tint n = sizeof(arr) / sizeof(arr[0]);\n\t\n\tint max = findMax(arr, n);\n\t\n\tprintf(\"Largest number = %d\\n\", max);\n\t\n\treturn 0;\n} [/INST] \\n arr = [9, 10, 15, 20, 3] </s>", "instruction": "Construct an algorithm in C which solves the problem of finding the largest number in a given array.", "input": "arr = [9, 10, 15, 20, 3]", "output": "#include <stdio.h>\n \nint findMax(int arr[], int n)\n{\n\tint i, max = arr[0];\n\t\n\tfor(i = 1; i < n; i++)\n\t{\n\t\tif(arr[i] > max)\n\t\t\tmax = arr[i];\n\t}\n\t\n\treturn max;\n}\n\nint main()\n{\n\tint arr[] = {9, 10, 15, 20, 3};\n\tint n = sizeof(arr) / sizeof(arr[0]);\n\t\n\tint max = findMax(arr, n);\n\t\n\tprintf(\"Largest number = %d\\n\", max);\n\t\n\treturn 0;\n}"}
{"text": "<s>[INST] Construct an API for a movie recommendation system. here are the inputs from flask import Flask, request\nimport json\n\napp = Flask(__name__)\n\n@app.route(\"/recommend\", methods=[\"POST\"])\ndef recommend():\n    if request.method == 'POST':\n        request_data = request.get_json() \n        user_id = request_data['userId']\n        movies = recommend_movies(user_id)\n        return json.dumps(movies)\n\ndef recommend_movies(user_id):\n    # implement movie recommendation algorithm\n    # use user_id to infer user's preferences\n    # ...\n\n    movies = [\n        {\"title\":\"Movie 1\", \"rating\":5.0},\n        {\"title\":\"Movie 2\", \"rating\":4.5},\n        {\"title\":\"Movie 3\", \"rating\":4.0}\n    ]\n\n    return movies\n\nif __name__ == \"__main__\":\n    app.run() [/INST] \\n  </s>", "instruction": "Construct an API for a movie recommendation system.", "input": "", "output": "from flask import Flask, request\nimport json\n\napp = Flask(__name__)\n\n@app.route(\"/recommend\", methods=[\"POST\"])\ndef recommend():\n    if request.method == 'POST':\n        request_data = request.get_json() \n        user_id = request_data['userId']\n        movies = recommend_movies(user_id)\n        return json.dumps(movies)\n\ndef recommend_movies(user_id):\n    # implement movie recommendation algorithm\n    # use user_id to infer user's preferences\n    # ...\n\n    movies = [\n        {\"title\":\"Movie 1\", \"rating\":5.0},\n        {\"title\":\"Movie 2\", \"rating\":4.5},\n        {\"title\":\"Movie 3\", \"rating\":4.0}\n    ]\n\n    return movies\n\nif __name__ == \"__main__\":\n    app.run()"}
{"text": "<s>[INST] Create a HTML page with CSS styling for displaying employee details such as name, email and phone number in a table format. here are the inputs <!DOCTYPE html>\n\n<html>\n<head>\n <title>Employee Information</title>\n <style>\n  table {\n   width: 100%;\n   border: 1px solid #ddd;\n  }\n  th, td {\n    border: 1px solid #ddd;\n    padding: 8px;\n  }\n </style>\n</head>\n\n<body>\n <h1>Employee Information</h1>\n\n <table>\n  <tr>\n   <th>Name</th>\n   <th>Email</th>\n   <th>Phone</th>\n  </tr>\n  <tr>\n   <td>John Doe</td>\n   <td>john.doe@example.com</td>\n   <td>555-555-5555</td>\n  </tr>\n  <tr>\n   <td>Jane Doe</td>\n   <td>jane.doe@example.com</td>\n   <td>444-444-4444</td>\n  </tr>\n </table>\n\n</body>\n</html> [/INST] \\n Not applicable </s>", "instruction": "Create a HTML page with CSS styling for displaying employee details such as name, email and phone number in a table format.", "input": "Not applicable", "output": "<!DOCTYPE html>\n\n<html>\n<head>\n <title>Employee Information</title>\n <style>\n  table {\n   width: 100%;\n   border: 1px solid #ddd;\n  }\n  th, td {\n    border: 1px solid #ddd;\n    padding: 8px;\n  }\n </style>\n</head>\n\n<body>\n <h1>Employee Information</h1>\n\n <table>\n  <tr>\n   <th>Name</th>\n   <th>Email</th>\n   <th>Phone</th>\n  </tr>\n  <tr>\n   <td>John Doe</td>\n   <td>john.doe@example.com</td>\n   <td>555-555-5555</td>\n  </tr>\n  <tr>\n   <td>Jane Doe</td>\n   <td>jane.doe@example.com</td>\n   <td>444-444-4444</td>\n  </tr>\n </table>\n\n</body>\n</html>"}
{"text": "<s>[INST] Write a function to convert a url into its shortened version. here are the inputs def shorten_url(long_url): \n    r = requests.get(\"http://tinyurl.com/api-create.php\", params = { \"url\": long_url })\n    if r.ok:\n        return r.text\n    return None [/INST] \\n https://example.com/my/long/url </s>", "instruction": "Write a function to convert a url into its shortened version.", "input": "https://example.com/my/long/url", "output": "def shorten_url(long_url): \n    r = requests.get(\"http://tinyurl.com/api-create.php\", params = { \"url\": long_url })\n    if r.ok:\n        return r.text\n    return None"}
{"text": "<s>[INST] Write a Python function to validate an a list of emails. The function should return a boolean indicating whether a given email address is valid. here are the inputs def validate_mail_list(mail_list):\n    for mail in mail_list:\n        if not re.match(\"[^@]+@[^@]+\\.[^@]+\", mail):\n            return False\n    return True [/INST] \\n mail_list = [\"example.user@gmail.com\", \"bad@example\"] </s>", "instruction": "Write a Python function to validate an a list of emails. The function should return a boolean indicating whether a given email address is valid.", "input": "mail_list = [\"example.user@gmail.com\", \"bad@example\"]", "output": "def validate_mail_list(mail_list):\n    for mail in mail_list:\n        if not re.match(\"[^@]+@[^@]+\\.[^@]+\", mail):\n            return False\n    return True"}
{"text": "<s>[INST] Create a for loop to print a list of numbers from 1 to 10. here are the inputs for i in range(1, 11):\n    print(i) [/INST] \\n  </s>", "instruction": "Create a for loop to print a list of numbers from 1 to 10.", "input": "", "output": "for i in range(1, 11):\n    print(i)"}
{"text": "<s>[INST] Write a MySQL query that will return the names of the customers who have purchased a product from the past month. here are the inputs SELECT \n    cu.name\nFROM customer cu\nINNER JOIN orders o ON o.customer_id = cu.id\nWHERE \n    o.date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) [/INST] \\n Not applicable </s>", "instruction": "Write a MySQL query that will return the names of the customers who have purchased a product from the past month.", "input": "Not applicable", "output": "SELECT \n    cu.name\nFROM customer cu\nINNER JOIN orders o ON o.customer_id = cu.id\nWHERE \n    o.date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)"}
{"text": "<s>[INST] Can you construct a heap data structure that supports both insert and delete operations? here are the inputs class Heap(): \n    def __init__(self): \n        self.arr = [] \n  \n    def parent(self, i): \n        return (i - 1) // 2\n\n    def insertKey(self, k): \n        if not k in self.arr:\n            self.arr.append(k)\n            i = len(self.arr) - 1\n            while (i != 0 and self.arr[self.parent(i)] > self.arr[i]): \n                self.arr[i], self.arr[self.parent(i)] = self.arr[self.parent(i)], self.arr[i] \n                i = self.parent(i) \n  \n    def deleteKey(self, i):  \n        if i >= len(self.arr): \n            return\n  \n        self.arr[i] = self.arr[-1] \n        del self.arr[-1] \n          \n        self.heapify(i) \n  \n    def heapify(self, i): \n        l = 2 * i + 1     \n        r = 2 * i + 2     \n        smallest = i \n        if l < len(self.arr) and self.arr[i] > self.arr[l]: \n            smallest = l \n  \n        if r < len(self.arr) and self.arr[smallest] > self.arr[r]: \n            smallest = r \n  \n        if smallest != i: \n            self.arr[i], self.arr[smallest] = self.arr[smallest], self.arr[i] \n            self.heapify(smallest) \n    \n    def getMin(self): \n        return self.arr[0] if len(self.arr) else None [/INST] \\n  </s>", "instruction": "Can you construct a heap data structure that supports both insert and delete operations?", "input": "", "output": "class Heap(): \n    def __init__(self): \n        self.arr = [] \n  \n    def parent(self, i): \n        return (i - 1) // 2\n\n    def insertKey(self, k): \n        if not k in self.arr:\n            self.arr.append(k)\n            i = len(self.arr) - 1\n            while (i != 0 and self.arr[self.parent(i)] > self.arr[i]): \n                self.arr[i], self.arr[self.parent(i)] = self.arr[self.parent(i)], self.arr[i] \n                i = self.parent(i) \n  \n    def deleteKey(self, i):  \n        if i >= len(self.arr): \n            return\n  \n        self.arr[i] = self.arr[-1] \n        del self.arr[-1] \n          \n        self.heapify(i) \n  \n    def heapify(self, i): \n        l = 2 * i + 1     \n        r = 2 * i + 2     \n        smallest = i \n        if l < len(self.arr) and self.arr[i] > self.arr[l]: \n            smallest = l \n  \n        if r < len(self.arr) and self.arr[smallest] > self.arr[r]: \n            smallest = r \n  \n        if smallest != i: \n            self.arr[i], self.arr[smallest] = self.arr[smallest], self.arr[i] \n            self.heapify(smallest) \n    \n    def getMin(self): \n        return self.arr[0] if len(self.arr) else None"}
{"text": "<s>[INST] Generate an android database with six columns representing user data. here are the inputs // Table containing user data\npublic static final String TABLE_USER = \"user\";\n\n// Columns representing user data\npublic static final String COL_ID = \"ID\";\npublic static final String COL_FIRSTNAME = \"FirstName\";\npublic static final String COL_LASTNAME = \"LastName\";\npublic static final String COL_EMAIL = \"Email\";\npublic static final String COL_USERNAME = \"Username\";\npublic static final String COL_PASSWORD = \"Password\";\n\n// Create Table\npublic static final String CREATE_TABLE_USER = \"CREATE TABLE \" + TABLE_USER + \"(\"\n        + COL_ID + \" INTEGER PRIMARY KEY AUTOINCREMENT,\"\n        + COL_FIRSTNAME + \" TEXT,\"\n        + COL_LASTNAME + \" TEXT,\"\n        + COL_EMAIL + \" TEXT,\"\n        + COL_USERNAME + \" TEXT,\"\n        + COL_PASSWORD + \" TEXT\"\n        + \")\"; [/INST] \\n  </s>", "instruction": "Generate an android database with six columns representing user data.", "input": "", "output": "// Table containing user data\npublic static final String TABLE_USER = \"user\";\n\n// Columns representing user data\npublic static final String COL_ID = \"ID\";\npublic static final String COL_FIRSTNAME = \"FirstName\";\npublic static final String COL_LASTNAME = \"LastName\";\npublic static final String COL_EMAIL = \"Email\";\npublic static final String COL_USERNAME = \"Username\";\npublic static final String COL_PASSWORD = \"Password\";\n\n// Create Table\npublic static final String CREATE_TABLE_USER = \"CREATE TABLE \" + TABLE_USER + \"(\"\n        + COL_ID + \" INTEGER PRIMARY KEY AUTOINCREMENT,\"\n        + COL_FIRSTNAME + \" TEXT,\"\n        + COL_LASTNAME + \" TEXT,\"\n        + COL_EMAIL + \" TEXT,\"\n        + COL_USERNAME + \" TEXT,\"\n        + COL_PASSWORD + \" TEXT\"\n        + \")\";"}
{"text": "<s>[INST] Create a Python script that will perform several simple math operations. The script should accept two integers as inputs and output the results of the following operations: addition, subtraction, multiplication, division, and modulo. here are the inputs int1 = 10\nint2 = 5\n\naddition = int1 + int2\nprint('Addition:', addition)\n\nsubtraction = int1 - int2\nprint('Subtraction:', subtraction)\n\nmultiplication = int1 * int2\nprint('Multiplication:', multiplication)\n\ndivision = int1 / int2\nprint('Division:', division)\n\nmodulo = int1 % int2\nprint('Modulo:', modulo) [/INST] \\n int1 = 10\nint2 = 5 </s>", "instruction": "Create a Python script that will perform several simple math operations. The script should accept two integers as inputs and output the results of the following operations: addition, subtraction, multiplication, division, and modulo.", "input": "int1 = 10\nint2 = 5", "output": "int1 = 10\nint2 = 5\n\naddition = int1 + int2\nprint('Addition:', addition)\n\nsubtraction = int1 - int2\nprint('Subtraction:', subtraction)\n\nmultiplication = int1 * int2\nprint('Multiplication:', multiplication)\n\ndivision = int1 / int2\nprint('Division:', division)\n\nmodulo = int1 % int2\nprint('Modulo:', modulo)"}
{"text": "<s>[INST] Generate a unique ID using JavaScript. here are the inputs function generateUUID() {\n    var d = new Date().getTime();\n    if (typeof performance !== 'undefined' && typeof performance.now === 'function'){\n        d += performance.now(); \n    }\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n    });\n}\n\nuuid = generateUUID();\nconsole.log('Generated UUID is ', uuid); [/INST] \\n Not applicable </s>", "instruction": "Generate a unique ID using JavaScript.", "input": "Not applicable", "output": "function generateUUID() {\n    var d = new Date().getTime();\n    if (typeof performance !== 'undefined' && typeof performance.now === 'function'){\n        d += performance.now(); \n    }\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n    });\n}\n\nuuid = generateUUID();\nconsole.log('Generated UUID is ', uuid);"}
{"text": "<s>[INST] Generate an SQL query to find the name and salary of all employees who earn more than 75000. here are the inputs SELECT name, salary \nFROM employees \nWHERE salary > 75000; [/INST] \\n  </s>", "instruction": "Generate an SQL query to find the name and salary of all employees who earn more than 75000.", "input": "", "output": "SELECT name, salary \nFROM employees \nWHERE salary > 75000;"}
{"text": "<s>[INST] Create a Python program to perform sentiment analysis on product reviews. The program should use natural language processing techniques like tokenization and n-grams to generate features for sentiment analysis and use a classification model to assign sentiments to the reviews. here are the inputs import numpy as np\nimport pandas as pd\nimport nltk\nfrom nltk.tokenize import word_tokenize\nimport matplotlib.pyplot as plt\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer \nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import classification_report\n\n# Read in the data\ndata = pd.read_csv('reviews.csv')\n\n# Tokenise the texts\ndata['tokenised'] = data['review'].apply(word_tokenize)\n\n# Remove stopwords\nstop_words = set(stopwords.words('english'))\ndata['filtered'] = data['tokenised'].apply(lambda x: [val for val in x if val not in stop_words])\n\n# Normalize words\nwordnet_lemmatizer = WordNetLemmatizer()\ndata['normalised'] = data['filtered'].apply(lambda x: [wordnet_lemmatizer.lemmatize(val) for val in x])\n\n# Generate features using CountVectorizer\ncv = CountVectorizer()\ndata['features'] = cv.fit_transform(data['normalised'].astype('str')).toarray()\n\n# Split into training and test sets\nX = data['features']\ny = data['sentiment']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train model\nmodel = MultinomialNB(alpha=0.1)\nmodel.fit(X_train, y_train)\n\n# Predict using the test set\npredictions = model.predict(X_test)\n\n# Generate a classification report\nreport = classification_report(y_test, predictions)\nprint(report) [/INST] \\n Not applicable </s>", "instruction": "Create a Python program to perform sentiment analysis on product reviews. The program should use natural language processing techniques like tokenization and n-grams to generate features for sentiment analysis and use a classification model to assign sentiments to the reviews.", "input": "Not applicable", "output": "import numpy as np\nimport pandas as pd\nimport nltk\nfrom nltk.tokenize import word_tokenize\nimport matplotlib.pyplot as plt\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer \nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import classification_report\n\n# Read in the data\ndata = pd.read_csv('reviews.csv')\n\n# Tokenise the texts\ndata['tokenised'] = data['review'].apply(word_tokenize)\n\n# Remove stopwords\nstop_words = set(stopwords.words('english'))\ndata['filtered'] = data['tokenised'].apply(lambda x: [val for val in x if val not in stop_words])\n\n# Normalize words\nwordnet_lemmatizer = WordNetLemmatizer()\ndata['normalised'] = data['filtered'].apply(lambda x: [wordnet_lemmatizer.lemmatize(val) for val in x])\n\n# Generate features using CountVectorizer\ncv = CountVectorizer()\ndata['features'] = cv.fit_transform(data['normalised'].astype('str')).toarray()\n\n# Split into training and test sets\nX = data['features']\ny = data['sentiment']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train model\nmodel = MultinomialNB(alpha=0.1)\nmodel.fit(X_train, y_train)\n\n# Predict using the test set\npredictions = model.predict(X_test)\n\n# Generate a classification report\nreport = classification_report(y_test, predictions)\nprint(report)"}
{"text": "<s>[INST] Implement a function that performs quick sort. here are the inputs def quick_sort(unsorted_list):\n    \"\"\"Sort the given list using the quick sort algorithm\"\"\"\n    if len(unsorted_list) < 2:\n        # base case: list of one element is already sorted\n        return unsorted_list\n\n    # select a pivot (in this case the first element)\n    pivot = unsorted_list[0] \n\n    # items less than pivot go to the left \n    # items more than pivot go to the right \n    lesser, equal, greater = [], [], []\n    for item in unsorted_list:\n        if item < pivot:\n            lesser.append(item)\n        elif item == pivot:\n            equal.append(item)\n        else:\n            greater.append(item)\n\n    # recursive calls on the lesser and greater lists\n    return quick_sort(lesser) + equal + quick_sort(greater) [/INST] \\n unsorted_list = [2, 4, 6, 8, 10, 1, 3, 5, 7, 9] </s>", "instruction": "Implement a function that performs quick sort.", "input": "unsorted_list = [2, 4, 6, 8, 10, 1, 3, 5, 7, 9]", "output": "def quick_sort(unsorted_list):\n    \"\"\"Sort the given list using the quick sort algorithm\"\"\"\n    if len(unsorted_list) < 2:\n        # base case: list of one element is already sorted\n        return unsorted_list\n\n    # select a pivot (in this case the first element)\n    pivot = unsorted_list[0] \n\n    # items less than pivot go to the left \n    # items more than pivot go to the right \n    lesser, equal, greater = [], [], []\n    for item in unsorted_list:\n        if item < pivot:\n            lesser.append(item)\n        elif item == pivot:\n            equal.append(item)\n        else:\n            greater.append(item)\n\n    # recursive calls on the lesser and greater lists\n    return quick_sort(lesser) + equal + quick_sort(greater)"}
{"text": "<s>[INST] Produce a program in Java that calculates the total cost of an online shopping order. here are the inputs public class ShoppingOrder {\n\n    public static void main(String[] args) {\n        double cost = calculateOrderCost(5, 5, 3.7);\n        System.out.println(\"Total cost: $\" + cost);\n    }\n \n    public static double calculateOrderCost(int numItems5, double cost5, double cost7) {\n        return (numItems5 * cost5) + (3 * cost7);\n    }\n} [/INST] \\n 5 units of $5 items, 3 units of $7 items </s>", "instruction": "Produce a program in Java that calculates the total cost of an online shopping order.", "input": "5 units of $5 items, 3 units of $7 items", "output": "public class ShoppingOrder {\n\n    public static void main(String[] args) {\n        double cost = calculateOrderCost(5, 5, 3.7);\n        System.out.println(\"Total cost: $\" + cost);\n    }\n \n    public static double calculateOrderCost(int numItems5, double cost5, double cost7) {\n        return (numItems5 * cost5) + (3 * cost7);\n    }\n}"}
{"text": "<s>[INST] Create a program that takes a sequence of numbers as input, and produces a list of the sum of all adjacent pairs of numbers in the sequence. here are the inputs def adjacent_pairs(numbers):\n    result = []\n    for i in range(len(numbers)-1):\n        a = numbers[i]\n        b = numbers[i+1]\n        result.append(a + b)\n    return result\n\noutput = adjacent_pairs([1,2,3,4])\nprint(output) [/INST] \\n [1, 2, 3, 4] </s>", "instruction": "Create a program that takes a sequence of numbers as input, and produces a list of the sum of all adjacent pairs of numbers in the sequence.", "input": "[1, 2, 3, 4]", "output": "def adjacent_pairs(numbers):\n    result = []\n    for i in range(len(numbers)-1):\n        a = numbers[i]\n        b = numbers[i+1]\n        result.append(a + b)\n    return result\n\noutput = adjacent_pairs([1,2,3,4])\nprint(output)"}
{"text": "<s>[INST] Create a Pig Latin Translator in JavaScript. here are the inputs function pigLatinTranslator(str) {\n // Split the string into an array\n const strArr = str.split(' ');\n // The final output\n const translated = [];\n const vowels = ['a', 'e', 'i', 'o', 'u'];\n\n // Loop over the array\n for (let word of strArr) {\n // Check if the word starts with a vowel\n if (vowels.indexOf(word[0].toLowerCase()) !== -1) {\n // If so, add 'way' to the end\n translated.push(word + 'way');\n } else {\n // Otherwise, collect the consonants\n let consonantCluster = '';\n // Loop until you find a vowel- or until you reach the maximum length you can reach\n for (let i = 0; i < word.length; i++) {\n if (vowels.indexOf(word[i].toLowerCase()) === -1) {\n consonantCluster += word[i];\n } else {\n break;\n }\n }\n // Add the consonants + 'ay' to the end\n translated.push(word.substr(consonantCluster.length) + consonantCluster + 'ay');\n }\n }\n // Join the array and return it\n return translated.join(' ');\n} [/INST] \\n Not applicable </s>", "instruction": "Create a Pig Latin Translator in JavaScript.", "input": "Not applicable", "output": "function pigLatinTranslator(str) {\n // Split the string into an array\n const strArr = str.split(' ');\n // The final output\n const translated = [];\n const vowels = ['a', 'e', 'i', 'o', 'u'];\n\n // Loop over the array\n for (let word of strArr) {\n // Check if the word starts with a vowel\n if (vowels.indexOf(word[0].toLowerCase()) !== -1) {\n // If so, add 'way' to the end\n translated.push(word + 'way');\n } else {\n // Otherwise, collect the consonants\n let consonantCluster = '';\n // Loop until you find a vowel- or until you reach the maximum length you can reach\n for (let i = 0; i < word.length; i++) {\n if (vowels.indexOf(word[i].toLowerCase()) === -1) {\n consonantCluster += word[i];\n } else {\n break;\n }\n }\n // Add the consonants + 'ay' to the end\n translated.push(word.substr(consonantCluster.length) + consonantCluster + 'ay');\n }\n }\n // Join the array and return it\n return translated.join(' ');\n}"}
{"text": "<s>[INST] Write a python program to clean up a list of emails and put them into a new list. here are the inputs original_list = ['bob@example.com', 'alice+bob@cafe.com', 'bob@gmail.com.uk', 'bob+alice@example']\n\nclean_list = []\n\nfor email in original_list:\n email_without_plus = email.split('+')[0]\n email_without_dot_uk = email_without_plus.split('.uk')[0]\n clean_list.append(email_without_dot_uk)\n\nprint(clean_list) # prints ['bob@example.com', 'alice@cafe.com', 'bob@gmail.com', 'bob@example'] [/INST] \\n The original list of emails:\n['bob@example.com', 'alice+bob@cafe.com', 'bob@gmail.com.uk', 'bob+alice@example'] </s>", "instruction": "Write a python program to clean up a list of emails and put them into a new list.", "input": "The original list of emails:\n['bob@example.com', 'alice+bob@cafe.com', 'bob@gmail.com.uk', 'bob+alice@example']", "output": "original_list = ['bob@example.com', 'alice+bob@cafe.com', 'bob@gmail.com.uk', 'bob+alice@example']\n\nclean_list = []\n\nfor email in original_list:\n email_without_plus = email.split('+')[0]\n email_without_dot_uk = email_without_plus.split('.uk')[0]\n clean_list.append(email_without_dot_uk)\n\nprint(clean_list) # prints ['bob@example.com', 'alice@cafe.com', 'bob@gmail.com', 'bob@example']"}
{"text": "<s>[INST] Generate an object-oriented code using the book-library domain. here are the inputs class Book:\n    def __init__(self, title, author, ISBN):\n        self.title = title\n        self.author = author\n        self.ISBN = ISBN\n\nclass Library:\n    def __init__(self, books = []):\n        self.books = books\n    \n    def addBook(self, book):\n        self.books.append(book)\n    \n    def removeBook(self, title):\n        for book in self.books:\n            if book.title == title:\n                self.books.remove(book)\n \n    def searchBook(self, title):\n        for book in self.books:\n            if book.title == title:\n                return book\n        return None [/INST] \\n  </s>", "instruction": "Generate an object-oriented code using the book-library domain.", "input": "", "output": "class Book:\n    def __init__(self, title, author, ISBN):\n        self.title = title\n        self.author = author\n        self.ISBN = ISBN\n\nclass Library:\n    def __init__(self, books = []):\n        self.books = books\n    \n    def addBook(self, book):\n        self.books.append(book)\n    \n    def removeBook(self, title):\n        for book in self.books:\n            if book.title == title:\n                self.books.remove(book)\n \n    def searchBook(self, title):\n        for book in self.books:\n            if book.title == title:\n                return book\n        return None"}
{"text": "<s>[INST] Compile a Java program \"HelloWorld.java\" using the command line. here are the inputs javac HelloWorld.java [/INST] \\n HelloWorld.java \npublic class HelloWorld {\n  public static void main(String[] args) {\n     System.out.println(\"Hello World!\");\n  }\n} </s>", "instruction": "Compile a Java program \"HelloWorld.java\" using the command line.", "input": "HelloWorld.java \npublic class HelloWorld {\n  public static void main(String[] args) {\n     System.out.println(\"Hello World!\");\n  }\n}", "output": "javac HelloWorld.java"}
{"text": "<s>[INST] Write an SQL query to calculate the 25th percentile for the past 7 days in a column with values date, temperature. here are the inputs SELECT PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY t2.temperature)\nFROM \n (SELECT t1.temperature \n FROM TABLE t1\n JOIN \n (SELECT DISTINCT date \n FROM TABLE \n ORDER BY date DESC \n LIMIT 7) AS t2 \n ON t1.date = t2.date) AS t3; [/INST] \\n Not applicable </s>", "instruction": "Write an SQL query to calculate the 25th percentile for the past 7 days in a column with values date, temperature.", "input": "Not applicable", "output": "SELECT PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY t2.temperature)\nFROM \n (SELECT t1.temperature \n FROM TABLE t1\n JOIN \n (SELECT DISTINCT date \n FROM TABLE \n ORDER BY date DESC \n LIMIT 7) AS t2 \n ON t1.date = t2.date) AS t3;"}
{"text": "<s>[INST] Create a web page with a search input and a results section. When the user types a search query in the input, the results section should display a list of matching results from an API. The API returns items with fields for `title`, `image_url`, and `url`. here are the inputs <html>\n <head>\n  <title>Search</title>\n  <script>\n   const input = document.querySelector('#search');\n   const results = document.querySelector('#results');\n\n   const handleSearch = (e) => {\n    fetch('https://example.com/api/search', { \n     method: 'POST',\n     body: {\n      query: e.target.value\n     }\n    })\n    .then(response => response.json())\n    .then(data => {\n     results.innerHTML = '';\n     for (let item of data) {\n      results.innerHTML += `\n      <div>\n       <h3>${item.title}</h3>\n       <img src=\"${item.image_url}\" />\n       <p><a href=\"${item.url}\">Link</a></p>\n      </div>`;\n     }\n    });\n   }\n\n   input.addEventListener('input', handleSearch);\n  </script>\n </head>\n <body>\n  <input type=\"text\" id=\"search\" />\n  <div id=\"results\"></div>\n </body>\n</html> [/INST] \\n Not applicable </s>", "instruction": "Create a web page with a search input and a results section. When the user types a search query in the input, the results section should display a list of matching results from an API. The API returns items with fields for `title`, `image_url`, and `url`.", "input": "Not applicable", "output": "<html>\n <head>\n  <title>Search</title>\n  <script>\n   const input = document.querySelector('#search');\n   const results = document.querySelector('#results');\n\n   const handleSearch = (e) => {\n    fetch('https://example.com/api/search', { \n     method: 'POST',\n     body: {\n      query: e.target.value\n     }\n    })\n    .then(response => response.json())\n    .then(data => {\n     results.innerHTML = '';\n     for (let item of data) {\n      results.innerHTML += `\n      <div>\n       <h3>${item.title}</h3>\n       <img src=\"${item.image_url}\" />\n       <p><a href=\"${item.url}\">Link</a></p>\n      </div>`;\n     }\n    });\n   }\n\n   input.addEventListener('input', handleSearch);\n  </script>\n </head>\n <body>\n  <input type=\"text\" id=\"search\" />\n  <div id=\"results\"></div>\n </body>\n</html>"}
{"text": "<s>[INST] Create an algorithm that takes the median of 3 integers without using any built-in functions. here are the inputs def median3(a,b,c):\n if (a > b) :\n  if ( a > c ) :\n   if (b > c) : return b\n   else : return c\n else :\n  if ( a < c ) : return a\n  else :\n   if ( b > c ) : return c\n   else : return b [/INST] \\n 12, 4, 6 </s>", "instruction": "Create an algorithm that takes the median of 3 integers without using any built-in functions.", "input": "12, 4, 6", "output": "def median3(a,b,c):\n if (a > b) :\n  if ( a > c ) :\n   if (b > c) : return b\n   else : return c\n else :\n  if ( a < c ) : return a\n  else :\n   if ( b > c ) : return c\n   else : return b"}
{"text": "<s>[INST] Write some code to represent a binary tree. here are the inputs class Node: \n    def __init__(self, val): \n        self.val = val  \n        self.left = None\n        self.right = None\n\n\nclass BinaryTree: \n\n    def __init__(self):  \n        self.root = None\n\n    def printTree(self, node): \n        if node != None: \n            self.printTree(node.left) \n            print(node.val) \n            self.printTree(node.right) [/INST] \\n  </s>", "instruction": "Write some code to represent a binary tree.", "input": "", "output": "class Node: \n    def __init__(self, val): \n        self.val = val  \n        self.left = None\n        self.right = None\n\n\nclass BinaryTree: \n\n    def __init__(self):  \n        self.root = None\n\n    def printTree(self, node): \n        if node != None: \n            self.printTree(node.left) \n            print(node.val) \n            self.printTree(node.right)"}
{"text": "<s>[INST] Create a function in JavaScript to check if a number lies between a range. here are the inputs const isBetween = (num, lower, upper) => {\n if (num >= lower && num <= upper) {\n return true;\n } else {\n return false;\n }\n};\nconsole.log(isBetween(5, 2, 7));\n# Output: true [/INST] \\n Number: 5, Lower Range: 2, Upper Range: 7 </s>", "instruction": "Create a function in JavaScript to check if a number lies between a range.", "input": "Number: 5, Lower Range: 2, Upper Range: 7", "output": "const isBetween = (num, lower, upper) => {\n if (num >= lower && num <= upper) {\n return true;\n } else {\n return false;\n }\n};\nconsole.log(isBetween(5, 2, 7));\n# Output: true"}
{"text": "<s>[INST] Generate sample data for a web application using Python's faker library. The output should contain three columns of data: name, email, and age. here are the inputs from faker import Faker\n\nfake = Faker()\nfor _ in range(10):\n print(fake.name(), fake.email(), fake.random_int(min=18, max=60)) [/INST] \\n Not applicable </s>", "instruction": "Generate sample data for a web application using Python's faker library. The output should contain three columns of data: name, email, and age.", "input": "Not applicable", "output": "from faker import Faker\n\nfake = Faker()\nfor _ in range(10):\n print(fake.name(), fake.email(), fake.random_int(min=18, max=60))"}
{"text": "<s>[INST] Create a function to check if an array is a palindrome here are the inputs def is_palindrome(arr):\n    return arr == arr[::-1] [/INST] \\n  </s>", "instruction": "Create a function to check if an array is a palindrome", "input": "", "output": "def is_palindrome(arr):\n    return arr == arr[::-1]"}
{"text": "<s>[INST] Develop a PHP program to calculate the difference between two dates. here are the inputs <?php\n \n$date1 = new DateTime(\"01/07/2020\");\n$date2 = new DateTime(\"07/01/2021\");\n \n$diff = $date1->diff($date2);\n\necho \"The difference between the two dates is \" . $diff->days . \" days\";\n?> [/INST] \\n 01/07/2020, 07/01/2021 </s>", "instruction": "Develop a PHP program to calculate the difference between two dates.", "input": "01/07/2020, 07/01/2021", "output": "<?php\n \n$date1 = new DateTime(\"01/07/2020\");\n$date2 = new DateTime(\"07/01/2021\");\n \n$diff = $date1->diff($date2);\n\necho \"The difference between the two dates is \" . $diff->days . \" days\";\n?>"}
{"text": "<s>[INST] Edit the following code to print the integers from 0 to 9 inclusive. here are the inputs for i in range(10):\n print(i + 1) [/INST] \\n for i in range(10):\n print(i) </s>", "instruction": "Edit the following code to print the integers from 0 to 9 inclusive.", "input": "for i in range(10):\n print(i)", "output": "for i in range(10):\n print(i + 1)"}
{"text": "<s>[INST] Create a Python algorithm to classify positive and negative sentiment in tweets. here are the inputs def sentiment_analysis(tweets):\n    # Initialize a list to store the result \n    results = [] \n\n    # Iterate through each tweet\n    for tweet in tweets:\n        # Clean the tweet \n        tweet = preprocessing(tweet)\n\n        # Vectorize the tweet and obtain the prediction \n        tweet_vector = vectorize(tweet)\n        prediction = predict_sentiment(tweet_vector)\n\n        # Append the prediction to the result list\n        if prediction == 1:\n            results.append(\"Positive\")\n        elif preduction == 0:\n            results.append(\"Negative\")\n\n    return results [/INST] \\n  </s>", "instruction": "Create a Python algorithm to classify positive and negative sentiment in tweets.", "input": "", "output": "def sentiment_analysis(tweets):\n    # Initialize a list to store the result \n    results = [] \n\n    # Iterate through each tweet\n    for tweet in tweets:\n        # Clean the tweet \n        tweet = preprocessing(tweet)\n\n        # Vectorize the tweet and obtain the prediction \n        tweet_vector = vectorize(tweet)\n        prediction = predict_sentiment(tweet_vector)\n\n        # Append the prediction to the result list\n        if prediction == 1:\n            results.append(\"Positive\")\n        elif preduction == 0:\n            results.append(\"Negative\")\n\n    return results"}
{"text": "<s>[INST] Write a JavaScript function to convert a given number from hexadecimal to octal. here are the inputs /**\n * This function takes a hexadecimal number as an argument and converts it to the equivalent octal number.\n * @param {string} hex - The hexadecimal number to be converted \n */\n \nfunction hexToOctal(hex) {\n  let octal = parseInt(hex, 16).toString(8);\n  \n  return octal;\n} [/INST] \\n  </s>", "instruction": "Write a JavaScript function to convert a given number from hexadecimal to octal.", "input": "", "output": "/**\n * This function takes a hexadecimal number as an argument and converts it to the equivalent octal number.\n * @param {string} hex - The hexadecimal number to be converted \n */\n \nfunction hexToOctal(hex) {\n  let octal = parseInt(hex, 16).toString(8);\n  \n  return octal;\n}"}
{"text": "<s>[INST] Create a React component to render a loading spinner on the screen. here are the inputs import React from 'react';\n\nconst Loader = () => {\n  return (\n    <div className=\"loader-container\">\n      <div className=\"loader\" />\n    </div>\n  );\n}\n\nexport default Loader; [/INST] \\n Not applicable </s>", "instruction": "Create a React component to render a loading spinner on the screen.", "input": "Not applicable", "output": "import React from 'react';\n\nconst Loader = () => {\n  return (\n    <div className=\"loader-container\">\n      <div className=\"loader\" />\n    </div>\n  );\n}\n\nexport default Loader;"}
{"text": "<s>[INST] Rewrite a program in JavaScript to change all instances of a a given character with a different character. here are the inputs let chars = string.split('');\nlet newString = '';\n\nfor (let i = 0; i < chars.length; i++) {\n if (chars[i] === character) chars[i] = replaceCharacter;\n newString += chars[i];\n}\n\nconsole.log(newString);  // Output: \"Thix ix a xtring\" [/INST] \\n string = \"This is a string\"\ncharacter = 's'\nreplaceCharacter = 'x' </s>", "instruction": "Rewrite a program in JavaScript to change all instances of a a given character with a different character.", "input": "string = \"This is a string\"\ncharacter = 's'\nreplaceCharacter = 'x'", "output": "let chars = string.split('');\nlet newString = '';\n\nfor (let i = 0; i < chars.length; i++) {\n if (chars[i] === character) chars[i] = replaceCharacter;\n newString += chars[i];\n}\n\nconsole.log(newString);  // Output: \"Thix ix a xtring\""}
